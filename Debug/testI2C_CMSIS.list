
testI2C_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001288  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001394  08001394  00002394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013c4  080013c4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080013c4  080013c4  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013c4  080013c4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013c4  080013c4  000023c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013c8  080013c8  000023c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080013cc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  080013d8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080013d8  00003038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000306b  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f82  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  00007028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000030c  00000000  00000000  00007460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001669f  00000000  00000000  0000776c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ff4  00000000  00000000  0001de0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080201  00000000  00000000  00022dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f10  00000000  00000000  000a3044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a3f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800137c 	.word	0x0800137c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800137c 	.word	0x0800137c

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	0a1b      	lsrs	r3, r3, #8
 8000192:	b29a      	uxth	r2, r3
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	611a      	str	r2, [r3, #16]
}
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr

080001a2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001a2:	b480      	push	{r7}
 80001a4:	b083      	sub	sp, #12
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
 80001aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	0a1b      	lsrs	r3, r3, #8
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	615a      	str	r2, [r3, #20]
}
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b085      	sub	sp, #20
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001c8:	4b08      	ldr	r3, [pc, #32]	@ (80001ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80001ca:	699a      	ldr	r2, [r3, #24]
 80001cc:	4907      	ldr	r1, [pc, #28]	@ (80001ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4313      	orrs	r3, r2
 80001d2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001d4:	4b05      	ldr	r3, [pc, #20]	@ (80001ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80001d6:	699a      	ldr	r2, [r3, #24]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4013      	ands	r3, r2
 80001dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001de:	68fb      	ldr	r3, [r7, #12]
}
 80001e0:	bf00      	nop
 80001e2:	3714      	adds	r7, #20
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000

080001f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 fa53 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f83b 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f873 	bl	80002e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  i2c_I2C1_GPIO_config();
 8000202:	f000 f8b5 	bl	8000370 <i2c_I2C1_GPIO_config>
  i2c_I2C1_config();
 8000206:	f000 f8d5 	bl	80003b4 <i2c_I2C1_config>

  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800020a:	4916      	ldr	r1, [pc, #88]	@ (8000264 <main+0x74>)
 800020c:	4816      	ldr	r0, [pc, #88]	@ (8000268 <main+0x78>)
 800020e:	f7ff ffb9 	bl	8000184 <LL_GPIO_SetOutputPin>

    NVIC_EnableIRQ(I2C1_EV_IRQn); // Kích hoạt ngắt sự kiện I2C1
 8000212:	201f      	movs	r0, #31
 8000214:	f7ff ff9a 	bl	800014c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(I2C1_ER_IRQn); // Kích hoạt ngắt lỗi I2C1
 8000218:	2020      	movs	r0, #32
 800021a:	f7ff ff97 	bl	800014c <__NVIC_EnableIRQ>
  //  uint8_t data = 5;
  uint8_t data1[8] = {0, 1, 2, 3, 4, 5, 6, 7};
 800021e:	4a13      	ldr	r2, [pc, #76]	@ (800026c <main+0x7c>)
 8000220:	f107 0308 	add.w	r3, r7, #8
 8000224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000228:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t rxdata[3] = {6, 7, 8};
 800022c:	4a10      	ldr	r2, [pc, #64]	@ (8000270 <main+0x80>)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	4611      	mov	r1, r2
 8000234:	8019      	strh	r1, [r3, #0]
 8000236:	3302      	adds	r3, #2
 8000238:	0c12      	lsrs	r2, r2, #16
 800023a:	701a      	strb	r2, [r3, #0]
  //    if (6 == rxdata[1])
  //    {
  //      LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
  //    }
  //  }
  if (i2c_I2C1_masterTransmit_IT(0x68 << 1, 0x03, data1, 8, 1000))
 800023c:	f107 0208 	add.w	r2, r7, #8
 8000240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2308      	movs	r3, #8
 8000248:	2103      	movs	r1, #3
 800024a:	20d0      	movs	r0, #208	@ 0xd0
 800024c:	f000 f8e4 	bl	8000418 <i2c_I2C1_masterTransmit_IT>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d004      	beq.n	8000260 <main+0x70>
  {
    LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000256:	4903      	ldr	r1, [pc, #12]	@ (8000264 <main+0x74>)
 8000258:	4803      	ldr	r0, [pc, #12]	@ (8000268 <main+0x78>)
 800025a:	f7ff ffa2 	bl	80001a2 <LL_GPIO_ResetOutputPin>
  //  i2c_I2C1_masterReceive(117, &data, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <main+0x70>
 8000264:	04200020 	.word	0x04200020
 8000268:	40011000 	.word	0x40011000
 800026c:	08001394 	.word	0x08001394
 8000270:	0800139c 	.word	0x0800139c

08000274 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	@ 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	@ 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 f84e 	bl	8001324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000296:	2301      	movs	r3, #1
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800029e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	2300      	movs	r3, #0
 80002a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fb3f 	bl	800092c <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80002b4:	f000 f95e 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002bc:	2301      	movs	r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fdad 	bl	8000e30 <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002dc:	f000 f94a 	bl	8000574 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3740      	adds	r7, #64	@ 0x40
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80002fc:	2010      	movs	r0, #16
 80002fe:	f7ff ff5f 	bl	80001c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000302:	2020      	movs	r0, #32
 8000304:	f7ff ff5c 	bl	80001c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000308:	2004      	movs	r0, #4
 800030a:	f7ff ff59 	bl	80001c0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800030e:	2008      	movs	r0, #8
 8000310:	f7ff ff56 	bl	80001c0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000314:	4913      	ldr	r1, [pc, #76]	@ (8000364 <MX_GPIO_Init+0x7c>)
 8000316:	4814      	ldr	r0, [pc, #80]	@ (8000368 <MX_GPIO_Init+0x80>)
 8000318:	f7ff ff43 	bl	80001a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800031c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000320:	4812      	ldr	r0, [pc, #72]	@ (800036c <MX_GPIO_Init+0x84>)
 8000322:	f7ff ff3e 	bl	80001a2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000326:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_GPIO_Init+0x7c>)
 8000328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800032a:	2301      	movs	r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	480b      	ldr	r0, [pc, #44]	@ (8000368 <MX_GPIO_Init+0x80>)
 800033c:	f000 ff8c 	bl	8001258 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000340:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000346:	2301      	movs	r3, #1
 8000348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800034a:	2302      	movs	r3, #2
 800034c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <MX_GPIO_Init+0x84>)
 8000358:	f000 ff7e 	bl	8001258 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800035c:	bf00      	nop
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	04200020 	.word	0x04200020
 8000368:	40011000 	.word	0x40011000
 800036c:	40010c00 	.word	0x40010c00

08000370 <i2c_I2C1_GPIO_config>:
/* USER CODE BEGIN 4 */
/**
 * The function configures GPIO pins PB6 (SCL) and PB7 (SDA) for I2C communication on I2C1 interface.
 */
void i2c_I2C1_GPIO_config(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  // PB6 (SCL), PB7(SDA)
  // Bật xung clock PORTB
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000374:	4b0d      	ldr	r3, [pc, #52]	@ (80003ac <i2c_I2C1_GPIO_config+0x3c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a0c      	ldr	r2, [pc, #48]	@ (80003ac <i2c_I2C1_GPIO_config+0x3c>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
  // Chế độ: xuất 10Mhz
  GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_MODE7); // Xóa MODE6 và MODE7
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <i2c_I2C1_GPIO_config+0x40>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <i2c_I2C1_GPIO_config+0x40>)
 8000386:	f023 534c 	bic.w	r3, r3, #855638016	@ 0x33000000
 800038a:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (GPIO_CRL_MODE6_0 | GPIO_CRL_MODE7_0);
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <i2c_I2C1_GPIO_config+0x40>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <i2c_I2C1_GPIO_config+0x40>)
 8000392:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 8000396:	6013      	str	r3, [r2, #0]
  // CNF: Alternate function Open-Drain
  GPIOB->CRL |= (GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 8000398:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <i2c_I2C1_GPIO_config+0x40>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <i2c_I2C1_GPIO_config+0x40>)
 800039e:	f043 434c 	orr.w	r3, r3, #3422552064	@ 0xcc000000
 80003a2:	6013      	str	r3, [r2, #0]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <i2c_I2C1_config>:
/**
 * The function `i2c_I2C1_config` configures the I2C1 peripheral for communication at a speed of
 * 100KHz.
 */
void i2c_I2C1_config(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  // Bật xung clock I2C
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <i2c_I2C1_config+0x5c>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4a14      	ldr	r2, [pc, #80]	@ (8000410 <i2c_I2C1_config+0x5c>)
 80003be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003c2:	61d3      	str	r3, [r2, #28]

  // Cấu hình tần số I2C dùng thanh ghi I2C_CR2
  // tần số này trùng với tần số APB1 mà bạn đã cấu hình trước đó
  I2C1->CR2 &= ~(I2C_CR2_FREQ);
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80003ce:	6053      	str	r3, [r2, #4]
  I2C1->CR2 |= (8UL << 0);
 80003d0:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6053      	str	r3, [r2, #4]
  //  Cấu hình TRISE dùng thanh ghi I2C_TRISE
  //  như đã thấy ở phần ví dụ bit 5:0 của thanh ghi I2C_TRISE, ta dùng tần số 8Mhz nên TRISE= 0x09
  I2C1->TRISE &= ~(0xFF);
 80003dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80003e6:	6213      	str	r3, [r2, #32]
  I2C1->TRISE |= 0x09;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003ea:	6a1b      	ldr	r3, [r3, #32]
 80003ec:	4a09      	ldr	r2, [pc, #36]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003ee:	f043 0309 	orr.w	r3, r3, #9
 80003f2:	6213      	str	r3, [r2, #32]
  // Cấu hình tốc độ I2C (100KHz SCL) dùng thanh ghi I2C_CCR
  // ta có f=8Mhz -> T=0.125ns, ta muốn T_high=T_low=5us => CCR=5us/0.125ns=40
  I2C1->CCR = 0x28;
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003f6:	2228      	movs	r2, #40	@ 0x28
 80003f8:	61da      	str	r2, [r3, #28]
  // Bật ngoại vi I2C dùng I2C_CR1 bằng cách đặt PE=1
  I2C1->CR1 |= I2C_CR1_PE;
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <i2c_I2C1_config+0x60>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a05      	ldr	r2, [pc, #20]	@ (8000414 <i2c_I2C1_config+0x60>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40005400 	.word	0x40005400

08000418 <i2c_I2C1_masterTransmit_IT>:
uint8_t reg_slave;
uint8_t *tx_data;
uint8_t tx_len;
uint8_t tx_index = 0;
bool i2c_I2C1_masterTransmit_IT(uint8_t Addr, uint8_t reg, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	603a      	str	r2, [r7, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
 8000426:	460b      	mov	r3, r1
 8000428:	71bb      	strb	r3, [r7, #6]
 800042a:	4613      	mov	r3, r2
 800042c:	717b      	strb	r3, [r7, #5]
  uint32_t count = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  // Ch�? I2C vào trạng thái bận
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 8000432:	e007      	b.n	8000444 <i2c_I2C1_masterTransmit_IT+0x2c>
  {
    if (++count > 20)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b14      	cmp	r3, #20
 800043e:	d901      	bls.n	8000444 <i2c_I2C1_masterTransmit_IT+0x2c>
      return false;
 8000440:	2300      	movs	r3, #0
 8000442:	e032      	b.n	80004aa <i2c_I2C1_masterTransmit_IT+0x92>
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f003 0302 	and.w	r3, r3, #2
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f1      	bne.n	8000434 <i2c_I2C1_masterTransmit_IT+0x1c>
  }
  count = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  // Bit POS được xóa để đảm bảo I2C hoạt động trong chế độ chuẩn (standard mode).
  I2C1->CR1 &= ~(I2C_CR1_POS);
 8000454:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 800045a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800045e:	6013      	str	r3, [r2, #0]
  // Bật ngắt bộ đệm
  I2C1->CR2 |= I2C_CR2_ITBUFEN;
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 8000466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800046a:	6053      	str	r3, [r2, #4]
  // Bật ngắt sự kiện
  I2C1->CR2 |= I2C_CR2_ITEVTEN;
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4a10      	ldr	r2, [pc, #64]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000476:	6053      	str	r3, [r2, #4]
  // Bật ngắt phát hiện lỗi
  I2C1->CR2 |= I2C_CR2_ITERREN;
 8000478:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 800047e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000482:	6053      	str	r3, [r2, #4]

  Address_slave = Addr;
 8000484:	4a0c      	ldr	r2, [pc, #48]	@ (80004b8 <i2c_I2C1_masterTransmit_IT+0xa0>)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	7013      	strb	r3, [r2, #0]
  reg_slave = reg;
 800048a:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <i2c_I2C1_masterTransmit_IT+0xa4>)
 800048c:	79bb      	ldrb	r3, [r7, #6]
 800048e:	7013      	strb	r3, [r2, #0]
  tx_data = pData;
 8000490:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <i2c_I2C1_masterTransmit_IT+0xa8>)
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	6013      	str	r3, [r2, #0]
  tx_len = len;
 8000496:	4a0b      	ldr	r2, [pc, #44]	@ (80004c4 <i2c_I2C1_masterTransmit_IT+0xac>)
 8000498:	797b      	ldrb	r3, [r7, #5]
 800049a:	7013      	strb	r3, [r2, #0]
  // Tạo đi�?u kiện Start
  I2C1->CR1 |= I2C_CR1_START;
 800049c:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a04      	ldr	r2, [pc, #16]	@ (80004b4 <i2c_I2C1_masterTransmit_IT+0x9c>)
 80004a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004a6:	6013      	str	r3, [r2, #0]
  return true;
 80004a8:	2301      	movs	r3, #1
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40005400 	.word	0x40005400
 80004b8:	20000028 	.word	0x20000028
 80004bc:	20000029 	.word	0x20000029
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	20000030 	.word	0x20000030

080004c8 <I2C1_EV_IRQHandler>:
  }
  return true;
}

void I2C1_EV_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0

  // Kiểm tra cờ SB (Start Bit) được set
  if (I2C1->SR1 & I2C_SR1_SB)
 80004cc:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d004      	beq.n	80004e2 <I2C1_EV_IRQHandler+0x1a>
  {
    // Gửi địa chỉ thiết bị với bit ghi (0)
    I2C1->DR = Address_slave;
 80004d8:	4b20      	ldr	r3, [pc, #128]	@ (800055c <I2C1_EV_IRQHandler+0x94>)
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 80004de:	611a      	str	r2, [r3, #16]
      LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
      // Tắt các ngắt để tránh kích hoạt ngắt không cần thiết
      I2C1->CR2 &= ~(I2C_CR2_ITBUFEN | I2C_CR2_ITEVTEN | I2C_CR2_ITERREN);
    }
  }
}
 80004e0:	e038      	b.n	8000554 <I2C1_EV_IRQHandler+0x8c>
  else if (I2C1->SR1 & I2C_SR1_ADDR)
 80004e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <I2C1_EV_IRQHandler+0x38>
    (void)I2C1->SR1;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 80004f0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80004f2:	4b19      	ldr	r3, [pc, #100]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 80004f4:	699b      	ldr	r3, [r3, #24]
    I2C1->DR = reg_slave;
 80004f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <I2C1_EV_IRQHandler+0x98>)
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 80004fc:	611a      	str	r2, [r3, #16]
}
 80004fe:	e029      	b.n	8000554 <I2C1_EV_IRQHandler+0x8c>
  else if (I2C1->SR1 & I2C_SR1_TXE)
 8000500:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000508:	2b00      	cmp	r3, #0
 800050a:	d023      	beq.n	8000554 <I2C1_EV_IRQHandler+0x8c>
    if (tx_index < tx_len)
 800050c:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <I2C1_EV_IRQHandler+0x9c>)
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <I2C1_EV_IRQHandler+0xa0>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	d20c      	bcs.n	8000532 <I2C1_EV_IRQHandler+0x6a>
      I2C1->DR = tx_data[tx_index++];
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <I2C1_EV_IRQHandler+0xa4>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <I2C1_EV_IRQHandler+0x9c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	1c59      	adds	r1, r3, #1
 8000522:	b2c8      	uxtb	r0, r1
 8000524:	490f      	ldr	r1, [pc, #60]	@ (8000564 <I2C1_EV_IRQHandler+0x9c>)
 8000526:	7008      	strb	r0, [r1, #0]
 8000528:	4413      	add	r3, r2
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 800052e:	611a      	str	r2, [r3, #16]
}
 8000530:	e010      	b.n	8000554 <I2C1_EV_IRQHandler+0x8c>
      I2C1->CR1 |= I2C_CR1_STOP;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 8000538:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800053c:	6013      	str	r3, [r2, #0]
      LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800053e:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000542:	480b      	ldr	r0, [pc, #44]	@ (8000570 <I2C1_EV_IRQHandler+0xa8>)
 8000544:	f7ff fe1e 	bl	8000184 <LL_GPIO_SetOutputPin>
      I2C1->CR2 &= ~(I2C_CR2_ITBUFEN | I2C_CR2_ITEVTEN | I2C_CR2_ITERREN);
 8000548:	4b03      	ldr	r3, [pc, #12]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a02      	ldr	r2, [pc, #8]	@ (8000558 <I2C1_EV_IRQHandler+0x90>)
 800054e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000552:	6053      	str	r3, [r2, #4]
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40005400 	.word	0x40005400
 800055c:	20000028 	.word	0x20000028
 8000560:	20000029 	.word	0x20000029
 8000564:	20000031 	.word	0x20000031
 8000568:	20000030 	.word	0x20000030
 800056c:	2000002c 	.word	0x2000002c
 8000570:	40010c00 	.word	0x40010c00

08000574 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <Error_Handler+0x8>

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <HAL_MspInit+0x5c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_MspInit+0x5c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <HAL_MspInit+0x5c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <HAL_MspInit+0x60>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <HAL_MspInit+0x60>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f87a 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000654:	f7ff fff8 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065a:	490c      	ldr	r1, [pc, #48]	@ (800068c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800065c:	4a0c      	ldr	r2, [pc, #48]	@ (8000690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:

  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a09      	ldr	r2, [pc, #36]	@ (8000694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000670:	4c09      	ldr	r4, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067e:	f000 fe59 	bl	8001334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fdb5 	bl	80001f0 <main>
  bx lr
 8000686:	4770      	bx	lr
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000690:	080013cc 	.word	0x080013cc
  ldr r2, =_sbss
 8000694:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000698:	20000038 	.word	0x20000038

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <HAL_Init+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <HAL_Init+0x28>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f907 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff ff60 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f911 	bl	8000912 <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f8e7 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	@ (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	20000034 	.word	0x20000034

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	@ (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000034 	.word	0x20000034

08000764 <__NVIC_SetPriorityGrouping>:
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff49 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff5e 	bl	80007ac <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffb0 	bl	8000880 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e272      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 8087 	beq.w	8000a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800094c:	4b92      	ldr	r3, [pc, #584]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f003 030c 	and.w	r3, r3, #12
 8000954:	2b04      	cmp	r3, #4
 8000956:	d00c      	beq.n	8000972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000958:	4b8f      	ldr	r3, [pc, #572]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 030c 	and.w	r3, r3, #12
 8000960:	2b08      	cmp	r3, #8
 8000962:	d112      	bne.n	800098a <HAL_RCC_OscConfig+0x5e>
 8000964:	4b8c      	ldr	r3, [pc, #560]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800096c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000970:	d10b      	bne.n	800098a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000972:	4b89      	ldr	r3, [pc, #548]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d06c      	beq.n	8000a58 <HAL_RCC_OscConfig+0x12c>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d168      	bne.n	8000a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e24c      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000992:	d106      	bne.n	80009a2 <HAL_RCC_OscConfig+0x76>
 8000994:	4b80      	ldr	r3, [pc, #512]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a7f      	ldr	r2, [pc, #508]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 800099a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e02e      	b.n	8000a00 <HAL_RCC_OscConfig+0xd4>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10c      	bne.n	80009c4 <HAL_RCC_OscConfig+0x98>
 80009aa:	4b7b      	ldr	r3, [pc, #492]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a7a      	ldr	r2, [pc, #488]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	4b78      	ldr	r3, [pc, #480]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a77      	ldr	r2, [pc, #476]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e01d      	b.n	8000a00 <HAL_RCC_OscConfig+0xd4>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80009cc:	d10c      	bne.n	80009e8 <HAL_RCC_OscConfig+0xbc>
 80009ce:	4b72      	ldr	r3, [pc, #456]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a71      	ldr	r2, [pc, #452]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	4b6f      	ldr	r3, [pc, #444]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a6e      	ldr	r2, [pc, #440]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e00b      	b.n	8000a00 <HAL_RCC_OscConfig+0xd4>
 80009e8:	4b6b      	ldr	r3, [pc, #428]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a6a      	ldr	r2, [pc, #424]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b68      	ldr	r3, [pc, #416]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a67      	ldr	r2, [pc, #412]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 80009fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d013      	beq.n	8000a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a08:	f7ff fea2 	bl	8000750 <HAL_GetTick>
 8000a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a0e:	e008      	b.n	8000a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a10:	f7ff fe9e 	bl	8000750 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	2b64      	cmp	r3, #100	@ 0x64
 8000a1c:	d901      	bls.n	8000a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e200      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a22:	4b5d      	ldr	r3, [pc, #372]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f0      	beq.n	8000a10 <HAL_RCC_OscConfig+0xe4>
 8000a2e:	e014      	b.n	8000a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a30:	f7ff fe8e 	bl	8000750 <HAL_GetTick>
 8000a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a36:	e008      	b.n	8000a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a38:	f7ff fe8a 	bl	8000750 <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	2b64      	cmp	r3, #100	@ 0x64
 8000a44:	d901      	bls.n	8000a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a46:	2303      	movs	r3, #3
 8000a48:	e1ec      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a4a:	4b53      	ldr	r3, [pc, #332]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f0      	bne.n	8000a38 <HAL_RCC_OscConfig+0x10c>
 8000a56:	e000      	b.n	8000a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d063      	beq.n	8000b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a66:	4b4c      	ldr	r3, [pc, #304]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 030c 	and.w	r3, r3, #12
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a72:	4b49      	ldr	r3, [pc, #292]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 030c 	and.w	r3, r3, #12
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	d11c      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x18c>
 8000a7e:	4b46      	ldr	r3, [pc, #280]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d116      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a8a:	4b43      	ldr	r3, [pc, #268]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x176>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d001      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e1c0      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4939      	ldr	r1, [pc, #228]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ab6:	e03a      	b.n	8000b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d020      	beq.n	8000b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ac0:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <HAL_RCC_OscConfig+0x270>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac6:	f7ff fe43 	bl	8000750 <HAL_GetTick>
 8000aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000acc:	e008      	b.n	8000ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ace:	f7ff fe3f 	bl	8000750 <HAL_GetTick>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d901      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e1a1      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f0      	beq.n	8000ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aec:	4b2a      	ldr	r3, [pc, #168]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4927      	ldr	r1, [pc, #156]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	4313      	orrs	r3, r2
 8000afe:	600b      	str	r3, [r1, #0]
 8000b00:	e015      	b.n	8000b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <HAL_RCC_OscConfig+0x270>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b08:	f7ff fe22 	bl	8000750 <HAL_GetTick>
 8000b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b0e:	e008      	b.n	8000b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b10:	f7ff fe1e 	bl	8000750 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d901      	bls.n	8000b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e180      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f0      	bne.n	8000b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d03a      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d019      	beq.n	8000b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b42:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <HAL_RCC_OscConfig+0x274>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b48:	f7ff fe02 	bl	8000750 <HAL_GetTick>
 8000b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b4e:	e008      	b.n	8000b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b50:	f7ff fdfe 	bl	8000750 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d901      	bls.n	8000b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e160      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_RCC_OscConfig+0x26c>)
 8000b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f0      	beq.n	8000b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 fa9c 	bl	80010ac <RCC_Delay>
 8000b74:	e01c      	b.n	8000bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_RCC_OscConfig+0x274>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b7c:	f7ff fde8 	bl	8000750 <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b82:	e00f      	b.n	8000ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b84:	f7ff fde4 	bl	8000750 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d908      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e146      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	42420000 	.word	0x42420000
 8000ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ba4:	4b92      	ldr	r3, [pc, #584]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1e9      	bne.n	8000b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 80a6 	beq.w	8000d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10d      	bne.n	8000bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b88      	ldr	r3, [pc, #544]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a87      	ldr	r2, [pc, #540]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b85      	ldr	r3, [pc, #532]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bea:	4b82      	ldr	r3, [pc, #520]	@ (8000df4 <HAL_RCC_OscConfig+0x4c8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d118      	bne.n	8000c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8000df4 <HAL_RCC_OscConfig+0x4c8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8000df4 <HAL_RCC_OscConfig+0x4c8>)
 8000bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c02:	f7ff fda5 	bl	8000750 <HAL_GetTick>
 8000c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c08:	e008      	b.n	8000c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c0a:	f7ff fda1 	bl	8000750 <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b64      	cmp	r3, #100	@ 0x64
 8000c16:	d901      	bls.n	8000c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e103      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1c:	4b75      	ldr	r3, [pc, #468]	@ (8000df4 <HAL_RCC_OscConfig+0x4c8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f0      	beq.n	8000c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d106      	bne.n	8000c3e <HAL_RCC_OscConfig+0x312>
 8000c30:	4b6f      	ldr	r3, [pc, #444]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	4a6e      	ldr	r2, [pc, #440]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6213      	str	r3, [r2, #32]
 8000c3c:	e02d      	b.n	8000c9a <HAL_RCC_OscConfig+0x36e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10c      	bne.n	8000c60 <HAL_RCC_OscConfig+0x334>
 8000c46:	4b6a      	ldr	r3, [pc, #424]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	4a69      	ldr	r2, [pc, #420]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	6213      	str	r3, [r2, #32]
 8000c52:	4b67      	ldr	r3, [pc, #412]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c54:	6a1b      	ldr	r3, [r3, #32]
 8000c56:	4a66      	ldr	r2, [pc, #408]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	f023 0304 	bic.w	r3, r3, #4
 8000c5c:	6213      	str	r3, [r2, #32]
 8000c5e:	e01c      	b.n	8000c9a <HAL_RCC_OscConfig+0x36e>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	d10c      	bne.n	8000c82 <HAL_RCC_OscConfig+0x356>
 8000c68:	4b61      	ldr	r3, [pc, #388]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	4a60      	ldr	r2, [pc, #384]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6213      	str	r3, [r2, #32]
 8000c74:	4b5e      	ldr	r3, [pc, #376]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	4a5d      	ldr	r2, [pc, #372]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6213      	str	r3, [r2, #32]
 8000c80:	e00b      	b.n	8000c9a <HAL_RCC_OscConfig+0x36e>
 8000c82:	4b5b      	ldr	r3, [pc, #364]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	4a5a      	ldr	r2, [pc, #360]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	6213      	str	r3, [r2, #32]
 8000c8e:	4b58      	ldr	r3, [pc, #352]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	4a57      	ldr	r2, [pc, #348]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000c94:	f023 0304 	bic.w	r3, r3, #4
 8000c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d015      	beq.n	8000cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca2:	f7ff fd55 	bl	8000750 <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ca8:	e00a      	b.n	8000cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000caa:	f7ff fd51 	bl	8000750 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e0b1      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0ee      	beq.n	8000caa <HAL_RCC_OscConfig+0x37e>
 8000ccc:	e014      	b.n	8000cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cce:	f7ff fd3f 	bl	8000750 <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cd4:	e00a      	b.n	8000cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd6:	f7ff fd3b 	bl	8000750 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e09b      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cec:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1ee      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d105      	bne.n	8000d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a3b      	ldr	r2, [pc, #236]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8087 	beq.w	8000e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d14:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d061      	beq.n	8000de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d146      	bne.n	8000db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d28:	4b33      	ldr	r3, [pc, #204]	@ (8000df8 <HAL_RCC_OscConfig+0x4cc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fd0f 	bl	8000750 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d36:	f7ff fd0b 	bl	8000750 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e06d      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d48:	4b29      	ldr	r3, [pc, #164]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f0      	bne.n	8000d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d5c:	d108      	bne.n	8000d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d5e:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4921      	ldr	r1, [pc, #132]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a19      	ldr	r1, [r3, #32]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d80:	430b      	orrs	r3, r1
 8000d82:	491b      	ldr	r1, [pc, #108]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d88:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <HAL_RCC_OscConfig+0x4cc>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fcdf 	bl	8000750 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d96:	f7ff fcdb 	bl	8000750 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e03d      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x46a>
 8000db4:	e035      	b.n	8000e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <HAL_RCC_OscConfig+0x4cc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fcc8 	bl	8000750 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dc4:	f7ff fcc4 	bl	8000750 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e026      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x498>
 8000de2:	e01e      	b.n	8000e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d107      	bne.n	8000dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e019      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40007000 	.word	0x40007000
 8000df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <HAL_RCC_OscConfig+0x500>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d106      	bne.n	8000e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d001      	beq.n	8000e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e0d0      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e44:	4b6a      	ldr	r3, [pc, #424]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d910      	bls.n	8000e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e52:	4b67      	ldr	r3, [pc, #412]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 0207 	bic.w	r2, r3, #7
 8000e5a:	4965      	ldr	r1, [pc, #404]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e62:	4b63      	ldr	r3, [pc, #396]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d001      	beq.n	8000e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e0b8      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d020      	beq.n	8000ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e8c:	4b59      	ldr	r3, [pc, #356]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a58      	ldr	r2, [pc, #352]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ea4:	4b53      	ldr	r3, [pc, #332]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a52      	ldr	r2, [pc, #328]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eaa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000eb0:	4b50      	ldr	r3, [pc, #320]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	494d      	ldr	r1, [pc, #308]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d040      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d107      	bne.n	8000ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed6:	4b47      	ldr	r3, [pc, #284]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d115      	bne.n	8000f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e07f      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d107      	bne.n	8000efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eee:	4b41      	ldr	r3, [pc, #260]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e073      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efe:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e06b      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f0e:	4b39      	ldr	r3, [pc, #228]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f023 0203 	bic.w	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4936      	ldr	r1, [pc, #216]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f20:	f7ff fc16 	bl	8000750 <HAL_GetTick>
 8000f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f26:	e00a      	b.n	8000f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f28:	f7ff fc12 	bl	8000750 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e053      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 020c 	and.w	r2, r3, #12
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d1eb      	bne.n	8000f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f50:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d210      	bcs.n	8000f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 0207 	bic.w	r2, r3, #7
 8000f66:	4922      	ldr	r1, [pc, #136]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d001      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e032      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4916      	ldr	r1, [pc, #88]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d009      	beq.n	8000fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	490e      	ldr	r1, [pc, #56]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fbe:	f000 f821 	bl	8001004 <HAL_RCC_GetSysClockFreq>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	490a      	ldr	r1, [pc, #40]	@ (8000ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8000fd0:	5ccb      	ldrb	r3, [r1, r3]
 8000fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <HAL_RCC_ClockConfig+0x1cc>)
 8000fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_RCC_ClockConfig+0x1d0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb74 	bl	80006cc <HAL_InitTick>

  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40022000 	.word	0x40022000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	080013a0 	.word	0x080013a0
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <HAL_RCC_GetSysClockFreq+0x94>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b04      	cmp	r3, #4
 800102c:	d002      	beq.n	8001034 <HAL_RCC_GetSysClockFreq+0x30>
 800102e:	2b08      	cmp	r3, #8
 8001030:	d003      	beq.n	800103a <HAL_RCC_GetSysClockFreq+0x36>
 8001032:	e027      	b.n	8001084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <HAL_RCC_GetSysClockFreq+0x98>)
 8001036:	613b      	str	r3, [r7, #16]
      break;
 8001038:	e027      	b.n	800108a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	0c9b      	lsrs	r3, r3, #18
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4a17      	ldr	r2, [pc, #92]	@ (80010a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d010      	beq.n	8001074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_RCC_GetSysClockFreq+0x94>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	0c5b      	lsrs	r3, r3, #17
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_RCC_GetSysClockFreq+0x98>)
 8001066:	fb03 f202 	mul.w	r2, r3, r2
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e004      	b.n	800107e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001078:	fb02 f303 	mul.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	613b      	str	r3, [r7, #16]
      break;
 8001082:	e002      	b.n	800108a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_RCC_GetSysClockFreq+0x98>)
 8001086:	613b      	str	r3, [r7, #16]
      break;
 8001088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800108a:	693b      	ldr	r3, [r7, #16]
}
 800108c:	4618      	mov	r0, r3
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	007a1200 	.word	0x007a1200
 80010a0:	080013b0 	.word	0x080013b0
 80010a4:	080013c0 	.word	0x080013c0
 80010a8:	003d0900 	.word	0x003d0900

080010ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <RCC_Delay+0x34>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <RCC_Delay+0x38>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	0a5b      	lsrs	r3, r3, #9
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80010c8:	bf00      	nop
  }
  while (Delay --);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	60fa      	str	r2, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f9      	bne.n	80010c8 <RCC_Delay+0x1c>
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000000 	.word	0x20000000
 80010e4:	10624dd3 	.word	0x10624dd3

080010e8 <LL_GPIO_SetPinMode>:
{
 80010e8:	b490      	push	{r4, r7}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	0e1b      	lsrs	r3, r3, #24
 80010fc:	4413      	add	r3, r2
 80010fe:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001100:	6822      	ldr	r2, [r4, #0]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	210f      	movs	r1, #15
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	61bb      	str	r3, [r7, #24]
  return result;
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	fab3 f383 	clz	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	6023      	str	r3, [r4, #0]
}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bc90      	pop	{r4, r7}
 800114a:	4770      	bx	lr

0800114c <LL_GPIO_SetPinSpeed>:
{
 800114c:	b490      	push	{r4, r7}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	0e1b      	lsrs	r3, r3, #24
 8001160:	4413      	add	r3, r2
 8001162:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	613b      	str	r3, [r7, #16]
  return result;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	2103      	movs	r1, #3
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	401a      	ands	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa93 f3a3 	rbit	r3, r3
 8001190:	61bb      	str	r3, [r7, #24]
  return result;
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	6023      	str	r3, [r4, #0]
}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc90      	pop	{r4, r7}
 80011ae:	4770      	bx	lr

080011b0 <LL_GPIO_SetPinOutputType>:
{
 80011b0:	b490      	push	{r4, r7}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	461a      	mov	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	0e1b      	lsrs	r3, r3, #24
 80011c4:	4413      	add	r3, r2
 80011c6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80011c8:	6822      	ldr	r2, [r4, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	613b      	str	r3, [r7, #16]
  return result;
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	2104      	movs	r1, #4
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	401a      	ands	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	61bb      	str	r3, [r7, #24]
  return result;
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	6023      	str	r3, [r4, #0]
}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bc90      	pop	{r4, r7}
 8001212:	4770      	bx	lr

08001214 <LL_GPIO_SetPinPull>:
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	43db      	mvns	r3, r3
 800122a:	401a      	ands	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	613b      	str	r3, [r7, #16]
  return result;
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	408b      	lsls	r3, r1
 8001248:	431a      	orrs	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	60da      	str	r2, [r3, #12]
}
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	60fb      	str	r3, [r7, #12]
  return result;
 8001278:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001282:	e044      	b.n	800130e <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	409a      	lsls	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03a      	beq.n	8001308 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	2b07      	cmp	r3, #7
 8001296:	d806      	bhi.n	80012a6 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001298:	f240 1201 	movw	r2, #257	@ 0x101
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	e008      	b.n	80012b8 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b08      	subs	r3, #8
 80012aa:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012b6:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d106      	bne.n	80012ce <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	461a      	mov	r2, r3
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffa3 	bl	8001214 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	461a      	mov	r2, r3
 80012d4:	69b9      	ldr	r1, [r7, #24]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff06 	bl	80010e8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <LL_GPIO_Init+0x94>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d10d      	bne.n	8001308 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	461a      	mov	r2, r3
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	461a      	mov	r2, r3
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff54 	bl	80011b0 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3301      	adds	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1b4      	bne.n	8001284 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <memset>:
 8001324:	4603      	mov	r3, r0
 8001326:	4402      	add	r2, r0
 8001328:	4293      	cmp	r3, r2
 800132a:	d100      	bne.n	800132e <memset+0xa>
 800132c:	4770      	bx	lr
 800132e:	f803 1b01 	strb.w	r1, [r3], #1
 8001332:	e7f9      	b.n	8001328 <memset+0x4>

08001334 <__libc_init_array>:
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	2600      	movs	r6, #0
 8001338:	4d0c      	ldr	r5, [pc, #48]	@ (800136c <__libc_init_array+0x38>)
 800133a:	4c0d      	ldr	r4, [pc, #52]	@ (8001370 <__libc_init_array+0x3c>)
 800133c:	1b64      	subs	r4, r4, r5
 800133e:	10a4      	asrs	r4, r4, #2
 8001340:	42a6      	cmp	r6, r4
 8001342:	d109      	bne.n	8001358 <__libc_init_array+0x24>
 8001344:	f000 f81a 	bl	800137c <_init>
 8001348:	2600      	movs	r6, #0
 800134a:	4d0a      	ldr	r5, [pc, #40]	@ (8001374 <__libc_init_array+0x40>)
 800134c:	4c0a      	ldr	r4, [pc, #40]	@ (8001378 <__libc_init_array+0x44>)
 800134e:	1b64      	subs	r4, r4, r5
 8001350:	10a4      	asrs	r4, r4, #2
 8001352:	42a6      	cmp	r6, r4
 8001354:	d105      	bne.n	8001362 <__libc_init_array+0x2e>
 8001356:	bd70      	pop	{r4, r5, r6, pc}
 8001358:	f855 3b04 	ldr.w	r3, [r5], #4
 800135c:	4798      	blx	r3
 800135e:	3601      	adds	r6, #1
 8001360:	e7ee      	b.n	8001340 <__libc_init_array+0xc>
 8001362:	f855 3b04 	ldr.w	r3, [r5], #4
 8001366:	4798      	blx	r3
 8001368:	3601      	adds	r6, #1
 800136a:	e7f2      	b.n	8001352 <__libc_init_array+0x1e>
 800136c:	080013c4 	.word	0x080013c4
 8001370:	080013c4 	.word	0x080013c4
 8001374:	080013c4 	.word	0x080013c4
 8001378:	080013c8 	.word	0x080013c8

0800137c <_init>:
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137e:	bf00      	nop
 8001380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001382:	bc08      	pop	{r3}
 8001384:	469e      	mov	lr, r3
 8001386:	4770      	bx	lr

08001388 <_fini>:
 8001388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138a:	bf00      	nop
 800138c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138e:	bc08      	pop	{r3}
 8001390:	469e      	mov	lr, r3
 8001392:	4770      	bx	lr
