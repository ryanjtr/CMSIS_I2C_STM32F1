
testI2C_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08002728  08002728  00003728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002958  08002958  00004054  2**0
                  CONTENTS
  4 .ARM          00000008  08002958  08002958  00003958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002960  08002960  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002960  08002960  00003960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002964  08002964  00003964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002968  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000054  080029bc  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080029bc  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037ee  00000000  00000000  0000407d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d9  00000000  00000000  0000786b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  00008b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003de  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e5f  00000000  00000000  0000947e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000060a0  00000000  00000000  0001c2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fe2a  00000000  00000000  0002237d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000821a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001940  00000000  00000000  000821ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00083b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002710 	.word	0x08002710

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002710 	.word	0x08002710

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	f003 0307 	and.w	r3, r3, #7
 800016a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <__NVIC_SetPriorityGrouping+0x44>)
 800016e:	68db      	ldr	r3, [r3, #12]
 8000170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000172:	68ba      	ldr	r2, [r7, #8]
 8000174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000178:	4013      	ands	r3, r2
 800017a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800018c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800018e:	4a04      	ldr	r2, [pc, #16]	@ (80001a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	60d3      	str	r3, [r2, #12]
}
 8000194:	bf00      	nop
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	e000ed00 	.word	0xe000ed00

080001a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__NVIC_GetPriorityGrouping+0x18>)
 80001aa:	68db      	ldr	r3, [r3, #12]
 80001ac:	0a1b      	lsrs	r3, r3, #8
 80001ae:	f003 0307 	and.w	r3, r3, #7
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000ed00 	.word	0xe000ed00

080001c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	6039      	str	r1, [r7, #0]
 80001ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	db0a      	blt.n	80001ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	490c      	ldr	r1, [pc, #48]	@ (800020c <__NVIC_SetPriority+0x4c>)
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	0112      	lsls	r2, r2, #4
 80001e0:	b2d2      	uxtb	r2, r2
 80001e2:	440b      	add	r3, r1
 80001e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e8:	e00a      	b.n	8000200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	b2da      	uxtb	r2, r3
 80001ee:	4908      	ldr	r1, [pc, #32]	@ (8000210 <__NVIC_SetPriority+0x50>)
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	f003 030f 	and.w	r3, r3, #15
 80001f6:	3b04      	subs	r3, #4
 80001f8:	0112      	lsls	r2, r2, #4
 80001fa:	b2d2      	uxtb	r2, r2
 80001fc:	440b      	add	r3, r1
 80001fe:	761a      	strb	r2, [r3, #24]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000214:	b480      	push	{r7}
 8000216:	b089      	sub	sp, #36	@ 0x24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	f003 0307 	and.w	r3, r3, #7
 8000226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000228:	69fb      	ldr	r3, [r7, #28]
 800022a:	f1c3 0307 	rsb	r3, r3, #7
 800022e:	2b04      	cmp	r3, #4
 8000230:	bf28      	it	cs
 8000232:	2304      	movcs	r3, #4
 8000234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000236:	69fb      	ldr	r3, [r7, #28]
 8000238:	3304      	adds	r3, #4
 800023a:	2b06      	cmp	r3, #6
 800023c:	d902      	bls.n	8000244 <NVIC_EncodePriority+0x30>
 800023e:	69fb      	ldr	r3, [r7, #28]
 8000240:	3b03      	subs	r3, #3
 8000242:	e000      	b.n	8000246 <NVIC_EncodePriority+0x32>
 8000244:	2300      	movs	r3, #0
 8000246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000248:	f04f 32ff 	mov.w	r2, #4294967295
 800024c:	69bb      	ldr	r3, [r7, #24]
 800024e:	fa02 f303 	lsl.w	r3, r2, r3
 8000252:	43da      	mvns	r2, r3
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	401a      	ands	r2, r3
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800025c:	f04f 31ff 	mov.w	r1, #4294967295
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43d9      	mvns	r1, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	4313      	orrs	r3, r2
         );
}
 800026e:	4618      	mov	r0, r3
 8000270:	3724      	adds	r7, #36	@ 0x24
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <LL_RCC_HSE_Enable+0x18>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a03      	ldr	r2, [pc, #12]	@ (8000290 <LL_RCC_HSE_Enable+0x18>)
 8000282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000286:	6013      	str	r3, [r2, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40021000 	.word	0x40021000

08000294 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <LL_RCC_HSE_IsReady+0x20>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80002a4:	bf0c      	ite	eq
 80002a6:	2301      	moveq	r3, #1
 80002a8:	2300      	movne	r3, #0
 80002aa:	b2db      	uxtb	r3, r3
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	40021000 	.word	0x40021000

080002b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <LL_RCC_SetSysClkSource+0x24>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	f023 0203 	bic.w	r2, r3, #3
 80002c8:	4904      	ldr	r1, [pc, #16]	@ (80002dc <LL_RCC_SetSysClkSource+0x24>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	604b      	str	r3, [r1, #4]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <LL_RCC_GetSysClkSource+0x14>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	f003 030c 	and.w	r3, r3, #12
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <LL_RCC_SetAHBPrescaler+0x24>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000308:	4904      	ldr	r1, [pc, #16]	@ (800031c <LL_RCC_SetAHBPrescaler+0x24>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4313      	orrs	r3, r2
 800030e:	604b      	str	r3, [r1, #4]
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <LL_RCC_SetAPB1Prescaler+0x24>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000330:	4904      	ldr	r1, [pc, #16]	@ (8000344 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4313      	orrs	r3, r2
 8000336:	604b      	str	r3, [r1, #4]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000358:	4904      	ldr	r1, [pc, #16]	@ (800036c <LL_RCC_SetAPB2Prescaler+0x24>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	604b      	str	r3, [r1, #4]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000374:	4b04      	ldr	r3, [pc, #16]	@ (8000388 <LL_RCC_PLL_Enable+0x18>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a03      	ldr	r2, [pc, #12]	@ (8000388 <LL_RCC_PLL_Enable+0x18>)
 800037a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800037e:	6013      	str	r3, [r2, #0]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <LL_RCC_PLL_IsReady+0x20>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800039c:	bf0c      	ite	eq
 800039e:	2301      	moveq	r3, #1
 80003a0:	2300      	movne	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	430b      	orrs	r3, r1
 80003cc:	4903      	ldr	r1, [pc, #12]	@ (80003dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003ce:	4313      	orrs	r3, r2
 80003d0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ea:	69da      	ldr	r2, [r3, #28]
 80003ec:	4907      	ldr	r1, [pc, #28]	@ (800040c <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <LL_APB1_GRP1_EnableClock+0x2c>)
 80003f6:	69da      	ldr	r2, [r3, #28]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000

08000410 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <LL_APB2_GRP1_EnableClock+0x2c>)
 800041a:	699a      	ldr	r2, [r3, #24]
 800041c:	4907      	ldr	r1, [pc, #28]	@ (800043c <LL_APB2_GRP1_EnableClock+0x2c>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000426:	699a      	ldr	r2, [r3, #24]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4013      	ands	r3, r2
 800042c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800042e:	68fb      	ldr	r3, [r7, #12]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <LL_FLASH_SetLatency+0x24>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f023 0207 	bic.w	r2, r3, #7
 8000450:	4904      	ldr	r1, [pc, #16]	@ (8000464 <LL_FLASH_SetLatency+0x24>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4313      	orrs	r3, r2
 8000456:	600b      	str	r3, [r1, #0]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40022000 	.word	0x40022000

08000468 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800046c:	4b03      	ldr	r3, [pc, #12]	@ (800047c <LL_FLASH_GetLatency+0x14>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f003 0307 	and.w	r3, r3, #7
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40022000 	.word	0x40022000

08000480 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60da      	str	r2, [r3, #12]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	615a      	str	r2, [r3, #20]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	43da      	mvns	r2, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	4013      	ands	r3, r2
 80004de:	b29b      	uxth	r3, r3
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf0c      	ite	eq
 80004e4:	2301      	moveq	r3, #1
 80004e6:	2300      	movne	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	b29a      	uxth	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	611a      	str	r2, [r3, #16]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	b29a      	uxth	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	615a      	str	r2, [r3, #20]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	0a1b      	lsrs	r3, r3, #8
 8000544:	b29b      	uxth	r3, r3
 8000546:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4013      	ands	r3, r2
 800054e:	041a      	lsls	r2, r3, #16
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	43d9      	mvns	r1, r3
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	400b      	ands	r3, r1
 8000558:	431a      	orrs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	611a      	str	r2, [r3, #16]
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000574:	4a03      	ldr	r2, [pc, #12]	@ (8000584 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800057a:	6053      	str	r3, [r2, #4]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40010000 	.word	0x40010000

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff ff3d 	bl	8000410 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000596:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800059a:	f7ff ff21 	bl	80003e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059e:	2003      	movs	r0, #3
 80005a0:	f7ff fddc 	bl	800015c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80005a4:	f7ff fdfe 	bl	80001a4 <__NVIC_GetPriorityGrouping>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2200      	movs	r2, #0
 80005ac:	210f      	movs	r1, #15
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe30 	bl	8000214 <NVIC_EncodePriority>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4619      	mov	r1, r3
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f7ff fe00 	bl	80001c0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80005c0:	f7ff ffd2 	bl	8000568 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f8d6 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9c0 	bl	800094c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f910 	bl	80007f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f966 	bl	80008a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_I2C1_GPIO_config();
 80005d4:	f000 fe84 	bl	80012e0 <i2c_I2C1_GPIO_config>
  i2c_I2C1_config();
 80005d8:	f000 fea4 	bl	8001324 <i2c_I2C1_config>

  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80005dc:	495c      	ldr	r1, [pc, #368]	@ (8000750 <main+0x1c8>)
 80005de:	485d      	ldr	r0, [pc, #372]	@ (8000754 <main+0x1cc>)
 80005e0:	f7ff ff97 	bl	8000512 <LL_GPIO_ResetOutputPin>

  //  NVIC_EnableIRQ(I2C1_EV_IRQn); // Kích hoạt ngắt sự kiện I2C1
  //  NVIC_EnableIRQ(I2C1_ER_IRQn); // Kích hoạt ngắt lỗi I2C1

  int count = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  uint8_t data1[255] = {0}; //{0x70, 0x80, 0x81, 0x82, 0x94, 0x95, 0x96, 0x97};
 80005ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80005ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	3304      	adds	r3, #4
 80005f8:	22fb      	movs	r2, #251	@ 0xfb
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fbf7 	bl	8001df0 <memset>
  uint8_t rx_data[256] = {0};
 8000602:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000606:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	3304      	adds	r3, #4
 8000610:	22fc      	movs	r2, #252	@ 0xfc
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fbeb 	bl	8001df0 <memset>
  data1[0] = 0x40;
 800061a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800061e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000622:	2240      	movs	r2, #64	@ 0x40
 8000624:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < 256; i++)
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800062c:	e017      	b.n	800065e <main+0xd6>
    data1[i] = data1[i - 1] + 1;
 800062e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000632:	3b01      	subs	r3, #1
 8000634:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000638:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	3301      	adds	r3, #1
 8000640:	b2d9      	uxtb	r1, r3
 8000642:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000646:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 800064a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800064e:	4413      	add	r3, r2
 8000650:	460a      	mov	r2, r1
 8000652:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < 256; i++)
 8000654:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000658:	3301      	adds	r3, #1
 800065a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800065e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000662:	2bff      	cmp	r3, #255	@ 0xff
 8000664:	dde3      	ble.n	800062e <main+0xa6>

  uart_printf("master-f103c8t6\r\n");
 8000666:	483c      	ldr	r0, [pc, #240]	@ (8000758 <main+0x1d0>)
 8000668:	f001 fb6e 	bl	8001d48 <uart_printf>

  LL_mDelay(3000);
 800066c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000670:	f000 fe04 	bl	800127c <LL_mDelay>

    //    if (i2c_I2C1_masterTransmit(0x54, data1, count, 1000)) //Check i2c_slave receive wrong address
    //    {
    //    }
//	DS3231_Read(0x06);
    if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_6))
 8000674:	f244 0140 	movw	r1, #16448	@ 0x4040
 8000678:	4838      	ldr	r0, [pc, #224]	@ (800075c <main+0x1d4>)
 800067a:	f7ff ff25 	bl	80004c8 <LL_GPIO_IsInputPinSet>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d026      	beq.n	80006d2 <main+0x14a>
    {
    	DS3231_Read(0x68, rx_data, 1, 10000);
 8000684:	1d39      	adds	r1, r7, #4
 8000686:	f242 7310 	movw	r3, #10000	@ 0x2710
 800068a:	2201      	movs	r2, #1
 800068c:	2068      	movs	r0, #104	@ 0x68
 800068e:	f000 ff29 	bl	80014e4 <DS3231_Read>
    	uart_printf("data=0x%02X\r\n",rx_data[0]);
 8000692:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000696:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	4830      	ldr	r0, [pc, #192]	@ (8000760 <main+0x1d8>)
 80006a0:	f001 fb52 	bl	8001d48 <uart_printf>
      if (i2c_I2C1_masterTransmit(0x68, data1, 20, 1000)) // Check i2c_slave receive data without error
 80006a4:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 80006a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ac:	2214      	movs	r2, #20
 80006ae:	2068      	movs	r0, #104	@ 0x68
 80006b0:	f000 fe6a 	bl	8001388 <i2c_I2C1_masterTransmit>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d007      	beq.n	80006ca <main+0x142>
      {
        LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 80006ba:	4925      	ldr	r1, [pc, #148]	@ (8000750 <main+0x1c8>)
 80006bc:	4825      	ldr	r0, [pc, #148]	@ (8000754 <main+0x1cc>)
 80006be:	f7ff ff37 	bl	8000530 <LL_GPIO_TogglePin>
        uart_printf("trans ok\r\n");
 80006c2:	4828      	ldr	r0, [pc, #160]	@ (8000764 <main+0x1dc>)
 80006c4:	f001 fb40 	bl	8001d48 <uart_printf>
 80006c8:	e03a      	b.n	8000740 <main+0x1b8>
      }
      else
      {
        uart_printf("trans fail !!!\r\n");
 80006ca:	4827      	ldr	r0, [pc, #156]	@ (8000768 <main+0x1e0>)
 80006cc:	f001 fb3c 	bl	8001d48 <uart_printf>
 80006d0:	e036      	b.n	8000740 <main+0x1b8>
      }
    }
    else
    {
      uart_printf("count=%d\r\n", count);
 80006d2:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 80006d6:	4825      	ldr	r0, [pc, #148]	@ (800076c <main+0x1e4>)
 80006d8:	f001 fb36 	bl	8001d48 <uart_printf>
      if (i2c_I2C1_masterReceive(0x55, rx_data, count, 10000)) // Check i2c_slave send data
 80006dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	1d39      	adds	r1, r7, #4
 80006e4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006e8:	2055      	movs	r0, #85	@ 0x55
 80006ea:	f001 f831 	bl	8001750 <i2c_I2C1_masterReceive>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d020      	beq.n	8000736 <main+0x1ae>
      {
        for (int j = 0; j < count; j++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80006fa:	e012      	b.n	8000722 <main+0x19a>
        {
          uart_printf("rx_data%d=0x%02X\r\n", j, rx_data[j]);
 80006fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000700:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8000704:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
 8000712:	4817      	ldr	r0, [pc, #92]	@ (8000770 <main+0x1e8>)
 8000714:	f001 fb18 	bl	8001d48 <uart_printf>
        for (int j = 0; j < count; j++)
 8000718:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800071c:	3301      	adds	r3, #1
 800071e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000722:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8000726:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800072a:	429a      	cmp	r2, r3
 800072c:	dbe6      	blt.n	80006fc <main+0x174>
        }
        LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 800072e:	4908      	ldr	r1, [pc, #32]	@ (8000750 <main+0x1c8>)
 8000730:	4808      	ldr	r0, [pc, #32]	@ (8000754 <main+0x1cc>)
 8000732:	f7ff fefd 	bl	8000530 <LL_GPIO_TogglePin>
      }
      ++count;
 8000736:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800073a:	3301      	adds	r3, #1
 800073c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    }

    i2c_flag();
 8000740:	f000 f96c 	bl	8000a1c <i2c_flag>

    LL_mDelay(3000);
 8000744:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000748:	f000 fd98 	bl	800127c <LL_mDelay>
    if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_6))
 800074c:	e792      	b.n	8000674 <main+0xec>
 800074e:	bf00      	nop
 8000750:	04200020 	.word	0x04200020
 8000754:	40011000 	.word	0x40011000
 8000758:	08002728 	.word	0x08002728
 800075c:	40010800 	.word	0x40010800
 8000760:	0800273c 	.word	0x0800273c
 8000764:	0800274c 	.word	0x0800274c
 8000768:	08002758 	.word	0x08002758
 800076c:	0800276c 	.word	0x0800276c
 8000770:	08002778 	.word	0x08002778

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff fe61 	bl	8000440 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800077e:	bf00      	nop
 8000780:	f7ff fe72 	bl	8000468 <LL_FLASH_GetLatency>
 8000784:	4603      	mov	r3, r0
 8000786:	2b02      	cmp	r3, #2
 8000788:	d1fa      	bne.n	8000780 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800078a:	f7ff fd75 	bl	8000278 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800078e:	bf00      	nop
 8000790:	f7ff fd80 	bl	8000294 <LL_RCC_HSE_IsReady>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d1fa      	bne.n	8000790 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800079a:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 800079e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80007a2:	f7ff fe05 	bl	80003b0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80007a6:	f7ff fde3 	bl	8000370 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80007aa:	bf00      	nop
 80007ac:	f7ff fdee 	bl	800038c <LL_RCC_PLL_IsReady>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d1fa      	bne.n	80007ac <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fd9e 	bl	80002f8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80007bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80007c0:	f7ff fdae 	bl	8000320 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fdbf 	bl	8000348 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007ca:	2002      	movs	r0, #2
 80007cc:	f7ff fd74 	bl	80002b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007d0:	bf00      	nop
 80007d2:	f7ff fd85 	bl	80002e0 <LL_RCC_GetSysClkSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b08      	cmp	r3, #8
 80007da:	d1fa      	bne.n	80007d2 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80007dc:	4803      	ldr	r0, [pc, #12]	@ (80007ec <SystemClock_Config+0x78>)
 80007de:	f000 fd3f 	bl	8001260 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80007e2:	4802      	ldr	r0, [pc, #8]	@ (80007ec <SystemClock_Config+0x78>)
 80007e4:	f000 fd6e 	bl	80012c4 <LL_SetSystemCoreClock>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	044aa200 	.word	0x044aa200

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000818:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800081c:	f7ff fdf8 	bl	8000410 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000820:	2004      	movs	r0, #4
 8000822:	f7ff fdf5 	bl	8000410 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_USART1_UART_Init+0xa0>)
 8000828:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800082a:	2309      	movs	r3, #9
 800082c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4816      	ldr	r0, [pc, #88]	@ (8000894 <MX_USART1_UART_Init+0xa4>)
 800083c:	f000 fa87 	bl	8000d4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_USART1_UART_Init+0xa8>)
 8000842:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000844:	2304      	movs	r3, #4
 8000846:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4811      	ldr	r0, [pc, #68]	@ (8000894 <MX_USART1_UART_Init+0xa4>)
 800084e:	f000 fa7e 	bl	8000d4e <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000852:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000856:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000864:	230c      	movs	r3, #12
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4809      	ldr	r0, [pc, #36]	@ (800089c <MX_USART1_UART_Init+0xac>)
 8000878:	f000 fc78 	bl	800116c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800087c:	4807      	ldr	r0, [pc, #28]	@ (800089c <MX_USART1_UART_Init+0xac>)
 800087e:	f7ff fe0e 	bl	800049e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_USART1_UART_Init+0xac>)
 8000884:	f7ff fdfc 	bl	8000480 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3730      	adds	r7, #48	@ 0x30
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	04020002 	.word	0x04020002
 8000894:	40010800 	.word	0x40010800
 8000898:	04040004 	.word	0x04040004
 800089c:	40013800 	.word	0x40013800

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80008c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80008cc:	f7ff fd88 	bl	80003e0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80008d0:	2004      	movs	r0, #4
 80008d2:	f7ff fd9d 	bl	8000410 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80008d6:	f240 4304 	movw	r3, #1028	@ 0x404
 80008da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008dc:	2309      	movs	r3, #9
 80008de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4815      	ldr	r0, [pc, #84]	@ (8000944 <MX_USART2_UART_Init+0xa4>)
 80008ee:	f000 fa2e 	bl	8000d4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80008f2:	f640 0308 	movw	r3, #2056	@ 0x808
 80008f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80008f8:	2304      	movs	r3, #4
 80008fa:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_USART2_UART_Init+0xa4>)
 8000902:	f000 fa24 	bl	8000d4e <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000906:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800090a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000918:	230c      	movs	r3, #12
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	@ (8000948 <MX_USART2_UART_Init+0xa8>)
 800092c:	f000 fc1e 	bl	800116c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART2_UART_Init+0xa8>)
 8000932:	f7ff fdb4 	bl	800049e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_USART2_UART_Init+0xa8>)
 8000938:	f7ff fda2 	bl	8000480 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	@ 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40010800 	.word	0x40010800
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000960:	2010      	movs	r0, #16
 8000962:	f7ff fd55 	bl	8000410 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000966:	2020      	movs	r0, #32
 8000968:	f7ff fd52 	bl	8000410 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800096c:	2004      	movs	r0, #4
 800096e:	f7ff fd4f 	bl	8000410 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000972:	2008      	movs	r0, #8
 8000974:	f7ff fd4c 	bl	8000410 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000978:	4924      	ldr	r1, [pc, #144]	@ (8000a0c <MX_GPIO_Init+0xc0>)
 800097a:	4825      	ldr	r0, [pc, #148]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 800097c:	f7ff fdc9 	bl	8000512 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000980:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000984:	4823      	ldr	r0, [pc, #140]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 8000986:	f7ff fdc4 	bl	8000512 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800098a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800098e:	4822      	ldr	r0, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0xcc>)
 8000990:	f7ff fdbf 	bl	8000512 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000994:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000998:	481e      	ldr	r0, [pc, #120]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 800099a:	f7ff fdab 	bl	80004f4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_GPIO_Init+0xc0>)
 80009a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4817      	ldr	r0, [pc, #92]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009b4:	f000 f9cb 	bl	8000d4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 80009b8:	f24a 03a0 	movw	r3, #41120	@ 0xa0a0
 80009bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009be:	2301      	movs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 80009d0:	f000 f9bd 	bl	8000d4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80009d4:	f244 0340 	movw	r3, #16448	@ 0x4040
 80009d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80009da:	2304      	movs	r3, #4
 80009dc:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 80009e4:	f000 f9b3 	bl	8000d4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009e8:	f242 0320 	movw	r3, #8224	@ 0x2020
 80009ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MX_GPIO_Init+0xcc>)
 8000a00:	f000 f9a5 	bl	8000d4e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	04200020 	.word	0x04200020
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <i2c_flag>:
//     }
//   }
// }

void i2c_flag(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  uart_printf("berr=%d\r\n", I2C1->SR1 >> 8 & 1);
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <i2c_flag+0x70>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4818      	ldr	r0, [pc, #96]	@ (8000a90 <i2c_flag+0x74>)
 8000a2e:	f001 f98b 	bl	8001d48 <uart_printf>
  uart_printf("arlo=%d\r\n", I2C1->SR1 >> 9 & 1);
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <i2c_flag+0x70>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	0a5b      	lsrs	r3, r3, #9
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4815      	ldr	r0, [pc, #84]	@ (8000a94 <i2c_flag+0x78>)
 8000a40:	f001 f982 	bl	8001d48 <uart_printf>
  uart_printf("af=%d\r\n", I2C1->SR1 >> 10 & 1);
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <i2c_flag+0x70>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	0a9b      	lsrs	r3, r3, #10
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4811      	ldr	r0, [pc, #68]	@ (8000a98 <i2c_flag+0x7c>)
 8000a52:	f001 f979 	bl	8001d48 <uart_printf>
  uart_printf("sr1=0x%04X\r\n", I2C1->SR1);
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <i2c_flag+0x70>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480f      	ldr	r0, [pc, #60]	@ (8000a9c <i2c_flag+0x80>)
 8000a5e:	f001 f973 	bl	8001d48 <uart_printf>
  uart_printf("sr2=0x%04X\r\n", I2C1->SR2);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <i2c_flag+0x70>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <i2c_flag+0x84>)
 8000a6a:	f001 f96d 	bl	8001d48 <uart_printf>
  uart_printf("cr1=0x%004X\r\n", I2C1->CR1);
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <i2c_flag+0x70>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <i2c_flag+0x88>)
 8000a76:	f001 f967 	bl	8001d48 <uart_printf>
  uart_printf("cr2=0x%04X\r\n\r\n", I2C1->CR2);
 8000a7a:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <i2c_flag+0x70>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <i2c_flag+0x8c>)
 8000a82:	f001 f961 	bl	8001d48 <uart_printf>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	0800278c 	.word	0x0800278c
 8000a94:	08002798 	.word	0x08002798
 8000a98:	080027a4 	.word	0x080027a4
 8000a9c:	080027ac 	.word	0x080027ac
 8000aa0:	080027bc 	.word	0x080027bc
 8000aa4:	080027cc 	.word	0x080027cc
 8000aa8:	080027dc 	.word	0x080027dc

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <I2C1_EV_IRQHandler>:


/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_EV_IRQHandler(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	receive_handler();
 8000b08:	f001 f80a 	bl	8001b20 <receive_handler>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	error_i2c_handler();
 8000b14:	f001 f89a 	bl	8001c4c <error_i2c_handler>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f001 f958 	bl	8001e00 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20005000 	.word	0x20005000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	20000070 	.word	0x20000070
 8000b84:	200001c8 	.word	0x200001c8

08000b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff fff8 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	@ (8000bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b9a:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:

  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a09      	ldr	r2, [pc, #36]	@ (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb0:	4c09      	ldr	r4, [pc, #36]	@ (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f001 f925 	bl	8001e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fce1 	bl	8000588 <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000bd0:	08002968 	.word	0x08002968
  ldr r2, =_sbss
 8000bd4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000bd8:	200001c8 	.word	0x200001c8

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>

08000bde <LL_GPIO_SetPinMode>:
{
 8000bde:	b490      	push	{r4, r7}
 8000be0:	b088      	sub	sp, #32
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	461a      	mov	r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	0e1b      	lsrs	r3, r3, #24
 8000bf2:	4413      	add	r3, r2
 8000bf4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000bf6:	6822      	ldr	r2, [r4, #0]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	210f      	movs	r1, #15
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	fa93 f3a3 	rbit	r3, r3
 8000c22:	61bb      	str	r3, [r7, #24]
  return result;
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fab3 f383 	clz	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	6023      	str	r3, [r4, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc90      	pop	{r4, r7}
 8000c40:	4770      	bx	lr

08000c42 <LL_GPIO_SetPinSpeed>:
{
 8000c42:	b490      	push	{r4, r7}
 8000c44:	b088      	sub	sp, #32
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	0e1b      	lsrs	r3, r3, #24
 8000c56:	4413      	add	r3, r2
 8000c58:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000c5a:	6822      	ldr	r2, [r4, #0]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	613b      	str	r3, [r7, #16]
  return result;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	fab3 f383 	clz	r3, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	2103      	movs	r1, #3
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	fa93 f3a3 	rbit	r3, r3
 8000c86:	61bb      	str	r3, [r7, #24]
  return result;
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	6023      	str	r3, [r4, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc90      	pop	{r4, r7}
 8000ca4:	4770      	bx	lr

08000ca6 <LL_GPIO_SetPinOutputType>:
{
 8000ca6:	b490      	push	{r4, r7}
 8000ca8:	b088      	sub	sp, #32
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	0e1b      	lsrs	r3, r3, #24
 8000cba:	4413      	add	r3, r2
 8000cbc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa93 f3a3 	rbit	r3, r3
 8000cca:	613b      	str	r3, [r7, #16]
  return result;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	fab3 f383 	clz	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	fa93 f3a3 	rbit	r3, r3
 8000cea:	61bb      	str	r3, [r7, #24]
  return result;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fab3 f383 	clz	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	6023      	str	r3, [r4, #0]
}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc90      	pop	{r4, r7}
 8000d08:	4770      	bx	lr

08000d0a <LL_GPIO_SetPinPull>:
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b087      	sub	sp, #28
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	401a      	ands	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	613b      	str	r3, [r7, #16]
  return result;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	fab3 f383 	clz	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4619      	mov	r1, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	60da      	str	r2, [r3, #12]
}
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	0c1b      	lsrs	r3, r3, #16
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	60fb      	str	r3, [r7, #12]
  return result;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000d70:	fab3 f383 	clz	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000d78:	e044      	b.n	8000e04 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d03a      	beq.n	8000dfe <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	2b07      	cmp	r3, #7
 8000d8c:	d806      	bhi.n	8000d9c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000d8e:	f240 1201 	movw	r2, #257	@ 0x101
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	e008      	b.n	8000dae <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3b08      	subs	r3, #8
 8000da0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dac:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d106      	bne.n	8000dc4 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	69b9      	ldr	r1, [r7, #24]
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa3 	bl	8000d0a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	69b9      	ldr	r1, [r7, #24]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff06 	bl	8000bde <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d003      	beq.n	8000de2 <LL_GPIO_Init+0x94>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b09      	cmp	r3, #9
 8000de0:	d10d      	bne.n	8000dfe <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	461a      	mov	r2, r3
 8000de8:	69b9      	ldr	r1, [r7, #24]
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff29 	bl	8000c42 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	461a      	mov	r2, r3
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff54 	bl	8000ca6 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1b4      	bne.n	8000d7a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <LL_RCC_GetSysClkSource>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <LL_RCC_GetSysClkSource+0x14>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <LL_RCC_GetAHBPrescaler>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <LL_RCC_GetAHBPrescaler+0x14>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_RCC_GetAPB1Prescaler>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000

08000e64 <LL_RCC_GetAPB2Prescaler>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <LL_RCC_PLL_GetMainSource+0x14>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000

08000eac <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <LL_RCC_PLL_GetPrediv+0x18>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	0c5b      	lsrs	r3, r3, #17
 8000eb6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000ed0:	f000 f820 	bl	8000f14 <RCC_GetSystemClockFreq>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f83e 	bl	8000f60 <RCC_GetHCLKClockFreq>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f84c 	bl	8000f8c <RCC_GetPCLK1ClockFreq>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f858 	bl	8000fb4 <RCC_GetPCLK2ClockFreq>
 8000f04:	4602      	mov	r2, r0
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60da      	str	r2, [r3, #12]
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000f1e:	f7ff ff7d 	bl	8000e1c <LL_RCC_GetSysClkSource>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d00c      	beq.n	8000f42 <RCC_GetSystemClockFreq+0x2e>
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d80e      	bhi.n	8000f4a <RCC_GetSystemClockFreq+0x36>
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <RCC_GetSystemClockFreq+0x22>
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d003      	beq.n	8000f3c <RCC_GetSystemClockFreq+0x28>
 8000f34:	e009      	b.n	8000f4a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <RCC_GetSystemClockFreq+0x48>)
 8000f38:	607b      	str	r3, [r7, #4]
      break;
 8000f3a:	e009      	b.n	8000f50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <RCC_GetSystemClockFreq+0x48>)
 8000f3e:	607b      	str	r3, [r7, #4]
      break;
 8000f40:	e006      	b.n	8000f50 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000f42:	f000 f84b 	bl	8000fdc <RCC_PLL_GetFreqDomain_SYS>
 8000f46:	6078      	str	r0, [r7, #4]
      break;
 8000f48:	e002      	b.n	8000f50 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8000f4a:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <RCC_GetSystemClockFreq+0x48>)
 8000f4c:	607b      	str	r3, [r7, #4]
      break;
 8000f4e:	bf00      	nop
  }

  return frequency;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	007a1200 	.word	0x007a1200

08000f60 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000f68:	f7ff ff64 	bl	8000e34 <LL_RCC_GetAHBPrescaler>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <RCC_GetHCLKClockFreq+0x28>)
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	40d3      	lsrs	r3, r2
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	0800290c 	.word	0x0800290c

08000f8c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000f94:	f7ff ff5a 	bl	8000e4c <LL_RCC_GetAPB1Prescaler>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <RCC_GetPCLK1ClockFreq+0x24>)
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	40d3      	lsrs	r3, r2
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800291c 	.word	0x0800291c

08000fb4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000fbc:	f7ff ff52 	bl	8000e64 <LL_RCC_GetAPB2Prescaler>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	0adb      	lsrs	r3, r3, #11
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <RCC_GetPCLK2ClockFreq+0x24>)
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	40d3      	lsrs	r3, r2
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0800291c 	.word	0x0800291c

08000fdc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000fea:	f7ff ff47 	bl	8000e7c <LL_RCC_PLL_GetMainSource>
 8000fee:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffc:	d003      	beq.n	8001006 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000ffe:	e00b      	b.n	8001018 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001002:	607b      	str	r3, [r7, #4]
      break;
 8001004:	e00b      	b.n	800101e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001006:	f7ff ff51 	bl	8000eac <LL_RCC_PLL_GetPrediv>
 800100a:	4603      	mov	r3, r0
 800100c:	3301      	adds	r3, #1
 800100e:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001010:	fbb2 f3f3 	udiv	r3, r2, r3
 8001014:	607b      	str	r3, [r7, #4]
      break;
 8001016:	e002      	b.n	800101e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800101a:	607b      	str	r3, [r7, #4]
      break;
 800101c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800101e:	f7ff ff39 	bl	8000e94 <LL_RCC_PLL_GetMultiplicator>
 8001022:	4603      	mov	r3, r0
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3302      	adds	r3, #2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	fb02 f303 	mul.w	r3, r2, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	003d0900 	.word	0x003d0900
 800103c:	007a1200 	.word	0x007a1200

08001040 <LL_USART_IsEnabled>:
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001054:	bf0c      	ite	eq
 8001056:	2301      	moveq	r3, #1
 8001058:	2300      	movne	r3, #0
 800105a:	b2db      	uxtb	r3, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <LL_USART_SetStopBitsLength>:
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <LL_USART_SetHWFlowCtrl>:
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	615a      	str	r2, [r3, #20]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <LL_USART_SetBaudRate>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	009a      	lsls	r2, r3, #2
 80010c6:	441a      	add	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	4a25      	ldr	r2, [pc, #148]	@ (8001168 <LL_USART_SetBaudRate+0xb8>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	b29b      	uxth	r3, r3
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	b299      	uxth	r1, r3
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	009a      	lsls	r2, r3, #2
 80010e8:	441a      	add	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <LL_USART_SetBaudRate+0xb8>)
 80010f4:	fba3 0302 	umull	r0, r3, r3, r2
 80010f8:	095b      	lsrs	r3, r3, #5
 80010fa:	2064      	movs	r0, #100	@ 0x64
 80010fc:	fb00 f303 	mul.w	r3, r0, r3
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	3332      	adds	r3, #50	@ 0x32
 8001106:	4a18      	ldr	r2, [pc, #96]	@ (8001168 <LL_USART_SetBaudRate+0xb8>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	b29b      	uxth	r3, r3
 8001110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001114:	b29b      	uxth	r3, r3
 8001116:	440b      	add	r3, r1
 8001118:	b299      	uxth	r1, r3
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009a      	lsls	r2, r3, #2
 8001124:	441a      	add	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	fbb2 f2f3 	udiv	r2, r2, r3
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <LL_USART_SetBaudRate+0xb8>)
 8001130:	fba3 0302 	umull	r0, r3, r3, r2
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	fb00 f303 	mul.w	r3, r0, r3
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	3332      	adds	r3, #50	@ 0x32
 8001142:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <LL_USART_SetBaudRate+0xb8>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b29b      	uxth	r3, r3
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	b29b      	uxth	r3, r3
 8001152:	440b      	add	r3, r1
 8001154:	b29b      	uxth	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	609a      	str	r2, [r3, #8]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	51eb851f 	.word	0x51eb851f

0800116c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff5e 	bl	8001040 <LL_USART_IsEnabled>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d145      	bne.n	8001216 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001192:	f023 030c 	bic.w	r3, r3, #12
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	6851      	ldr	r1, [r2, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	68d2      	ldr	r2, [r2, #12]
 800119e:	4311      	orrs	r1, r2
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	6912      	ldr	r2, [r2, #16]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff57 	bl	8001066 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff63 	bl	800108a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe7d 	bl	8000ec8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <LL_USART_Init+0xb4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d102      	bne.n	80011dc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	e00c      	b.n	80011f6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <LL_USART_Init+0xb8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d102      	bne.n	80011ea <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	e005      	b.n	80011f6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <LL_USART_Init+0xbc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001204:	2300      	movs	r3, #0
 8001206:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800120c:	461a      	mov	r2, r3
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff4d 	bl	80010b0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001216:	7ffb      	ldrb	r3, [r7, #31]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40013800 	.word	0x40013800
 8001224:	40004400 	.word	0x40004400
 8001228:	40004800 	.word	0x40004800

0800122c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4a07      	ldr	r2, [pc, #28]	@ (800125c <LL_InitTick+0x30>)
 8001240:	3b01      	subs	r3, #1
 8001242:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <LL_InitTick+0x30>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <LL_InitTick+0x30>)
 800124c:	2205      	movs	r2, #5
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001268:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffdd 	bl	800122c <LL_InitTick>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <LL_mDelay+0x44>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800128a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	d00c      	beq.n	80012ae <LL_mDelay+0x32>
  {
    Delay++;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800129a:	e008      	b.n	80012ae <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <LL_mDelay+0x44>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <LL_mDelay+0x32>
    {
      Delay--;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
  while (Delay)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f3      	bne.n	800129c <LL_mDelay+0x20>
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80012cc:	4a03      	ldr	r2, [pc, #12]	@ (80012dc <LL_SetSystemCoreClock+0x18>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000000 	.word	0x20000000

080012e0 <i2c_I2C1_GPIO_config>:

/**
 * The function configures GPIO pins PB6 (SCL) and PB7 (SDA) for I2C communication on I2C1 interface.
 */
void i2c_I2C1_GPIO_config(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  // PB6 (SCL), PB7(SDA)
  // Bật xung clock PORTB
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <i2c_I2C1_GPIO_config+0x3c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <i2c_I2C1_GPIO_config+0x3c>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6193      	str	r3, [r2, #24]
  // Chế độ: xuất 10Mhz
  GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_MODE7); // Xóa MODE6 và MODE7
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <i2c_I2C1_GPIO_config+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <i2c_I2C1_GPIO_config+0x40>)
 80012f6:	f023 534c 	bic.w	r3, r3, #855638016	@ 0x33000000
 80012fa:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (GPIO_CRL_MODE6_0 | GPIO_CRL_MODE7_0);
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <i2c_I2C1_GPIO_config+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <i2c_I2C1_GPIO_config+0x40>)
 8001302:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 8001306:	6013      	str	r3, [r2, #0]
  // CNF: Alternate function Open-Drain
  GPIOB->CRL |= (GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <i2c_I2C1_GPIO_config+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <i2c_I2C1_GPIO_config+0x40>)
 800130e:	f043 434c 	orr.w	r3, r3, #3422552064	@ 0xcc000000
 8001312:	6013      	str	r3, [r2, #0]
  //  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
  //  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_7, LL_GPIO_PULL_UP);
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	40010c00 	.word	0x40010c00

08001324 <i2c_I2C1_config>:
/**
 * The function `i2c_I2C1_config` configures the I2C1 peripheral for communication at a speed of
 * 100KHz.
 */
void i2c_I2C1_config(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  // Bật xung clock I2C
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <i2c_I2C1_config+0x5c>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <i2c_I2C1_config+0x5c>)
 800132e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001332:	61d3      	str	r3, [r2, #28]

  // Cấu hình tần số I2C dùng thanh ghi I2C_CR2
  // tần số này trùng với tần số APB1 mà bạn đã cấu hình trước đó
  I2C1->CR2 &= ~(I2C_CR2_FREQ);
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <i2c_I2C1_config+0x60>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <i2c_I2C1_config+0x60>)
 800133a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800133e:	6053      	str	r3, [r2, #4]
  I2C1->CR2 |= (8UL << 0);
 8001340:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <i2c_I2C1_config+0x60>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <i2c_I2C1_config+0x60>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6053      	str	r3, [r2, #4]
  //  Cấu hình TRISE dùng thanh ghi I2C_TRISE
  //  như đã thấy ở phần ví dụ bit 5:0 của thanh ghi I2C_TRISE, ta dùng tần số 8Mhz nên TRISE= 0x09
  I2C1->TRISE &= ~(0xFF);
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <i2c_I2C1_config+0x60>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <i2c_I2C1_config+0x60>)
 8001352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001356:	6213      	str	r3, [r2, #32]
  I2C1->TRISE |= 0x09;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <i2c_I2C1_config+0x60>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <i2c_I2C1_config+0x60>)
 800135e:	f043 0309 	orr.w	r3, r3, #9
 8001362:	6213      	str	r3, [r2, #32]
  // Cấu hình tốc độ I2C (100KHz SCL) dùng thanh ghi I2C_CCR
  // ta có f=8Mhz -> T=0.125us, ta muốn T_high=T_low=5us => CCR=5us/0.125us=40 <=> 0x28 (100KHz)
  // ta có f=8Mhz -> T=0.125us, ta muốn T_high=T_low=50us => CCR=50us/0.125us=400 <=> 0x190 (10KHz)
  // ta có f=72Mhz -> T=..us, ta muốn T_high=T_low=5us => CCR=5us/..us=360 <=> 0x168 (100KHz)
  I2C1->CCR = 0x168;
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <i2c_I2C1_config+0x60>)
 8001366:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800136a:	61da      	str	r2, [r3, #28]
  // Bật ngoại vi I2C dùng I2C_CR1 bằng cách đặt PE=1
  I2C1->CR1 |= I2C_CR1_PE;
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <i2c_I2C1_config+0x60>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <i2c_I2C1_config+0x60>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]

  //  NVIC_EnableIRQ(I2C1_EV_IRQn);
  //  NVIC_EnableIRQ(I2C1_ER_IRQn);
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40005400 	.word	0x40005400

08001388 <i2c_I2C1_masterTransmit>:

bool i2c_I2C1_masterTransmit(uint8_t Addr, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	4613      	mov	r3, r2
 8001398:	73bb      	strb	r3, [r7, #14]
  uint32_t count = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint8_t index = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	74fb      	strb	r3, [r7, #19]

  // Chờ I2C vào trạng thái bận
  while ((I2C1->SR2 & I2C_SR2_BUSY))
 80013a2:	e008      	b.n	80013b6 <i2c_I2C1_masterTransmit+0x2e>
  {
    if (++count > timeout)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d901      	bls.n	80013b6 <i2c_I2C1_masterTransmit+0x2e>
      return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e08d      	b.n	80014d2 <i2c_I2C1_masterTransmit+0x14a>
  while ((I2C1->SR2 & I2C_SR2_BUSY))
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <i2c_I2C1_masterTransmit+0x1c>
  }

  // Xóa POS và tạo điều kiện Start
  I2C1->CR1 &= ~(I2C_CR1_POS);
 80013c2:	4b46      	ldr	r3, [pc, #280]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a45      	ldr	r2, [pc, #276]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80013c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80013cc:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= I2C_CR1_START;
 80013ce:	4b43      	ldr	r3, [pc, #268]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a42      	ldr	r2, [pc, #264]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d8:	6013      	str	r3, [r2, #0]

  // Chờ bit Start được set
  while (!(I2C1->SR1 & I2C_SR1_SB))
 80013da:	e008      	b.n	80013ee <i2c_I2C1_masterTransmit+0x66>
  {
    if (++count > timeout)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d901      	bls.n	80013ee <i2c_I2C1_masterTransmit+0x66>
      return false;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e071      	b.n	80014d2 <i2c_I2C1_masterTransmit+0x14a>
  while (!(I2C1->SR1 & I2C_SR1_SB))
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <i2c_I2C1_masterTransmit+0x54>
  }
  count = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]

  // Gửi địa chỉ Slave
  I2C1->DR = Addr << 1;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	4a36      	ldr	r2, [pc, #216]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	6113      	str	r3, [r2, #16]
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8001406:	e00b      	b.n	8001420 <i2c_I2C1_masterTransmit+0x98>
  {
    if (++count > timeout)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	d904      	bls.n	8001420 <i2c_I2C1_masterTransmit+0x98>
    {
      uart_printf("ADDR timeout\r\n");
 8001416:	4832      	ldr	r0, [pc, #200]	@ (80014e0 <i2c_I2C1_masterTransmit+0x158>)
 8001418:	f000 fc96 	bl	8001d48 <uart_printf>
      return false;
 800141c:	2300      	movs	r3, #0
 800141e:	e058      	b.n	80014d2 <i2c_I2C1_masterTransmit+0x14a>
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ed      	beq.n	8001408 <i2c_I2C1_masterTransmit+0x80>
    }
  }
  count = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  // Xóa bit ADDR
  (void)I2C1->SR1;
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 8001432:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 8001436:	699b      	ldr	r3, [r3, #24]

  // Truyền dữ liệu
  while (len > 0U)
 8001438:	e031      	b.n	800149e <i2c_I2C1_masterTransmit+0x116>
  {
    // Chờ bộ đệm trống
    while (!(I2C1->SR1 & I2C_SR1_TXE))
    {
      if (++count > timeout)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d901      	bls.n	800144c <i2c_I2C1_masterTransmit+0xc4>
        return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e042      	b.n	80014d2 <i2c_I2C1_masterTransmit+0x14a>
    while (!(I2C1->SR1 & I2C_SR1_TXE))
 800144c:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <i2c_I2C1_masterTransmit+0xb2>
    }
    count = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

    // Gửi dữ liệu
    I2C1->DR = pData[index];
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	4413      	add	r3, r2
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 8001466:	611a      	str	r2, [r3, #16]
    index++;
 8001468:	7cfb      	ldrb	r3, [r7, #19]
 800146a:	3301      	adds	r3, #1
 800146c:	74fb      	strb	r3, [r7, #19]
    len--;
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	3b01      	subs	r3, #1
 8001472:	73bb      	strb	r3, [r7, #14]

    // Nếu còn dữ liệu và BTF=1, gửi tiếp byte tiếp theo
    if ((len > 0U) && (I2C1->SR1 & I2C_SR1_BTF))
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d011      	beq.n	800149e <i2c_I2C1_masterTransmit+0x116>
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <i2c_I2C1_masterTransmit+0x116>
    {
      I2C1->DR = pData[index];
 8001486:	7cfb      	ldrb	r3, [r7, #19]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	4413      	add	r3, r2
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 8001490:	611a      	str	r2, [r3, #16]
      index++;
 8001492:	7cfb      	ldrb	r3, [r7, #19]
 8001494:	3301      	adds	r3, #1
 8001496:	74fb      	strb	r3, [r7, #19]
      len--;
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	3b01      	subs	r3, #1
 800149c:	73bb      	strb	r3, [r7, #14]
  while (len > 0U)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1d3      	bne.n	800144c <i2c_I2C1_masterTransmit+0xc4>
    }
  }

  // Chờ byte cuối cùng hoàn tất
  while (!(I2C1->SR1 & I2C_SR1_BTF))
 80014a4:	e008      	b.n	80014b8 <i2c_I2C1_masterTransmit+0x130>
  {
    if (++count > timeout)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d901      	bls.n	80014b8 <i2c_I2C1_masterTransmit+0x130>
      return false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e00c      	b.n	80014d2 <i2c_I2C1_masterTransmit+0x14a>
  while (!(I2C1->SR1 & I2C_SR1_BTF))
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <i2c_I2C1_masterTransmit+0x11e>
  }

  // Tạo điều kiện STOP
  I2C1->CR1 |= I2C_CR1_STOP;
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <i2c_I2C1_masterTransmit+0x154>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ce:	6013      	str	r3, [r2, #0]

  return true;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40005400 	.word	0x40005400
 80014e0:	080027ec 	.word	0x080027ec

080014e4 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t Addr, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	4613      	mov	r3, r2
 80014f4:	73bb      	strb	r3, [r7, #14]
  uint32_t count = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  uint8_t dataIndex = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	74fb      	strb	r3, [r7, #19]
  uint8_t dataSize = len;
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	74bb      	strb	r3, [r7, #18]

  // Wait until BUSY flag is reset
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 8001502:	e008      	b.n	8001516 <DS3231_Read+0x32>
  {
    if (++count > timeout)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	d901      	bls.n	8001516 <DS3231_Read+0x32>
      return false;
 8001512:	2300      	movs	r3, #0
 8001514:	e104      	b.n	8001720 <DS3231_Read+0x23c>
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 8001516:	4b84      	ldr	r3, [pc, #528]	@ (8001728 <DS3231_Read+0x244>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <DS3231_Read+0x20>
  }
  count = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]

  // Disable POS
  I2C1->CR1 &= ~(I2C_CR1_POS);
 8001526:	4b80      	ldr	r3, [pc, #512]	@ (8001728 <DS3231_Read+0x244>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a7f      	ldr	r2, [pc, #508]	@ (8001728 <DS3231_Read+0x244>)
 800152c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001530:	6013      	str	r3, [r2, #0]

  // Enable ACK
  I2C1->CR1 |= I2C_CR1_ACK;
 8001532:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <DS3231_Read+0x244>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a7c      	ldr	r2, [pc, #496]	@ (8001728 <DS3231_Read+0x244>)
 8001538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800153c:	6013      	str	r3, [r2, #0]

  // Generate start condition
  I2C1->CR1 |= I2C_CR1_START;
 800153e:	4b7a      	ldr	r3, [pc, #488]	@ (8001728 <DS3231_Read+0x244>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a79      	ldr	r2, [pc, #484]	@ (8001728 <DS3231_Read+0x244>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001548:	6013      	str	r3, [r2, #0]

  // Wait until SB flag is set
  while (!(I2C1->SR1 & I2C_SR1_SB))
 800154a:	e008      	b.n	800155e <DS3231_Read+0x7a>
  {
    if (++count > timeout)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	d901      	bls.n	800155e <DS3231_Read+0x7a>
      return false;
 800155a:	2300      	movs	r3, #0
 800155c:	e0e0      	b.n	8001720 <DS3231_Read+0x23c>
  while (!(I2C1->SR1 & I2C_SR1_SB))
 800155e:	4b72      	ldr	r3, [pc, #456]	@ (8001728 <DS3231_Read+0x244>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <DS3231_Read+0x68>
  }
  count = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  // Send slave address write
  I2C1->DR = (Addr << 1);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	4a6d      	ldr	r2, [pc, #436]	@ (8001728 <DS3231_Read+0x244>)
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	6113      	str	r3, [r2, #16]


  // Wait until ADDR flag is set
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8001576:	e00b      	b.n	8001590 <DS3231_Read+0xac>
  {
    if (++count > timeout)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d904      	bls.n	8001590 <DS3231_Read+0xac>
    {
      uart_printf("ADDR timeout1\r\n");
 8001586:	4869      	ldr	r0, [pc, #420]	@ (800172c <DS3231_Read+0x248>)
 8001588:	f000 fbde 	bl	8001d48 <uart_printf>
      return false;
 800158c:	2300      	movs	r3, #0
 800158e:	e0c7      	b.n	8001720 <DS3231_Read+0x23c>
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8001590:	4b65      	ldr	r3, [pc, #404]	@ (8001728 <DS3231_Read+0x244>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ed      	beq.n	8001578 <DS3231_Read+0x94>
    }
  }
  count = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  //	  Clear ADDR flag
  (void)I2C1->SR1;
 80015a0:	4b61      	ldr	r3, [pc, #388]	@ (8001728 <DS3231_Read+0x244>)
 80015a2:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 80015a4:	4b60      	ldr	r3, [pc, #384]	@ (8001728 <DS3231_Read+0x244>)
 80015a6:	699b      	ldr	r3, [r3, #24]

  // register slave
  I2C1->DR = 0x06; // R/W=1 (read)
 80015a8:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <DS3231_Read+0x244>)
 80015aa:	2206      	movs	r2, #6
 80015ac:	611a      	str	r2, [r3, #16]

  if (I2C1->SR1 & I2C_SR1_ARLO)
 80015ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001728 <DS3231_Read+0x244>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00f      	beq.n	80015da <DS3231_Read+0xf6>
  {
    uart_printf("arlo 2\r\n");
 80015ba:	485d      	ldr	r0, [pc, #372]	@ (8001730 <DS3231_Read+0x24c>)
 80015bc:	f000 fbc4 	bl	8001d48 <uart_printf>
  }
  while (!(I2C1->SR1 & I2C_SR1_TXE))
 80015c0:	e00b      	b.n	80015da <DS3231_Read+0xf6>
  {
    if (++count > timeout)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d904      	bls.n	80015da <DS3231_Read+0xf6>
    {
      uart_printf("error txe\r\n");
 80015d0:	4858      	ldr	r0, [pc, #352]	@ (8001734 <DS3231_Read+0x250>)
 80015d2:	f000 fbb9 	bl	8001d48 <uart_printf>
      return false;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e0a2      	b.n	8001720 <DS3231_Read+0x23c>
  while (!(I2C1->SR1 & I2C_SR1_TXE))
 80015da:	4b53      	ldr	r3, [pc, #332]	@ (8001728 <DS3231_Read+0x244>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0ed      	beq.n	80015c2 <DS3231_Read+0xde>
    }
  }
  count = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  if (I2C1->SR1 & I2C_SR1_ARLO)
 80015ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001728 <DS3231_Read+0x244>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <DS3231_Read+0x118>
  {
    uart_printf("arlo 3\r\n");
 80015f6:	4850      	ldr	r0, [pc, #320]	@ (8001738 <DS3231_Read+0x254>)
 80015f8:	f000 fba6 	bl	8001d48 <uart_printf>
  }
  // Generate start condition
  I2C1->CR1 |= I2C_CR1_START;
 80015fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001728 <DS3231_Read+0x244>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a49      	ldr	r2, [pc, #292]	@ (8001728 <DS3231_Read+0x244>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001606:	6013      	str	r3, [r2, #0]
  // Wait until SB flag is set
  while (!(I2C1->SR1 & I2C_SR1_SB))
 8001608:	e008      	b.n	800161c <DS3231_Read+0x138>
  {
    if (++count > timeout)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d901      	bls.n	800161c <DS3231_Read+0x138>
      return false;
 8001618:	2300      	movs	r3, #0
 800161a:	e081      	b.n	8001720 <DS3231_Read+0x23c>
  while (!(I2C1->SR1 & I2C_SR1_SB))
 800161c:	4b42      	ldr	r3, [pc, #264]	@ (8001728 <DS3231_Read+0x244>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <DS3231_Read+0x126>
  }
  count = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  if (I2C1->SR1 & I2C_SR1_ARLO)
 800162c:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <DS3231_Read+0x244>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <DS3231_Read+0x15a>
  {
    uart_printf("arlo 4\r\n");
 8001638:	4840      	ldr	r0, [pc, #256]	@ (800173c <DS3231_Read+0x258>)
 800163a:	f000 fb85 	bl	8001d48 <uart_printf>
  }
  // Send slave address
  I2C1->DR = (Addr << 1) | 1; // R/W=1 (read)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	4b38      	ldr	r3, [pc, #224]	@ (8001728 <DS3231_Read+0x244>)
 8001648:	611a      	str	r2, [r3, #16]
  if (I2C1->SR1 & I2C_SR1_ARLO)
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <DS3231_Read+0x244>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00f      	beq.n	8001676 <DS3231_Read+0x192>
  {
    uart_printf("arlo 5\r\n");
 8001656:	483a      	ldr	r0, [pc, #232]	@ (8001740 <DS3231_Read+0x25c>)
 8001658:	f000 fb76 	bl	8001d48 <uart_printf>
  }
  // Wait until ADDR flag is set
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 800165c:	e00b      	b.n	8001676 <DS3231_Read+0x192>
  {
    if (++count > timeout)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	d904      	bls.n	8001676 <DS3231_Read+0x192>
    {
      uart_printf("ADDR timeout2\r\n");
 800166c:	4835      	ldr	r0, [pc, #212]	@ (8001744 <DS3231_Read+0x260>)
 800166e:	f000 fb6b 	bl	8001d48 <uart_printf>
      return false;
 8001672:	2300      	movs	r3, #0
 8001674:	e054      	b.n	8001720 <DS3231_Read+0x23c>
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8001676:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <DS3231_Read+0x244>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ed      	beq.n	800165e <DS3231_Read+0x17a>
    }
  }
  count = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  if (I2C1->SR1 & I2C_SR1_ARLO)
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <DS3231_Read+0x244>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <DS3231_Read+0x1b4>
  {
    uart_printf("arlo 6\r\n");
 8001692:	482d      	ldr	r0, [pc, #180]	@ (8001748 <DS3231_Read+0x264>)
 8001694:	f000 fb58 	bl	8001d48 <uart_printf>
  }
  if (dataSize == 1)
 8001698:	7cbb      	ldrb	r3, [r7, #18]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d13c      	bne.n	8001718 <DS3231_Read+0x234>
  {

    // Disable Acknowledge
    I2C1->CR1 &= ~(I2C_CR1_ACK);
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <DS3231_Read+0x244>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <DS3231_Read+0x244>)
 80016a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80016a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016aa:	b672      	cpsid	i
}
 80016ac:	bf00      	nop
    __disable_irq();

    // Clear ADDR flag
    (void)I2C1->SR1;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <DS3231_Read+0x244>)
 80016b0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <DS3231_Read+0x244>)
 80016b4:	699b      	ldr	r3, [r3, #24]

    // Generate Stop
    I2C1->CR1 |= I2C_CR1_STOP;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <DS3231_Read+0x244>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <DS3231_Read+0x244>)
 80016bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016c2:	b662      	cpsie	i
}
 80016c4:	bf00      	nop

    /* Re-enable IRQs */
    __enable_irq();
  }

  while (dataSize > 0)
 80016c6:	e027      	b.n	8001718 <DS3231_Read+0x234>
  {
    if (dataSize <= 3)
 80016c8:	7cbb      	ldrb	r3, [r7, #18]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d824      	bhi.n	8001718 <DS3231_Read+0x234>
    {
      /* One byte */
      if (dataSize == 1)
 80016ce:	7cbb      	ldrb	r3, [r7, #18]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d121      	bne.n	8001718 <DS3231_Read+0x234>
      {
        // Wait until RXNE flag is set
        while (!(I2C1->SR1 & I2C_SR1_RXNE))
 80016d4:	e00b      	b.n	80016ee <DS3231_Read+0x20a>
        {
          if (++count > timeout)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d904      	bls.n	80016ee <DS3231_Read+0x20a>
          {
            uart_printf("wait rx 1 byte fail\r\n");
 80016e4:	4819      	ldr	r0, [pc, #100]	@ (800174c <DS3231_Read+0x268>)
 80016e6:	f000 fb2f 	bl	8001d48 <uart_printf>
            return false;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e018      	b.n	8001720 <DS3231_Read+0x23c>
        while (!(I2C1->SR1 & I2C_SR1_RXNE))
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <DS3231_Read+0x244>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0ed      	beq.n	80016d6 <DS3231_Read+0x1f2>
          }
        }
        count = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]

        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <DS3231_Read+0x244>)
 8001700:	6919      	ldr	r1, [r3, #16]
 8001702:	7cfb      	ldrb	r3, [r7, #19]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 800170c:	7cfb      	ldrb	r3, [r7, #19]
 800170e:	3301      	adds	r3, #1
 8001710:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 8001712:	7cbb      	ldrb	r3, [r7, #18]
 8001714:	3b01      	subs	r3, #1
 8001716:	74bb      	strb	r3, [r7, #18]
  while (dataSize > 0)
 8001718:	7cbb      	ldrb	r3, [r7, #18]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1d4      	bne.n	80016c8 <DS3231_Read+0x1e4>
      }
    }
  }
  return true;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40005400 	.word	0x40005400
 800172c:	080027fc 	.word	0x080027fc
 8001730:	0800280c 	.word	0x0800280c
 8001734:	08002818 	.word	0x08002818
 8001738:	08002824 	.word	0x08002824
 800173c:	08002830 	.word	0x08002830
 8001740:	0800283c 	.word	0x0800283c
 8001744:	08002848 	.word	0x08002848
 8001748:	08002858 	.word	0x08002858
 800174c:	08002864 	.word	0x08002864

08001750 <i2c_I2C1_masterReceive>:
  I2C1->CR1 |= I2C_CR1_START;
  return true;
}

bool i2c_I2C1_masterReceive(uint8_t Addr, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	4613      	mov	r3, r2
 8001760:	73bb      	strb	r3, [r7, #14]
  uint32_t count = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint8_t dataIndex = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	74fb      	strb	r3, [r7, #19]
  uint8_t dataSize = len;
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	74bb      	strb	r3, [r7, #18]

  // Wait until BUSY flag is reset
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 800176e:	e008      	b.n	8001782 <i2c_I2C1_masterReceive+0x32>
  {
    if (++count > timeout)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d901      	bls.n	8001782 <i2c_I2C1_masterReceive+0x32>
      return false;
 800177e:	2300      	movs	r3, #0
 8001780:	e1c3      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 8001782:	4b8e      	ldr	r3, [pc, #568]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <i2c_I2C1_masterReceive+0x20>
  }
  count = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]

  // Disable POS
  I2C1->CR1 &= ~(I2C_CR1_POS);
 8001792:	4b8a      	ldr	r3, [pc, #552]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a89      	ldr	r2, [pc, #548]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001798:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800179c:	6013      	str	r3, [r2, #0]

  // Enable ACK
  I2C1->CR1 |= I2C_CR1_ACK;
 800179e:	4b87      	ldr	r3, [pc, #540]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a86      	ldr	r2, [pc, #536]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80017a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017a8:	6013      	str	r3, [r2, #0]

  // Generate start condition
  I2C1->CR1 |= I2C_CR1_START;
 80017aa:	4b84      	ldr	r3, [pc, #528]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a83      	ldr	r2, [pc, #524]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b4:	6013      	str	r3, [r2, #0]

  // Wait until SB flag is set
  while (!(I2C1->SR1 & I2C_SR1_SB))
 80017b6:	e008      	b.n	80017ca <i2c_I2C1_masterReceive+0x7a>
  {
    if (++count > timeout)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d901      	bls.n	80017ca <i2c_I2C1_masterReceive+0x7a>
      return false;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e19f      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
  while (!(I2C1->SR1 & I2C_SR1_SB))
 80017ca:	4b7c      	ldr	r3, [pc, #496]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <i2c_I2C1_masterReceive+0x68>
  }
  count = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]

  // Send slave address
  I2C1->DR = (Addr << 1) | 0x01; // R/W=1 (read)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80017e4:	611a      	str	r2, [r3, #16]

  // Wait until ADDR flag is set
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 80017e6:	e00b      	b.n	8001800 <i2c_I2C1_masterReceive+0xb0>
  {
    if (++count > timeout)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d904      	bls.n	8001800 <i2c_I2C1_masterReceive+0xb0>
    {
      uart_printf("ADDR timeout\r\n");
 80017f6:	4872      	ldr	r0, [pc, #456]	@ (80019c0 <i2c_I2C1_masterReceive+0x270>)
 80017f8:	f000 faa6 	bl	8001d48 <uart_printf>
      return false;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e184      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8001800:	4b6e      	ldr	r3, [pc, #440]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ed      	beq.n	80017e8 <i2c_I2C1_masterReceive+0x98>
    }
  }
  count = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  if (I2C1->SR1 & I2C_SR1_BERR)
 8001810:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <i2c_I2C1_masterReceive+0xd2>
  {
    uart_printf("berr 1\r\n");
 800181c:	4869      	ldr	r0, [pc, #420]	@ (80019c4 <i2c_I2C1_masterReceive+0x274>)
 800181e:	f000 fa93 	bl	8001d48 <uart_printf>
  }

  if (dataSize == 0)
 8001822:	7cbb      	ldrb	r3, [r7, #18]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10b      	bne.n	8001840 <i2c_I2C1_masterReceive+0xf0>
  {
    //	  Clear ADDR flag
    (void)I2C1->SR1;
 8001828:	4b64      	ldr	r3, [pc, #400]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800182a:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800182c:	4b63      	ldr	r3, [pc, #396]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800182e:	699b      	ldr	r3, [r3, #24]

    // Generate Stop
    I2C1->CR1 |= I2C_CR1_STOP;
 8001830:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a61      	ldr	r2, [pc, #388]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]
    return false;
 800183c:	2300      	movs	r3, #0
 800183e:	e164      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
  }
  else if (dataSize == 1)
 8001840:	7cbb      	ldrb	r3, [r7, #18]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d125      	bne.n	8001892 <i2c_I2C1_masterReceive+0x142>
  {

    // Disable Acknowledge
    I2C1->CR1 &= ~(I2C_CR1_ACK);
 8001846:	4b5d      	ldr	r3, [pc, #372]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5c      	ldr	r2, [pc, #368]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800184c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001850:	6013      	str	r3, [r2, #0]

    if (I2C1->SR1 & I2C_SR1_BERR)
 8001852:	4b5a      	ldr	r3, [pc, #360]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <i2c_I2C1_masterReceive+0x114>
    {
      uart_printf("berr 2\r\n");
 800185e:	485a      	ldr	r0, [pc, #360]	@ (80019c8 <i2c_I2C1_masterReceive+0x278>)
 8001860:	f000 fa72 	bl	8001d48 <uart_printf>
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
    /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
    software sequence must complete before the current byte end of transfer */
    __disable_irq();

    // Clear ADDR flag
    (void)I2C1->SR1;
 8001868:	4b54      	ldr	r3, [pc, #336]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800186a:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800186e:	699b      	ldr	r3, [r3, #24]

    // Generate Stop
    I2C1->CR1 |= I2C_CR1_STOP;
 8001870:	4b52      	ldr	r3, [pc, #328]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a51      	ldr	r2, [pc, #324]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6013      	str	r3, [r2, #0]

    if (I2C1->SR1 & I2C_SR1_BERR)
 800187c:	4b4f      	ldr	r3, [pc, #316]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <i2c_I2C1_masterReceive+0x13e>
    {
      uart_printf("berr 3\r\n");
 8001888:	4850      	ldr	r0, [pc, #320]	@ (80019cc <i2c_I2C1_masterReceive+0x27c>)
 800188a:	f000 fa5d 	bl	8001d48 <uart_printf>
  __ASM volatile ("cpsie i" : : : "memory");
 800188e:	b662      	cpsie	i
}
 8001890:	e020      	b.n	80018d4 <i2c_I2C1_masterReceive+0x184>
    }

    /* Re-enable IRQs */
    __enable_irq();
  }
  else if (dataSize == 2)
 8001892:	7cbb      	ldrb	r3, [r7, #18]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d113      	bne.n	80018c0 <i2c_I2C1_masterReceive+0x170>
  {
    // Enable Pos
    I2C1->CR1 |= (I2C_CR1_POS);
 8001898:	4b48      	ldr	r3, [pc, #288]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a47      	ldr	r2, [pc, #284]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800189e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
    /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
          software sequence must complete before the current byte end of transfer */
    __disable_irq();

    // Clear ADDR flag
    (void)I2C1->SR1;
 80018a8:	4b44      	ldr	r3, [pc, #272]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018aa:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80018ac:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018ae:	699b      	ldr	r3, [r3, #24]

    // Disable Acknowledge
    I2C1->CR1 &= ~(I2C_CR1_ACK);
 80018b0:	4b42      	ldr	r3, [pc, #264]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018bc:	b662      	cpsie	i
}
 80018be:	e009      	b.n	80018d4 <i2c_I2C1_masterReceive+0x184>
    __enable_irq();
  }
  else // len>2
  {
    // Enable Acknowledge
    I2C1->CR1 |= (I2C_CR1_ACK);
 80018c0:	4b3e      	ldr	r3, [pc, #248]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3d      	ldr	r2, [pc, #244]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ca:	6013      	str	r3, [r2, #0]

    //  Clear ADDR flag
    (void)I2C1->SR1;
 80018cc:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018ce:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80018d0:	4b3a      	ldr	r3, [pc, #232]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 80018d2:	699b      	ldr	r3, [r3, #24]
  }

  while (dataSize > 0)
 80018d4:	e114      	b.n	8001b00 <i2c_I2C1_masterReceive+0x3b0>
  {
    if (dataSize <= 3)
 80018d6:	7cbb      	ldrb	r3, [r7, #18]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	f200 80e0 	bhi.w	8001a9e <i2c_I2C1_masterReceive+0x34e>
    {
      /* One byte */
      if (dataSize == 1)
 80018de:	7cbb      	ldrb	r3, [r7, #18]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d122      	bne.n	800192a <i2c_I2C1_masterReceive+0x1da>
      {
        // Wait until RXNE flag is set
        while (!(I2C1->SR1 & I2C_SR1_RXNE))
 80018e4:	e00b      	b.n	80018fe <i2c_I2C1_masterReceive+0x1ae>
        {
          if (++count > timeout)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d904      	bls.n	80018fe <i2c_I2C1_masterReceive+0x1ae>
          {
            uart_printf("wait rx 1 byte fail\r\n");
 80018f4:	4836      	ldr	r0, [pc, #216]	@ (80019d0 <i2c_I2C1_masterReceive+0x280>)
 80018f6:	f000 fa27 	bl	8001d48 <uart_printf>
            return false;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e105      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
        while (!(I2C1->SR1 & I2C_SR1_RXNE))
 80018fe:	4b2f      	ldr	r3, [pc, #188]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0ed      	beq.n	80018e6 <i2c_I2C1_masterReceive+0x196>
          }
        }
        count = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 800190e:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001910:	6919      	ldr	r1, [r3, #16]
 8001912:	7cfb      	ldrb	r3, [r7, #19]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	3301      	adds	r3, #1
 8001920:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 8001922:	7cbb      	ldrb	r3, [r7, #18]
 8001924:	3b01      	subs	r3, #1
 8001926:	74bb      	strb	r3, [r7, #18]
 8001928:	e0ea      	b.n	8001b00 <i2c_I2C1_masterReceive+0x3b0>
      }
      /* Two bytes */
      else if (dataSize == 2)
 800192a:	7cbb      	ldrb	r3, [r7, #18]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d155      	bne.n	80019dc <i2c_I2C1_masterReceive+0x28c>
      {
        // Wait until BTF flag is set
        while (!(I2C1->SR1 & I2C_SR1_BTF))
 8001930:	e00b      	b.n	800194a <i2c_I2C1_masterReceive+0x1fa>
        {
          if (++count > timeout)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d904      	bls.n	800194a <i2c_I2C1_masterReceive+0x1fa>
          {
            uart_printf("btf 2 byte fail\r\n");
 8001940:	4824      	ldr	r0, [pc, #144]	@ (80019d4 <i2c_I2C1_masterReceive+0x284>)
 8001942:	f000 fa01 	bl	8001d48 <uart_printf>
            return false;
 8001946:	2300      	movs	r3, #0
 8001948:	e0df      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
        while (!(I2C1->SR1 & I2C_SR1_BTF))
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ed      	beq.n	8001932 <i2c_I2C1_masterReceive+0x1e2>
          }
        }
        count = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800195a:	b672      	cpsid	i
}
 800195c:	bf00      	nop
        /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
           software sequence must complete before the current byte end of transfer */
        __disable_irq();

        // Generate Stop
        I2C1->CR1 |= I2C_CR1_STOP;
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a16      	ldr	r2, [pc, #88]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 8001964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001968:	6013      	str	r3, [r2, #0]

        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 800196a:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800196c:	6919      	ldr	r1, [r3, #16]
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	4413      	add	r3, r2
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	3301      	adds	r3, #1
 800197c:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 800197e:	7cbb      	ldrb	r3, [r7, #18]
 8001980:	3b01      	subs	r3, #1
 8001982:	74bb      	strb	r3, [r7, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8001984:	b662      	cpsie	i
}
 8001986:	bf00      	nop

        /* Re-enable IRQs */
        __enable_irq();

        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <i2c_I2C1_masterReceive+0x26c>)
 800198a:	6919      	ldr	r1, [r3, #16]
 800198c:	7cfb      	ldrb	r3, [r7, #19]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	4413      	add	r3, r2
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 8001996:	7cfb      	ldrb	r3, [r7, #19]
 8001998:	3301      	adds	r3, #1
 800199a:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 800199c:	7cbb      	ldrb	r3, [r7, #18]
 800199e:	3b01      	subs	r3, #1
 80019a0:	74bb      	strb	r3, [r7, #18]
 80019a2:	e0ad      	b.n	8001b00 <i2c_I2C1_masterReceive+0x3b0>
      else
      {
        // Wait until BTF flag is set
        while (!(I2C1->SR1 & I2C_SR1_BTF))
        {
          if (++count > timeout)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d914      	bls.n	80019dc <i2c_I2C1_masterReceive+0x28c>
          {
            uart_printf("btf 3 byte fail\r\n");
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <i2c_I2C1_masterReceive+0x288>)
 80019b4:	f000 f9c8 	bl	8001d48 <uart_printf>
            return false;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e0a6      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
 80019bc:	40005400 	.word	0x40005400
 80019c0:	080027ec 	.word	0x080027ec
 80019c4:	0800287c 	.word	0x0800287c
 80019c8:	08002888 	.word	0x08002888
 80019cc:	08002894 	.word	0x08002894
 80019d0:	08002864 	.word	0x08002864
 80019d4:	080028a0 	.word	0x080028a0
 80019d8:	080028b4 	.word	0x080028b4
        while (!(I2C1->SR1 & I2C_SR1_BTF))
 80019dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0dd      	beq.n	80019a4 <i2c_I2C1_masterReceive+0x254>
          }
        }
        count = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

        // Disable Acknowledge
        I2C1->CR1 &= ~(I2C_CR1_ACK);
 80019ec:	4b49      	ldr	r3, [pc, #292]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a48      	ldr	r2, [pc, #288]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 80019f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019f6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
        /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
                     software sequence must complete before the current byte end of transfer */
        __disable_irq();

        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 80019fc:	4b45      	ldr	r3, [pc, #276]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 80019fe:	6919      	ldr	r1, [r3, #16]
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	4413      	add	r3, r2
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 8001a0a:	7cfb      	ldrb	r3, [r7, #19]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 8001a10:	7cbb      	ldrb	r3, [r7, #18]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	74bb      	strb	r3, [r7, #18]

        // Wait until BTF flag is set
        while (!(I2C1->SR1 & I2C_SR1_BTF))
 8001a16:	e00b      	b.n	8001a30 <i2c_I2C1_masterReceive+0x2e0>
        {
          if (++count > timeout)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d904      	bls.n	8001a30 <i2c_I2C1_masterReceive+0x2e0>
          {
            uart_printf("btf flag last in 3 byte fail\r\n");
 8001a26:	483c      	ldr	r0, [pc, #240]	@ (8001b18 <i2c_I2C1_masterReceive+0x3c8>)
 8001a28:	f000 f98e 	bl	8001d48 <uart_printf>
            return false;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e06c      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
        while (!(I2C1->SR1 & I2C_SR1_BTF))
 8001a30:	4b38      	ldr	r3, [pc, #224]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ed      	beq.n	8001a18 <i2c_I2C1_masterReceive+0x2c8>
          }
        }
        count = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

        // Generate Stop
        I2C1->CR1 |= I2C_CR1_STOP;
 8001a40:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a33      	ldr	r2, [pc, #204]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a4a:	6013      	str	r3, [r2, #0]

        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 8001a4c:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001a4e:	6919      	ldr	r1, [r3, #16]
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	b2ca      	uxtb	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 8001a5a:	7cfb      	ldrb	r3, [r7, #19]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 8001a60:	7cbb      	ldrb	r3, [r7, #18]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	74bb      	strb	r3, [r7, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a66:	b662      	cpsie	i
}
 8001a68:	bf00      	nop

        /* Re-enable IRQs */
        __enable_irq();

        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2ca      	uxtb	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 8001a7e:	7cbb      	ldrb	r3, [r7, #18]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	74bb      	strb	r3, [r7, #18]
 8001a84:	e03c      	b.n	8001b00 <i2c_I2C1_masterReceive+0x3b0>
    else // len>3
    {
      // Wait until RXNE flag is set
      while (!(I2C1->SR1 & I2C_SR1_RXNE))
      {
        if (++count > timeout)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d904      	bls.n	8001a9e <i2c_I2C1_masterReceive+0x34e>
        {
          uart_printf("rxne fail > 3byte\r\n");
 8001a94:	4821      	ldr	r0, [pc, #132]	@ (8001b1c <i2c_I2C1_masterReceive+0x3cc>)
 8001a96:	f000 f957 	bl	8001d48 <uart_printf>
          return false;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e035      	b.n	8001b0a <i2c_I2C1_masterReceive+0x3ba>
      while (!(I2C1->SR1 & I2C_SR1_RXNE))
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0ed      	beq.n	8001a86 <i2c_I2C1_masterReceive+0x336>
        }
      }
      count = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]

      // Read data from DR
      pData[dataIndex] = (uint8_t)I2C1->DR;
 8001aae:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001ab0:	6919      	ldr	r1, [r3, #16]
 8001ab2:	7cfb      	ldrb	r3, [r7, #19]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2ca      	uxtb	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
      dataIndex++;
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	74fb      	strb	r3, [r7, #19]
      dataSize--;
 8001ac2:	7cbb      	ldrb	r3, [r7, #18]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	74bb      	strb	r3, [r7, #18]

      if (I2C1->SR1 & I2C_SR1_BTF)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d015      	beq.n	8001b00 <i2c_I2C1_masterReceive+0x3b0>
      {
        if (dataSize == 3)
 8001ad4:	7cbb      	ldrb	r3, [r7, #18]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d105      	bne.n	8001ae6 <i2c_I2C1_masterReceive+0x396>
        {
          // Disable Acknowledge
          I2C1->CR1 &= ~(I2C_CR1_ACK);
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001ae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ae4:	6013      	str	r3, [r2, #0]
        }
        // Read data from DR
        pData[dataIndex] = (uint8_t)I2C1->DR;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <i2c_I2C1_masterReceive+0x3c4>)
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	7cfb      	ldrb	r3, [r7, #19]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
        dataIndex++;
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	3301      	adds	r3, #1
 8001af8:	74fb      	strb	r3, [r7, #19]
        dataSize--;
 8001afa:	7cbb      	ldrb	r3, [r7, #18]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	74bb      	strb	r3, [r7, #18]
  while (dataSize > 0)
 8001b00:	7cbb      	ldrb	r3, [r7, #18]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f47f aee7 	bne.w	80018d6 <i2c_I2C1_masterReceive+0x186>
      }
    }
  }
  return true;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40005400 	.word	0x40005400
 8001b18:	080028c8 	.word	0x080028c8
 8001b1c:	080028e8 	.word	0x080028e8

08001b20 <receive_handler>:
  i2c1_state = I2C_READY;
  return true;
}

void receive_handler()
{
 8001b20:	b490      	push	{r4, r7}
 8001b22:	af00      	add	r7, sp, #0
  if (I2C1->SR1 & I2C_SR1_SB)
 8001b24:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <receive_handler+0x114>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <receive_handler+0x20>
  { // START condition sent
    // Send address with read request
    I2C1->DR = i2c1_addr << 1 | 0x01;
 8001b30:	4b41      	ldr	r3, [pc, #260]	@ (8001c38 <receive_handler+0x118>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c34 <receive_handler+0x114>)
 8001b3c:	611a      	str	r2, [r3, #16]
  else if (I2C1->SR1 & I2C_SR1_STOPF)
  {                  // STOP condition detected
    (void)I2C1->SR1; // Clear STOP flag
    i2c1_transferComplete = true;
  }
}
 8001b3e:	e074      	b.n	8001c2a <receive_handler+0x10a>
  else if (I2C1->SR1 & I2C_SR1_ADDR)
 8001b40:	4b3c      	ldr	r3, [pc, #240]	@ (8001c34 <receive_handler+0x114>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d027      	beq.n	8001b9c <receive_handler+0x7c>
    (void)I2C1->SR1; // Clear ADDR flag
 8001b4c:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <receive_handler+0x114>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8001b50:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <receive_handler+0x114>)
 8001b52:	699b      	ldr	r3, [r3, #24]
    if (i2c1_length == 1)
 8001b54:	4b39      	ldr	r3, [pc, #228]	@ (8001c3c <receive_handler+0x11c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10c      	bne.n	8001b78 <receive_handler+0x58>
      I2C1->CR1 &= ~I2C_CR1_ACK;
 8001b5e:	4b35      	ldr	r3, [pc, #212]	@ (8001c34 <receive_handler+0x114>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a34      	ldr	r2, [pc, #208]	@ (8001c34 <receive_handler+0x114>)
 8001b64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b68:	6013      	str	r3, [r2, #0]
      I2C1->CR1 |= I2C_CR1_STOP;
 8001b6a:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <receive_handler+0x114>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a31      	ldr	r2, [pc, #196]	@ (8001c34 <receive_handler+0x114>)
 8001b70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	e058      	b.n	8001c2a <receive_handler+0x10a>
    else if (i2c1_length == 2)
 8001b78:	4b30      	ldr	r3, [pc, #192]	@ (8001c3c <receive_handler+0x11c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d153      	bne.n	8001c2a <receive_handler+0x10a>
      I2C1->CR1 &= ~I2C_CR1_ACK; // Clear ACK before the last two bytes
 8001b82:	4b2c      	ldr	r3, [pc, #176]	@ (8001c34 <receive_handler+0x114>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2b      	ldr	r2, [pc, #172]	@ (8001c34 <receive_handler+0x114>)
 8001b88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b8c:	6013      	str	r3, [r2, #0]
      I2C1->CR1 |= I2C_CR1_POS;  // Set POS for dual-byte reception
 8001b8e:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <receive_handler+0x114>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <receive_handler+0x114>)
 8001b94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b98:	6013      	str	r3, [r2, #0]
}
 8001b9a:	e046      	b.n	8001c2a <receive_handler+0x10a>
  else if (I2C1->SR1 & I2C_SR1_RXNE)
 8001b9c:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <receive_handler+0x114>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d035      	beq.n	8001c14 <receive_handler+0xf4>
    i2c1_data[i2c1_dataIndex++] = (uint8_t)I2C1->DR;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <receive_handler+0x114>)
 8001baa:	6918      	ldr	r0, [r3, #16]
 8001bac:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <receive_handler+0x120>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <receive_handler+0x124>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	b2cc      	uxtb	r4, r1
 8001bba:	4922      	ldr	r1, [pc, #136]	@ (8001c44 <receive_handler+0x124>)
 8001bbc:	700c      	strb	r4, [r1, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b2c2      	uxtb	r2, r0
 8001bc2:	701a      	strb	r2, [r3, #0]
    i2c1_length--;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <receive_handler+0x11c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <receive_handler+0x11c>)
 8001bd0:	701a      	strb	r2, [r3, #0]
    if (i2c1_length == 2)
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <receive_handler+0x11c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d106      	bne.n	8001bea <receive_handler+0xca>
      I2C1->CR1 &= ~I2C_CR1_ACK; // Clear ACK
 8001bdc:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <receive_handler+0x114>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <receive_handler+0x114>)
 8001be2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	e01f      	b.n	8001c2a <receive_handler+0x10a>
    else if (i2c1_length == 1)
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <receive_handler+0x11c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d106      	bne.n	8001c02 <receive_handler+0xe2>
      I2C1->CR1 |= I2C_CR1_STOP;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <receive_handler+0x114>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c34 <receive_handler+0x114>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	e013      	b.n	8001c2a <receive_handler+0x10a>
    else if (i2c1_length == 0)
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <receive_handler+0x11c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10e      	bne.n	8001c2a <receive_handler+0x10a>
      i2c1_transferComplete = true;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <receive_handler+0x128>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
}
 8001c12:	e00a      	b.n	8001c2a <receive_handler+0x10a>
  else if (I2C1->SR1 & I2C_SR1_STOPF)
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <receive_handler+0x114>)
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <receive_handler+0x10a>
    (void)I2C1->SR1; // Clear STOP flag
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <receive_handler+0x114>)
 8001c22:	695b      	ldr	r3, [r3, #20]
    i2c1_transferComplete = true;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <receive_handler+0x128>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc90      	pop	{r4, r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40005400 	.word	0x40005400
 8001c38:	2000007f 	.word	0x2000007f
 8001c3c:	2000007c 	.word	0x2000007c
 8001c40:	20000078 	.word	0x20000078
 8001c44:	2000007d 	.word	0x2000007d
 8001c48:	2000007e 	.word	0x2000007e

08001c4c <error_i2c_handler>:

void error_i2c_handler()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  i2c1_transferComplete = false;
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <error_i2c_handler+0x28>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
  I2C1->CR1 |= I2C_CR1_STOP; // Force STOP condition
 8001c56:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <error_i2c_handler+0x2c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <error_i2c_handler+0x2c>)
 8001c5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c60:	6013      	str	r3, [r2, #0]
  i2c1_state = I2C_READY;    // Reset state
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <error_i2c_handler+0x30>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
  uart_printf("error handler\r\n");
 8001c68:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <error_i2c_handler+0x34>)
 8001c6a:	f000 f86d 	bl	8001d48 <uart_printf>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000007e 	.word	0x2000007e
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	20000074 	.word	0x20000074
 8001c80:	080028fc 	.word	0x080028fc

08001c84 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c94:	2b40      	cmp	r3, #64	@ 0x40
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb8:	2b80      	cmp	r3, #128	@ 0x80
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	605a      	str	r2, [r3, #4]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <uart_print>:
 */

#include "myuart.h"

static void uart_print(const char *str)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t length = strlen(str);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7fe fa2b 	bl	800014c <strlen>
 8001cf6:	60b8      	str	r0, [r7, #8]
  for (uint32_t i = 0; i < length; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e011      	b.n	8001d22 <uart_print+0x3a>
  {
    while (!LL_USART_IsActiveFlag_TXE(USART2))
 8001cfe:	bf00      	nop
 8001d00:	4810      	ldr	r0, [pc, #64]	@ (8001d44 <uart_print+0x5c>)
 8001d02:	f7ff ffd1 	bl	8001ca8 <LL_USART_IsActiveFlag_TXE>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f9      	beq.n	8001d00 <uart_print+0x18>
      ;
    LL_USART_TransmitData8(USART2, (uint8_t)str[i]);
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <uart_print+0x5c>)
 8001d18:	f7ff ffd8 	bl	8001ccc <LL_USART_TransmitData8>
  for (uint32_t i = 0; i < length; i++)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3e9      	bcc.n	8001cfe <uart_print+0x16>
  }
  while (!LL_USART_IsActiveFlag_TC(USART2))
 8001d2a:	bf00      	nop
 8001d2c:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <uart_print+0x5c>)
 8001d2e:	f7ff ffa9 	bl	8001c84 <LL_USART_IsActiveFlag_TC>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f9      	beq.n	8001d2c <uart_print+0x44>
    ;
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40004400 	.word	0x40004400

08001d48 <uart_printf>:

void uart_printf(const char *format, ...)
{
 8001d48:	b40f      	push	{r0, r1, r2, r3}
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b0a2      	sub	sp, #136	@ 0x88
 8001d4e:	af00      	add	r7, sp, #0
  char buffer[128];
  va_list args;
  va_start(args, format);
 8001d50:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d54:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 8001d56:	f107 0008 	add.w	r0, r7, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001d60:	2180      	movs	r1, #128	@ 0x80
 8001d62:	f000 f837 	bl	8001dd4 <vsniprintf>
  va_end(args);
  uart_print(buffer);
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffbc 	bl	8001ce8 <uart_print>
}
 8001d70:	bf00      	nop
 8001d72:	3788      	adds	r7, #136	@ 0x88
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d7a:	b004      	add	sp, #16
 8001d7c:	4770      	bx	lr

08001d7e <_vsniprintf_r>:
 8001d7e:	b530      	push	{r4, r5, lr}
 8001d80:	4614      	mov	r4, r2
 8001d82:	2c00      	cmp	r4, #0
 8001d84:	4605      	mov	r5, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	b09b      	sub	sp, #108	@ 0x6c
 8001d8a:	da05      	bge.n	8001d98 <_vsniprintf_r+0x1a>
 8001d8c:	238b      	movs	r3, #139	@ 0x8b
 8001d8e:	6003      	str	r3, [r0, #0]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	b01b      	add	sp, #108	@ 0x6c
 8001d96:	bd30      	pop	{r4, r5, pc}
 8001d98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001d9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001da0:	bf0c      	ite	eq
 8001da2:	4623      	moveq	r3, r4
 8001da4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	9305      	str	r3, [sp, #20]
 8001dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db0:	9100      	str	r1, [sp, #0]
 8001db2:	9104      	str	r1, [sp, #16]
 8001db4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001db8:	4669      	mov	r1, sp
 8001dba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001dbc:	f000 f99e 	bl	80020fc <_svfiprintf_r>
 8001dc0:	1c43      	adds	r3, r0, #1
 8001dc2:	bfbc      	itt	lt
 8001dc4:	238b      	movlt	r3, #139	@ 0x8b
 8001dc6:	602b      	strlt	r3, [r5, #0]
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d0e3      	beq.n	8001d94 <_vsniprintf_r+0x16>
 8001dcc:	2200      	movs	r2, #0
 8001dce:	9b00      	ldr	r3, [sp, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e7df      	b.n	8001d94 <_vsniprintf_r+0x16>

08001dd4 <vsniprintf>:
 8001dd4:	b507      	push	{r0, r1, r2, lr}
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	460a      	mov	r2, r1
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4803      	ldr	r0, [pc, #12]	@ (8001dec <vsniprintf+0x18>)
 8001de0:	6800      	ldr	r0, [r0, #0]
 8001de2:	f7ff ffcc 	bl	8001d7e <_vsniprintf_r>
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dec:	20000004 	.word	0x20000004

08001df0 <memset>:
 8001df0:	4603      	mov	r3, r0
 8001df2:	4402      	add	r2, r0
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d100      	bne.n	8001dfa <memset+0xa>
 8001df8:	4770      	bx	lr
 8001dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfe:	e7f9      	b.n	8001df4 <memset+0x4>

08001e00 <__errno>:
 8001e00:	4b01      	ldr	r3, [pc, #4]	@ (8001e08 <__errno+0x8>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000004 	.word	0x20000004

08001e0c <__libc_init_array>:
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	2600      	movs	r6, #0
 8001e10:	4d0c      	ldr	r5, [pc, #48]	@ (8001e44 <__libc_init_array+0x38>)
 8001e12:	4c0d      	ldr	r4, [pc, #52]	@ (8001e48 <__libc_init_array+0x3c>)
 8001e14:	1b64      	subs	r4, r4, r5
 8001e16:	10a4      	asrs	r4, r4, #2
 8001e18:	42a6      	cmp	r6, r4
 8001e1a:	d109      	bne.n	8001e30 <__libc_init_array+0x24>
 8001e1c:	f000 fc78 	bl	8002710 <_init>
 8001e20:	2600      	movs	r6, #0
 8001e22:	4d0a      	ldr	r5, [pc, #40]	@ (8001e4c <__libc_init_array+0x40>)
 8001e24:	4c0a      	ldr	r4, [pc, #40]	@ (8001e50 <__libc_init_array+0x44>)
 8001e26:	1b64      	subs	r4, r4, r5
 8001e28:	10a4      	asrs	r4, r4, #2
 8001e2a:	42a6      	cmp	r6, r4
 8001e2c:	d105      	bne.n	8001e3a <__libc_init_array+0x2e>
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e34:	4798      	blx	r3
 8001e36:	3601      	adds	r6, #1
 8001e38:	e7ee      	b.n	8001e18 <__libc_init_array+0xc>
 8001e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e3e:	4798      	blx	r3
 8001e40:	3601      	adds	r6, #1
 8001e42:	e7f2      	b.n	8001e2a <__libc_init_array+0x1e>
 8001e44:	08002960 	.word	0x08002960
 8001e48:	08002960 	.word	0x08002960
 8001e4c:	08002960 	.word	0x08002960
 8001e50:	08002964 	.word	0x08002964

08001e54 <__retarget_lock_acquire_recursive>:
 8001e54:	4770      	bx	lr

08001e56 <__retarget_lock_release_recursive>:
 8001e56:	4770      	bx	lr

08001e58 <_free_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d040      	beq.n	8001ee2 <_free_r+0x8a>
 8001e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e64:	1f0c      	subs	r4, r1, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bfb8      	it	lt
 8001e6a:	18e4      	addlt	r4, r4, r3
 8001e6c:	f000 f8de 	bl	800202c <__malloc_lock>
 8001e70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee4 <_free_r+0x8c>)
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	b933      	cbnz	r3, 8001e84 <_free_r+0x2c>
 8001e76:	6063      	str	r3, [r4, #4]
 8001e78:	6014      	str	r4, [r2, #0]
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e80:	f000 b8da 	b.w	8002038 <__malloc_unlock>
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	d908      	bls.n	8001e9a <_free_r+0x42>
 8001e88:	6820      	ldr	r0, [r4, #0]
 8001e8a:	1821      	adds	r1, r4, r0
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	bf01      	itttt	eq
 8001e90:	6819      	ldreq	r1, [r3, #0]
 8001e92:	685b      	ldreq	r3, [r3, #4]
 8001e94:	1809      	addeq	r1, r1, r0
 8001e96:	6021      	streq	r1, [r4, #0]
 8001e98:	e7ed      	b.n	8001e76 <_free_r+0x1e>
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	b10b      	cbz	r3, 8001ea4 <_free_r+0x4c>
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	d9fa      	bls.n	8001e9a <_free_r+0x42>
 8001ea4:	6811      	ldr	r1, [r2, #0]
 8001ea6:	1850      	adds	r0, r2, r1
 8001ea8:	42a0      	cmp	r0, r4
 8001eaa:	d10b      	bne.n	8001ec4 <_free_r+0x6c>
 8001eac:	6820      	ldr	r0, [r4, #0]
 8001eae:	4401      	add	r1, r0
 8001eb0:	1850      	adds	r0, r2, r1
 8001eb2:	4283      	cmp	r3, r0
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	d1e0      	bne.n	8001e7a <_free_r+0x22>
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4408      	add	r0, r1
 8001ebe:	6010      	str	r0, [r2, #0]
 8001ec0:	6053      	str	r3, [r2, #4]
 8001ec2:	e7da      	b.n	8001e7a <_free_r+0x22>
 8001ec4:	d902      	bls.n	8001ecc <_free_r+0x74>
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	602b      	str	r3, [r5, #0]
 8001eca:	e7d6      	b.n	8001e7a <_free_r+0x22>
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	1821      	adds	r1, r4, r0
 8001ed0:	428b      	cmp	r3, r1
 8001ed2:	bf01      	itttt	eq
 8001ed4:	6819      	ldreq	r1, [r3, #0]
 8001ed6:	685b      	ldreq	r3, [r3, #4]
 8001ed8:	1809      	addeq	r1, r1, r0
 8001eda:	6021      	streq	r1, [r4, #0]
 8001edc:	6063      	str	r3, [r4, #4]
 8001ede:	6054      	str	r4, [r2, #4]
 8001ee0:	e7cb      	b.n	8001e7a <_free_r+0x22>
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	200001c4 	.word	0x200001c4

08001ee8 <sbrk_aligned>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	4e0f      	ldr	r6, [pc, #60]	@ (8001f28 <sbrk_aligned+0x40>)
 8001eec:	460c      	mov	r4, r1
 8001eee:	6831      	ldr	r1, [r6, #0]
 8001ef0:	4605      	mov	r5, r0
 8001ef2:	b911      	cbnz	r1, 8001efa <sbrk_aligned+0x12>
 8001ef4:	f000 fbaa 	bl	800264c <_sbrk_r>
 8001ef8:	6030      	str	r0, [r6, #0]
 8001efa:	4621      	mov	r1, r4
 8001efc:	4628      	mov	r0, r5
 8001efe:	f000 fba5 	bl	800264c <_sbrk_r>
 8001f02:	1c43      	adds	r3, r0, #1
 8001f04:	d103      	bne.n	8001f0e <sbrk_aligned+0x26>
 8001f06:	f04f 34ff 	mov.w	r4, #4294967295
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
 8001f0e:	1cc4      	adds	r4, r0, #3
 8001f10:	f024 0403 	bic.w	r4, r4, #3
 8001f14:	42a0      	cmp	r0, r4
 8001f16:	d0f8      	beq.n	8001f0a <sbrk_aligned+0x22>
 8001f18:	1a21      	subs	r1, r4, r0
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f000 fb96 	bl	800264c <_sbrk_r>
 8001f20:	3001      	adds	r0, #1
 8001f22:	d1f2      	bne.n	8001f0a <sbrk_aligned+0x22>
 8001f24:	e7ef      	b.n	8001f06 <sbrk_aligned+0x1e>
 8001f26:	bf00      	nop
 8001f28:	200001c0 	.word	0x200001c0

08001f2c <_malloc_r>:
 8001f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f30:	1ccd      	adds	r5, r1, #3
 8001f32:	f025 0503 	bic.w	r5, r5, #3
 8001f36:	3508      	adds	r5, #8
 8001f38:	2d0c      	cmp	r5, #12
 8001f3a:	bf38      	it	cc
 8001f3c:	250c      	movcc	r5, #12
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	4606      	mov	r6, r0
 8001f42:	db01      	blt.n	8001f48 <_malloc_r+0x1c>
 8001f44:	42a9      	cmp	r1, r5
 8001f46:	d904      	bls.n	8001f52 <_malloc_r+0x26>
 8001f48:	230c      	movs	r3, #12
 8001f4a:	6033      	str	r3, [r6, #0]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002028 <_malloc_r+0xfc>
 8001f56:	f000 f869 	bl	800202c <__malloc_lock>
 8001f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8001f5e:	461c      	mov	r4, r3
 8001f60:	bb44      	cbnz	r4, 8001fb4 <_malloc_r+0x88>
 8001f62:	4629      	mov	r1, r5
 8001f64:	4630      	mov	r0, r6
 8001f66:	f7ff ffbf 	bl	8001ee8 <sbrk_aligned>
 8001f6a:	1c43      	adds	r3, r0, #1
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	d158      	bne.n	8002022 <_malloc_r+0xf6>
 8001f70:	f8d8 4000 	ldr.w	r4, [r8]
 8001f74:	4627      	mov	r7, r4
 8001f76:	2f00      	cmp	r7, #0
 8001f78:	d143      	bne.n	8002002 <_malloc_r+0xd6>
 8001f7a:	2c00      	cmp	r4, #0
 8001f7c:	d04b      	beq.n	8002016 <_malloc_r+0xea>
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	4639      	mov	r1, r7
 8001f82:	4630      	mov	r0, r6
 8001f84:	eb04 0903 	add.w	r9, r4, r3
 8001f88:	f000 fb60 	bl	800264c <_sbrk_r>
 8001f8c:	4581      	cmp	r9, r0
 8001f8e:	d142      	bne.n	8002016 <_malloc_r+0xea>
 8001f90:	6821      	ldr	r1, [r4, #0]
 8001f92:	4630      	mov	r0, r6
 8001f94:	1a6d      	subs	r5, r5, r1
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7ff ffa6 	bl	8001ee8 <sbrk_aligned>
 8001f9c:	3001      	adds	r0, #1
 8001f9e:	d03a      	beq.n	8002016 <_malloc_r+0xea>
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	442b      	add	r3, r5
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	bb62      	cbnz	r2, 8002008 <_malloc_r+0xdc>
 8001fae:	f8c8 7000 	str.w	r7, [r8]
 8001fb2:	e00f      	b.n	8001fd4 <_malloc_r+0xa8>
 8001fb4:	6822      	ldr	r2, [r4, #0]
 8001fb6:	1b52      	subs	r2, r2, r5
 8001fb8:	d420      	bmi.n	8001ffc <_malloc_r+0xd0>
 8001fba:	2a0b      	cmp	r2, #11
 8001fbc:	d917      	bls.n	8001fee <_malloc_r+0xc2>
 8001fbe:	1961      	adds	r1, r4, r5
 8001fc0:	42a3      	cmp	r3, r4
 8001fc2:	6025      	str	r5, [r4, #0]
 8001fc4:	bf18      	it	ne
 8001fc6:	6059      	strne	r1, [r3, #4]
 8001fc8:	6863      	ldr	r3, [r4, #4]
 8001fca:	bf08      	it	eq
 8001fcc:	f8c8 1000 	streq.w	r1, [r8]
 8001fd0:	5162      	str	r2, [r4, r5]
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	f000 f82f 	bl	8002038 <__malloc_unlock>
 8001fda:	f104 000b 	add.w	r0, r4, #11
 8001fde:	1d23      	adds	r3, r4, #4
 8001fe0:	f020 0007 	bic.w	r0, r0, #7
 8001fe4:	1ac2      	subs	r2, r0, r3
 8001fe6:	bf1c      	itt	ne
 8001fe8:	1a1b      	subne	r3, r3, r0
 8001fea:	50a3      	strne	r3, [r4, r2]
 8001fec:	e7af      	b.n	8001f4e <_malloc_r+0x22>
 8001fee:	6862      	ldr	r2, [r4, #4]
 8001ff0:	42a3      	cmp	r3, r4
 8001ff2:	bf0c      	ite	eq
 8001ff4:	f8c8 2000 	streq.w	r2, [r8]
 8001ff8:	605a      	strne	r2, [r3, #4]
 8001ffa:	e7eb      	b.n	8001fd4 <_malloc_r+0xa8>
 8001ffc:	4623      	mov	r3, r4
 8001ffe:	6864      	ldr	r4, [r4, #4]
 8002000:	e7ae      	b.n	8001f60 <_malloc_r+0x34>
 8002002:	463c      	mov	r4, r7
 8002004:	687f      	ldr	r7, [r7, #4]
 8002006:	e7b6      	b.n	8001f76 <_malloc_r+0x4a>
 8002008:	461a      	mov	r2, r3
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	42a3      	cmp	r3, r4
 800200e:	d1fb      	bne.n	8002008 <_malloc_r+0xdc>
 8002010:	2300      	movs	r3, #0
 8002012:	6053      	str	r3, [r2, #4]
 8002014:	e7de      	b.n	8001fd4 <_malloc_r+0xa8>
 8002016:	230c      	movs	r3, #12
 8002018:	4630      	mov	r0, r6
 800201a:	6033      	str	r3, [r6, #0]
 800201c:	f000 f80c 	bl	8002038 <__malloc_unlock>
 8002020:	e794      	b.n	8001f4c <_malloc_r+0x20>
 8002022:	6005      	str	r5, [r0, #0]
 8002024:	e7d6      	b.n	8001fd4 <_malloc_r+0xa8>
 8002026:	bf00      	nop
 8002028:	200001c4 	.word	0x200001c4

0800202c <__malloc_lock>:
 800202c:	4801      	ldr	r0, [pc, #4]	@ (8002034 <__malloc_lock+0x8>)
 800202e:	f7ff bf11 	b.w	8001e54 <__retarget_lock_acquire_recursive>
 8002032:	bf00      	nop
 8002034:	200001bc 	.word	0x200001bc

08002038 <__malloc_unlock>:
 8002038:	4801      	ldr	r0, [pc, #4]	@ (8002040 <__malloc_unlock+0x8>)
 800203a:	f7ff bf0c 	b.w	8001e56 <__retarget_lock_release_recursive>
 800203e:	bf00      	nop
 8002040:	200001bc 	.word	0x200001bc

08002044 <__ssputs_r>:
 8002044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002048:	461f      	mov	r7, r3
 800204a:	688e      	ldr	r6, [r1, #8]
 800204c:	4682      	mov	sl, r0
 800204e:	42be      	cmp	r6, r7
 8002050:	460c      	mov	r4, r1
 8002052:	4690      	mov	r8, r2
 8002054:	680b      	ldr	r3, [r1, #0]
 8002056:	d82d      	bhi.n	80020b4 <__ssputs_r+0x70>
 8002058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800205c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002060:	d026      	beq.n	80020b0 <__ssputs_r+0x6c>
 8002062:	6965      	ldr	r5, [r4, #20]
 8002064:	6909      	ldr	r1, [r1, #16]
 8002066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800206a:	eba3 0901 	sub.w	r9, r3, r1
 800206e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002072:	1c7b      	adds	r3, r7, #1
 8002074:	444b      	add	r3, r9
 8002076:	106d      	asrs	r5, r5, #1
 8002078:	429d      	cmp	r5, r3
 800207a:	bf38      	it	cc
 800207c:	461d      	movcc	r5, r3
 800207e:	0553      	lsls	r3, r2, #21
 8002080:	d527      	bpl.n	80020d2 <__ssputs_r+0x8e>
 8002082:	4629      	mov	r1, r5
 8002084:	f7ff ff52 	bl	8001f2c <_malloc_r>
 8002088:	4606      	mov	r6, r0
 800208a:	b360      	cbz	r0, 80020e6 <__ssputs_r+0xa2>
 800208c:	464a      	mov	r2, r9
 800208e:	6921      	ldr	r1, [r4, #16]
 8002090:	f000 fafa 	bl	8002688 <memcpy>
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800209a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800209e:	81a3      	strh	r3, [r4, #12]
 80020a0:	6126      	str	r6, [r4, #16]
 80020a2:	444e      	add	r6, r9
 80020a4:	6026      	str	r6, [r4, #0]
 80020a6:	463e      	mov	r6, r7
 80020a8:	6165      	str	r5, [r4, #20]
 80020aa:	eba5 0509 	sub.w	r5, r5, r9
 80020ae:	60a5      	str	r5, [r4, #8]
 80020b0:	42be      	cmp	r6, r7
 80020b2:	d900      	bls.n	80020b6 <__ssputs_r+0x72>
 80020b4:	463e      	mov	r6, r7
 80020b6:	4632      	mov	r2, r6
 80020b8:	4641      	mov	r1, r8
 80020ba:	6820      	ldr	r0, [r4, #0]
 80020bc:	f000 faac 	bl	8002618 <memmove>
 80020c0:	2000      	movs	r0, #0
 80020c2:	68a3      	ldr	r3, [r4, #8]
 80020c4:	1b9b      	subs	r3, r3, r6
 80020c6:	60a3      	str	r3, [r4, #8]
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	4433      	add	r3, r6
 80020cc:	6023      	str	r3, [r4, #0]
 80020ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d2:	462a      	mov	r2, r5
 80020d4:	f000 fae6 	bl	80026a4 <_realloc_r>
 80020d8:	4606      	mov	r6, r0
 80020da:	2800      	cmp	r0, #0
 80020dc:	d1e0      	bne.n	80020a0 <__ssputs_r+0x5c>
 80020de:	4650      	mov	r0, sl
 80020e0:	6921      	ldr	r1, [r4, #16]
 80020e2:	f7ff feb9 	bl	8001e58 <_free_r>
 80020e6:	230c      	movs	r3, #12
 80020e8:	f8ca 3000 	str.w	r3, [sl]
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	f04f 30ff 	mov.w	r0, #4294967295
 80020f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f6:	81a3      	strh	r3, [r4, #12]
 80020f8:	e7e9      	b.n	80020ce <__ssputs_r+0x8a>
	...

080020fc <_svfiprintf_r>:
 80020fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002100:	4698      	mov	r8, r3
 8002102:	898b      	ldrh	r3, [r1, #12]
 8002104:	4607      	mov	r7, r0
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	460d      	mov	r5, r1
 800210a:	4614      	mov	r4, r2
 800210c:	b09d      	sub	sp, #116	@ 0x74
 800210e:	d510      	bpl.n	8002132 <_svfiprintf_r+0x36>
 8002110:	690b      	ldr	r3, [r1, #16]
 8002112:	b973      	cbnz	r3, 8002132 <_svfiprintf_r+0x36>
 8002114:	2140      	movs	r1, #64	@ 0x40
 8002116:	f7ff ff09 	bl	8001f2c <_malloc_r>
 800211a:	6028      	str	r0, [r5, #0]
 800211c:	6128      	str	r0, [r5, #16]
 800211e:	b930      	cbnz	r0, 800212e <_svfiprintf_r+0x32>
 8002120:	230c      	movs	r3, #12
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	b01d      	add	sp, #116	@ 0x74
 800212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800212e:	2340      	movs	r3, #64	@ 0x40
 8002130:	616b      	str	r3, [r5, #20]
 8002132:	2300      	movs	r3, #0
 8002134:	9309      	str	r3, [sp, #36]	@ 0x24
 8002136:	2320      	movs	r3, #32
 8002138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800213c:	2330      	movs	r3, #48	@ 0x30
 800213e:	f04f 0901 	mov.w	r9, #1
 8002142:	f8cd 800c 	str.w	r8, [sp, #12]
 8002146:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80022e0 <_svfiprintf_r+0x1e4>
 800214a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800214e:	4623      	mov	r3, r4
 8002150:	469a      	mov	sl, r3
 8002152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002156:	b10a      	cbz	r2, 800215c <_svfiprintf_r+0x60>
 8002158:	2a25      	cmp	r2, #37	@ 0x25
 800215a:	d1f9      	bne.n	8002150 <_svfiprintf_r+0x54>
 800215c:	ebba 0b04 	subs.w	fp, sl, r4
 8002160:	d00b      	beq.n	800217a <_svfiprintf_r+0x7e>
 8002162:	465b      	mov	r3, fp
 8002164:	4622      	mov	r2, r4
 8002166:	4629      	mov	r1, r5
 8002168:	4638      	mov	r0, r7
 800216a:	f7ff ff6b 	bl	8002044 <__ssputs_r>
 800216e:	3001      	adds	r0, #1
 8002170:	f000 80a7 	beq.w	80022c2 <_svfiprintf_r+0x1c6>
 8002174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002176:	445a      	add	r2, fp
 8002178:	9209      	str	r2, [sp, #36]	@ 0x24
 800217a:	f89a 3000 	ldrb.w	r3, [sl]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 809f 	beq.w	80022c2 <_svfiprintf_r+0x1c6>
 8002184:	2300      	movs	r3, #0
 8002186:	f04f 32ff 	mov.w	r2, #4294967295
 800218a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800218e:	f10a 0a01 	add.w	sl, sl, #1
 8002192:	9304      	str	r3, [sp, #16]
 8002194:	9307      	str	r3, [sp, #28]
 8002196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800219a:	931a      	str	r3, [sp, #104]	@ 0x68
 800219c:	4654      	mov	r4, sl
 800219e:	2205      	movs	r2, #5
 80021a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021a4:	484e      	ldr	r0, [pc, #312]	@ (80022e0 <_svfiprintf_r+0x1e4>)
 80021a6:	f000 fa61 	bl	800266c <memchr>
 80021aa:	9a04      	ldr	r2, [sp, #16]
 80021ac:	b9d8      	cbnz	r0, 80021e6 <_svfiprintf_r+0xea>
 80021ae:	06d0      	lsls	r0, r2, #27
 80021b0:	bf44      	itt	mi
 80021b2:	2320      	movmi	r3, #32
 80021b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021b8:	0711      	lsls	r1, r2, #28
 80021ba:	bf44      	itt	mi
 80021bc:	232b      	movmi	r3, #43	@ 0x2b
 80021be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021c2:	f89a 3000 	ldrb.w	r3, [sl]
 80021c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80021c8:	d015      	beq.n	80021f6 <_svfiprintf_r+0xfa>
 80021ca:	4654      	mov	r4, sl
 80021cc:	2000      	movs	r0, #0
 80021ce:	f04f 0c0a 	mov.w	ip, #10
 80021d2:	9a07      	ldr	r2, [sp, #28]
 80021d4:	4621      	mov	r1, r4
 80021d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021da:	3b30      	subs	r3, #48	@ 0x30
 80021dc:	2b09      	cmp	r3, #9
 80021de:	d94b      	bls.n	8002278 <_svfiprintf_r+0x17c>
 80021e0:	b1b0      	cbz	r0, 8002210 <_svfiprintf_r+0x114>
 80021e2:	9207      	str	r2, [sp, #28]
 80021e4:	e014      	b.n	8002210 <_svfiprintf_r+0x114>
 80021e6:	eba0 0308 	sub.w	r3, r0, r8
 80021ea:	fa09 f303 	lsl.w	r3, r9, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	46a2      	mov	sl, r4
 80021f2:	9304      	str	r3, [sp, #16]
 80021f4:	e7d2      	b.n	800219c <_svfiprintf_r+0xa0>
 80021f6:	9b03      	ldr	r3, [sp, #12]
 80021f8:	1d19      	adds	r1, r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	9103      	str	r1, [sp, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bfbb      	ittet	lt
 8002202:	425b      	neglt	r3, r3
 8002204:	f042 0202 	orrlt.w	r2, r2, #2
 8002208:	9307      	strge	r3, [sp, #28]
 800220a:	9307      	strlt	r3, [sp, #28]
 800220c:	bfb8      	it	lt
 800220e:	9204      	strlt	r2, [sp, #16]
 8002210:	7823      	ldrb	r3, [r4, #0]
 8002212:	2b2e      	cmp	r3, #46	@ 0x2e
 8002214:	d10a      	bne.n	800222c <_svfiprintf_r+0x130>
 8002216:	7863      	ldrb	r3, [r4, #1]
 8002218:	2b2a      	cmp	r3, #42	@ 0x2a
 800221a:	d132      	bne.n	8002282 <_svfiprintf_r+0x186>
 800221c:	9b03      	ldr	r3, [sp, #12]
 800221e:	3402      	adds	r4, #2
 8002220:	1d1a      	adds	r2, r3, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	9203      	str	r2, [sp, #12]
 8002226:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800222a:	9305      	str	r3, [sp, #20]
 800222c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80022e4 <_svfiprintf_r+0x1e8>
 8002230:	2203      	movs	r2, #3
 8002232:	4650      	mov	r0, sl
 8002234:	7821      	ldrb	r1, [r4, #0]
 8002236:	f000 fa19 	bl	800266c <memchr>
 800223a:	b138      	cbz	r0, 800224c <_svfiprintf_r+0x150>
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	9b04      	ldr	r3, [sp, #16]
 8002240:	eba0 000a 	sub.w	r0, r0, sl
 8002244:	4082      	lsls	r2, r0
 8002246:	4313      	orrs	r3, r2
 8002248:	3401      	adds	r4, #1
 800224a:	9304      	str	r3, [sp, #16]
 800224c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002250:	2206      	movs	r2, #6
 8002252:	4825      	ldr	r0, [pc, #148]	@ (80022e8 <_svfiprintf_r+0x1ec>)
 8002254:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002258:	f000 fa08 	bl	800266c <memchr>
 800225c:	2800      	cmp	r0, #0
 800225e:	d036      	beq.n	80022ce <_svfiprintf_r+0x1d2>
 8002260:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <_svfiprintf_r+0x1f0>)
 8002262:	bb1b      	cbnz	r3, 80022ac <_svfiprintf_r+0x1b0>
 8002264:	9b03      	ldr	r3, [sp, #12]
 8002266:	3307      	adds	r3, #7
 8002268:	f023 0307 	bic.w	r3, r3, #7
 800226c:	3308      	adds	r3, #8
 800226e:	9303      	str	r3, [sp, #12]
 8002270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002272:	4433      	add	r3, r6
 8002274:	9309      	str	r3, [sp, #36]	@ 0x24
 8002276:	e76a      	b.n	800214e <_svfiprintf_r+0x52>
 8002278:	460c      	mov	r4, r1
 800227a:	2001      	movs	r0, #1
 800227c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002280:	e7a8      	b.n	80021d4 <_svfiprintf_r+0xd8>
 8002282:	2300      	movs	r3, #0
 8002284:	f04f 0c0a 	mov.w	ip, #10
 8002288:	4619      	mov	r1, r3
 800228a:	3401      	adds	r4, #1
 800228c:	9305      	str	r3, [sp, #20]
 800228e:	4620      	mov	r0, r4
 8002290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002294:	3a30      	subs	r2, #48	@ 0x30
 8002296:	2a09      	cmp	r2, #9
 8002298:	d903      	bls.n	80022a2 <_svfiprintf_r+0x1a6>
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0c6      	beq.n	800222c <_svfiprintf_r+0x130>
 800229e:	9105      	str	r1, [sp, #20]
 80022a0:	e7c4      	b.n	800222c <_svfiprintf_r+0x130>
 80022a2:	4604      	mov	r4, r0
 80022a4:	2301      	movs	r3, #1
 80022a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80022aa:	e7f0      	b.n	800228e <_svfiprintf_r+0x192>
 80022ac:	ab03      	add	r3, sp, #12
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	462a      	mov	r2, r5
 80022b2:	4638      	mov	r0, r7
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <_svfiprintf_r+0x1f4>)
 80022b6:	a904      	add	r1, sp, #16
 80022b8:	f3af 8000 	nop.w
 80022bc:	1c42      	adds	r2, r0, #1
 80022be:	4606      	mov	r6, r0
 80022c0:	d1d6      	bne.n	8002270 <_svfiprintf_r+0x174>
 80022c2:	89ab      	ldrh	r3, [r5, #12]
 80022c4:	065b      	lsls	r3, r3, #25
 80022c6:	f53f af2d 	bmi.w	8002124 <_svfiprintf_r+0x28>
 80022ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80022cc:	e72c      	b.n	8002128 <_svfiprintf_r+0x2c>
 80022ce:	ab03      	add	r3, sp, #12
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	462a      	mov	r2, r5
 80022d4:	4638      	mov	r0, r7
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <_svfiprintf_r+0x1f4>)
 80022d8:	a904      	add	r1, sp, #16
 80022da:	f000 f87d 	bl	80023d8 <_printf_i>
 80022de:	e7ed      	b.n	80022bc <_svfiprintf_r+0x1c0>
 80022e0:	08002924 	.word	0x08002924
 80022e4:	0800292a 	.word	0x0800292a
 80022e8:	0800292e 	.word	0x0800292e
 80022ec:	00000000 	.word	0x00000000
 80022f0:	08002045 	.word	0x08002045

080022f4 <_printf_common>:
 80022f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022f8:	4616      	mov	r6, r2
 80022fa:	4698      	mov	r8, r3
 80022fc:	688a      	ldr	r2, [r1, #8]
 80022fe:	690b      	ldr	r3, [r1, #16]
 8002300:	4607      	mov	r7, r0
 8002302:	4293      	cmp	r3, r2
 8002304:	bfb8      	it	lt
 8002306:	4613      	movlt	r3, r2
 8002308:	6033      	str	r3, [r6, #0]
 800230a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800230e:	460c      	mov	r4, r1
 8002310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002314:	b10a      	cbz	r2, 800231a <_printf_common+0x26>
 8002316:	3301      	adds	r3, #1
 8002318:	6033      	str	r3, [r6, #0]
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	0699      	lsls	r1, r3, #26
 800231e:	bf42      	ittt	mi
 8002320:	6833      	ldrmi	r3, [r6, #0]
 8002322:	3302      	addmi	r3, #2
 8002324:	6033      	strmi	r3, [r6, #0]
 8002326:	6825      	ldr	r5, [r4, #0]
 8002328:	f015 0506 	ands.w	r5, r5, #6
 800232c:	d106      	bne.n	800233c <_printf_common+0x48>
 800232e:	f104 0a19 	add.w	sl, r4, #25
 8002332:	68e3      	ldr	r3, [r4, #12]
 8002334:	6832      	ldr	r2, [r6, #0]
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	42ab      	cmp	r3, r5
 800233a:	dc2b      	bgt.n	8002394 <_printf_common+0xa0>
 800233c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	3b00      	subs	r3, #0
 8002344:	bf18      	it	ne
 8002346:	2301      	movne	r3, #1
 8002348:	0692      	lsls	r2, r2, #26
 800234a:	d430      	bmi.n	80023ae <_printf_common+0xba>
 800234c:	4641      	mov	r1, r8
 800234e:	4638      	mov	r0, r7
 8002350:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002354:	47c8      	blx	r9
 8002356:	3001      	adds	r0, #1
 8002358:	d023      	beq.n	80023a2 <_printf_common+0xae>
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	6922      	ldr	r2, [r4, #16]
 800235e:	f003 0306 	and.w	r3, r3, #6
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf14      	ite	ne
 8002366:	2500      	movne	r5, #0
 8002368:	6833      	ldreq	r3, [r6, #0]
 800236a:	f04f 0600 	mov.w	r6, #0
 800236e:	bf08      	it	eq
 8002370:	68e5      	ldreq	r5, [r4, #12]
 8002372:	f104 041a 	add.w	r4, r4, #26
 8002376:	bf08      	it	eq
 8002378:	1aed      	subeq	r5, r5, r3
 800237a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800237e:	bf08      	it	eq
 8002380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002384:	4293      	cmp	r3, r2
 8002386:	bfc4      	itt	gt
 8002388:	1a9b      	subgt	r3, r3, r2
 800238a:	18ed      	addgt	r5, r5, r3
 800238c:	42b5      	cmp	r5, r6
 800238e:	d11a      	bne.n	80023c6 <_printf_common+0xd2>
 8002390:	2000      	movs	r0, #0
 8002392:	e008      	b.n	80023a6 <_printf_common+0xb2>
 8002394:	2301      	movs	r3, #1
 8002396:	4652      	mov	r2, sl
 8002398:	4641      	mov	r1, r8
 800239a:	4638      	mov	r0, r7
 800239c:	47c8      	blx	r9
 800239e:	3001      	adds	r0, #1
 80023a0:	d103      	bne.n	80023aa <_printf_common+0xb6>
 80023a2:	f04f 30ff 	mov.w	r0, #4294967295
 80023a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023aa:	3501      	adds	r5, #1
 80023ac:	e7c1      	b.n	8002332 <_printf_common+0x3e>
 80023ae:	2030      	movs	r0, #48	@ 0x30
 80023b0:	18e1      	adds	r1, r4, r3
 80023b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023bc:	4422      	add	r2, r4
 80023be:	3302      	adds	r3, #2
 80023c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023c4:	e7c2      	b.n	800234c <_printf_common+0x58>
 80023c6:	2301      	movs	r3, #1
 80023c8:	4622      	mov	r2, r4
 80023ca:	4641      	mov	r1, r8
 80023cc:	4638      	mov	r0, r7
 80023ce:	47c8      	blx	r9
 80023d0:	3001      	adds	r0, #1
 80023d2:	d0e6      	beq.n	80023a2 <_printf_common+0xae>
 80023d4:	3601      	adds	r6, #1
 80023d6:	e7d9      	b.n	800238c <_printf_common+0x98>

080023d8 <_printf_i>:
 80023d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023dc:	7e0f      	ldrb	r7, [r1, #24]
 80023de:	4691      	mov	r9, r2
 80023e0:	2f78      	cmp	r7, #120	@ 0x78
 80023e2:	4680      	mov	r8, r0
 80023e4:	460c      	mov	r4, r1
 80023e6:	469a      	mov	sl, r3
 80023e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80023ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80023ee:	d807      	bhi.n	8002400 <_printf_i+0x28>
 80023f0:	2f62      	cmp	r7, #98	@ 0x62
 80023f2:	d80a      	bhi.n	800240a <_printf_i+0x32>
 80023f4:	2f00      	cmp	r7, #0
 80023f6:	f000 80d3 	beq.w	80025a0 <_printf_i+0x1c8>
 80023fa:	2f58      	cmp	r7, #88	@ 0x58
 80023fc:	f000 80ba 	beq.w	8002574 <_printf_i+0x19c>
 8002400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002408:	e03a      	b.n	8002480 <_printf_i+0xa8>
 800240a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800240e:	2b15      	cmp	r3, #21
 8002410:	d8f6      	bhi.n	8002400 <_printf_i+0x28>
 8002412:	a101      	add	r1, pc, #4	@ (adr r1, 8002418 <_printf_i+0x40>)
 8002414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002418:	08002471 	.word	0x08002471
 800241c:	08002485 	.word	0x08002485
 8002420:	08002401 	.word	0x08002401
 8002424:	08002401 	.word	0x08002401
 8002428:	08002401 	.word	0x08002401
 800242c:	08002401 	.word	0x08002401
 8002430:	08002485 	.word	0x08002485
 8002434:	08002401 	.word	0x08002401
 8002438:	08002401 	.word	0x08002401
 800243c:	08002401 	.word	0x08002401
 8002440:	08002401 	.word	0x08002401
 8002444:	08002587 	.word	0x08002587
 8002448:	080024af 	.word	0x080024af
 800244c:	08002541 	.word	0x08002541
 8002450:	08002401 	.word	0x08002401
 8002454:	08002401 	.word	0x08002401
 8002458:	080025a9 	.word	0x080025a9
 800245c:	08002401 	.word	0x08002401
 8002460:	080024af 	.word	0x080024af
 8002464:	08002401 	.word	0x08002401
 8002468:	08002401 	.word	0x08002401
 800246c:	08002549 	.word	0x08002549
 8002470:	6833      	ldr	r3, [r6, #0]
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6032      	str	r2, [r6, #0]
 8002478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800247c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002480:	2301      	movs	r3, #1
 8002482:	e09e      	b.n	80025c2 <_printf_i+0x1ea>
 8002484:	6833      	ldr	r3, [r6, #0]
 8002486:	6820      	ldr	r0, [r4, #0]
 8002488:	1d19      	adds	r1, r3, #4
 800248a:	6031      	str	r1, [r6, #0]
 800248c:	0606      	lsls	r6, r0, #24
 800248e:	d501      	bpl.n	8002494 <_printf_i+0xbc>
 8002490:	681d      	ldr	r5, [r3, #0]
 8002492:	e003      	b.n	800249c <_printf_i+0xc4>
 8002494:	0645      	lsls	r5, r0, #25
 8002496:	d5fb      	bpl.n	8002490 <_printf_i+0xb8>
 8002498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800249c:	2d00      	cmp	r5, #0
 800249e:	da03      	bge.n	80024a8 <_printf_i+0xd0>
 80024a0:	232d      	movs	r3, #45	@ 0x2d
 80024a2:	426d      	negs	r5, r5
 80024a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024a8:	230a      	movs	r3, #10
 80024aa:	4859      	ldr	r0, [pc, #356]	@ (8002610 <_printf_i+0x238>)
 80024ac:	e011      	b.n	80024d2 <_printf_i+0xfa>
 80024ae:	6821      	ldr	r1, [r4, #0]
 80024b0:	6833      	ldr	r3, [r6, #0]
 80024b2:	0608      	lsls	r0, r1, #24
 80024b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80024b8:	d402      	bmi.n	80024c0 <_printf_i+0xe8>
 80024ba:	0649      	lsls	r1, r1, #25
 80024bc:	bf48      	it	mi
 80024be:	b2ad      	uxthmi	r5, r5
 80024c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80024c2:	6033      	str	r3, [r6, #0]
 80024c4:	bf14      	ite	ne
 80024c6:	230a      	movne	r3, #10
 80024c8:	2308      	moveq	r3, #8
 80024ca:	4851      	ldr	r0, [pc, #324]	@ (8002610 <_printf_i+0x238>)
 80024cc:	2100      	movs	r1, #0
 80024ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80024d2:	6866      	ldr	r6, [r4, #4]
 80024d4:	2e00      	cmp	r6, #0
 80024d6:	bfa8      	it	ge
 80024d8:	6821      	ldrge	r1, [r4, #0]
 80024da:	60a6      	str	r6, [r4, #8]
 80024dc:	bfa4      	itt	ge
 80024de:	f021 0104 	bicge.w	r1, r1, #4
 80024e2:	6021      	strge	r1, [r4, #0]
 80024e4:	b90d      	cbnz	r5, 80024ea <_printf_i+0x112>
 80024e6:	2e00      	cmp	r6, #0
 80024e8:	d04b      	beq.n	8002582 <_printf_i+0x1aa>
 80024ea:	4616      	mov	r6, r2
 80024ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80024f0:	fb03 5711 	mls	r7, r3, r1, r5
 80024f4:	5dc7      	ldrb	r7, [r0, r7]
 80024f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024fa:	462f      	mov	r7, r5
 80024fc:	42bb      	cmp	r3, r7
 80024fe:	460d      	mov	r5, r1
 8002500:	d9f4      	bls.n	80024ec <_printf_i+0x114>
 8002502:	2b08      	cmp	r3, #8
 8002504:	d10b      	bne.n	800251e <_printf_i+0x146>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	07df      	lsls	r7, r3, #31
 800250a:	d508      	bpl.n	800251e <_printf_i+0x146>
 800250c:	6923      	ldr	r3, [r4, #16]
 800250e:	6861      	ldr	r1, [r4, #4]
 8002510:	4299      	cmp	r1, r3
 8002512:	bfde      	ittt	le
 8002514:	2330      	movle	r3, #48	@ 0x30
 8002516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800251a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800251e:	1b92      	subs	r2, r2, r6
 8002520:	6122      	str	r2, [r4, #16]
 8002522:	464b      	mov	r3, r9
 8002524:	4621      	mov	r1, r4
 8002526:	4640      	mov	r0, r8
 8002528:	f8cd a000 	str.w	sl, [sp]
 800252c:	aa03      	add	r2, sp, #12
 800252e:	f7ff fee1 	bl	80022f4 <_printf_common>
 8002532:	3001      	adds	r0, #1
 8002534:	d14a      	bne.n	80025cc <_printf_i+0x1f4>
 8002536:	f04f 30ff 	mov.w	r0, #4294967295
 800253a:	b004      	add	sp, #16
 800253c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f043 0320 	orr.w	r3, r3, #32
 8002546:	6023      	str	r3, [r4, #0]
 8002548:	2778      	movs	r7, #120	@ 0x78
 800254a:	4832      	ldr	r0, [pc, #200]	@ (8002614 <_printf_i+0x23c>)
 800254c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	6831      	ldr	r1, [r6, #0]
 8002554:	061f      	lsls	r7, r3, #24
 8002556:	f851 5b04 	ldr.w	r5, [r1], #4
 800255a:	d402      	bmi.n	8002562 <_printf_i+0x18a>
 800255c:	065f      	lsls	r7, r3, #25
 800255e:	bf48      	it	mi
 8002560:	b2ad      	uxthmi	r5, r5
 8002562:	6031      	str	r1, [r6, #0]
 8002564:	07d9      	lsls	r1, r3, #31
 8002566:	bf44      	itt	mi
 8002568:	f043 0320 	orrmi.w	r3, r3, #32
 800256c:	6023      	strmi	r3, [r4, #0]
 800256e:	b11d      	cbz	r5, 8002578 <_printf_i+0x1a0>
 8002570:	2310      	movs	r3, #16
 8002572:	e7ab      	b.n	80024cc <_printf_i+0xf4>
 8002574:	4826      	ldr	r0, [pc, #152]	@ (8002610 <_printf_i+0x238>)
 8002576:	e7e9      	b.n	800254c <_printf_i+0x174>
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	f023 0320 	bic.w	r3, r3, #32
 800257e:	6023      	str	r3, [r4, #0]
 8002580:	e7f6      	b.n	8002570 <_printf_i+0x198>
 8002582:	4616      	mov	r6, r2
 8002584:	e7bd      	b.n	8002502 <_printf_i+0x12a>
 8002586:	6833      	ldr	r3, [r6, #0]
 8002588:	6825      	ldr	r5, [r4, #0]
 800258a:	1d18      	adds	r0, r3, #4
 800258c:	6961      	ldr	r1, [r4, #20]
 800258e:	6030      	str	r0, [r6, #0]
 8002590:	062e      	lsls	r6, r5, #24
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	d501      	bpl.n	800259a <_printf_i+0x1c2>
 8002596:	6019      	str	r1, [r3, #0]
 8002598:	e002      	b.n	80025a0 <_printf_i+0x1c8>
 800259a:	0668      	lsls	r0, r5, #25
 800259c:	d5fb      	bpl.n	8002596 <_printf_i+0x1be>
 800259e:	8019      	strh	r1, [r3, #0]
 80025a0:	2300      	movs	r3, #0
 80025a2:	4616      	mov	r6, r2
 80025a4:	6123      	str	r3, [r4, #16]
 80025a6:	e7bc      	b.n	8002522 <_printf_i+0x14a>
 80025a8:	6833      	ldr	r3, [r6, #0]
 80025aa:	2100      	movs	r1, #0
 80025ac:	1d1a      	adds	r2, r3, #4
 80025ae:	6032      	str	r2, [r6, #0]
 80025b0:	681e      	ldr	r6, [r3, #0]
 80025b2:	6862      	ldr	r2, [r4, #4]
 80025b4:	4630      	mov	r0, r6
 80025b6:	f000 f859 	bl	800266c <memchr>
 80025ba:	b108      	cbz	r0, 80025c0 <_printf_i+0x1e8>
 80025bc:	1b80      	subs	r0, r0, r6
 80025be:	6060      	str	r0, [r4, #4]
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	6123      	str	r3, [r4, #16]
 80025c4:	2300      	movs	r3, #0
 80025c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025ca:	e7aa      	b.n	8002522 <_printf_i+0x14a>
 80025cc:	4632      	mov	r2, r6
 80025ce:	4649      	mov	r1, r9
 80025d0:	4640      	mov	r0, r8
 80025d2:	6923      	ldr	r3, [r4, #16]
 80025d4:	47d0      	blx	sl
 80025d6:	3001      	adds	r0, #1
 80025d8:	d0ad      	beq.n	8002536 <_printf_i+0x15e>
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	079b      	lsls	r3, r3, #30
 80025de:	d413      	bmi.n	8002608 <_printf_i+0x230>
 80025e0:	68e0      	ldr	r0, [r4, #12]
 80025e2:	9b03      	ldr	r3, [sp, #12]
 80025e4:	4298      	cmp	r0, r3
 80025e6:	bfb8      	it	lt
 80025e8:	4618      	movlt	r0, r3
 80025ea:	e7a6      	b.n	800253a <_printf_i+0x162>
 80025ec:	2301      	movs	r3, #1
 80025ee:	4632      	mov	r2, r6
 80025f0:	4649      	mov	r1, r9
 80025f2:	4640      	mov	r0, r8
 80025f4:	47d0      	blx	sl
 80025f6:	3001      	adds	r0, #1
 80025f8:	d09d      	beq.n	8002536 <_printf_i+0x15e>
 80025fa:	3501      	adds	r5, #1
 80025fc:	68e3      	ldr	r3, [r4, #12]
 80025fe:	9903      	ldr	r1, [sp, #12]
 8002600:	1a5b      	subs	r3, r3, r1
 8002602:	42ab      	cmp	r3, r5
 8002604:	dcf2      	bgt.n	80025ec <_printf_i+0x214>
 8002606:	e7eb      	b.n	80025e0 <_printf_i+0x208>
 8002608:	2500      	movs	r5, #0
 800260a:	f104 0619 	add.w	r6, r4, #25
 800260e:	e7f5      	b.n	80025fc <_printf_i+0x224>
 8002610:	08002935 	.word	0x08002935
 8002614:	08002946 	.word	0x08002946

08002618 <memmove>:
 8002618:	4288      	cmp	r0, r1
 800261a:	b510      	push	{r4, lr}
 800261c:	eb01 0402 	add.w	r4, r1, r2
 8002620:	d902      	bls.n	8002628 <memmove+0x10>
 8002622:	4284      	cmp	r4, r0
 8002624:	4623      	mov	r3, r4
 8002626:	d807      	bhi.n	8002638 <memmove+0x20>
 8002628:	1e43      	subs	r3, r0, #1
 800262a:	42a1      	cmp	r1, r4
 800262c:	d008      	beq.n	8002640 <memmove+0x28>
 800262e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002636:	e7f8      	b.n	800262a <memmove+0x12>
 8002638:	4601      	mov	r1, r0
 800263a:	4402      	add	r2, r0
 800263c:	428a      	cmp	r2, r1
 800263e:	d100      	bne.n	8002642 <memmove+0x2a>
 8002640:	bd10      	pop	{r4, pc}
 8002642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800264a:	e7f7      	b.n	800263c <memmove+0x24>

0800264c <_sbrk_r>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	2300      	movs	r3, #0
 8002650:	4d05      	ldr	r5, [pc, #20]	@ (8002668 <_sbrk_r+0x1c>)
 8002652:	4604      	mov	r4, r0
 8002654:	4608      	mov	r0, r1
 8002656:	602b      	str	r3, [r5, #0]
 8002658:	f7fe fa60 	bl	8000b1c <_sbrk>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d102      	bne.n	8002666 <_sbrk_r+0x1a>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	b103      	cbz	r3, 8002666 <_sbrk_r+0x1a>
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	200001b8 	.word	0x200001b8

0800266c <memchr>:
 800266c:	4603      	mov	r3, r0
 800266e:	b510      	push	{r4, lr}
 8002670:	b2c9      	uxtb	r1, r1
 8002672:	4402      	add	r2, r0
 8002674:	4293      	cmp	r3, r2
 8002676:	4618      	mov	r0, r3
 8002678:	d101      	bne.n	800267e <memchr+0x12>
 800267a:	2000      	movs	r0, #0
 800267c:	e003      	b.n	8002686 <memchr+0x1a>
 800267e:	7804      	ldrb	r4, [r0, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	428c      	cmp	r4, r1
 8002684:	d1f6      	bne.n	8002674 <memchr+0x8>
 8002686:	bd10      	pop	{r4, pc}

08002688 <memcpy>:
 8002688:	440a      	add	r2, r1
 800268a:	4291      	cmp	r1, r2
 800268c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002690:	d100      	bne.n	8002694 <memcpy+0xc>
 8002692:	4770      	bx	lr
 8002694:	b510      	push	{r4, lr}
 8002696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800269a:	4291      	cmp	r1, r2
 800269c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026a0:	d1f9      	bne.n	8002696 <memcpy+0xe>
 80026a2:	bd10      	pop	{r4, pc}

080026a4 <_realloc_r>:
 80026a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a8:	4680      	mov	r8, r0
 80026aa:	4615      	mov	r5, r2
 80026ac:	460c      	mov	r4, r1
 80026ae:	b921      	cbnz	r1, 80026ba <_realloc_r+0x16>
 80026b0:	4611      	mov	r1, r2
 80026b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026b6:	f7ff bc39 	b.w	8001f2c <_malloc_r>
 80026ba:	b92a      	cbnz	r2, 80026c8 <_realloc_r+0x24>
 80026bc:	f7ff fbcc 	bl	8001e58 <_free_r>
 80026c0:	2400      	movs	r4, #0
 80026c2:	4620      	mov	r0, r4
 80026c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026c8:	f000 f81a 	bl	8002700 <_malloc_usable_size_r>
 80026cc:	4285      	cmp	r5, r0
 80026ce:	4606      	mov	r6, r0
 80026d0:	d802      	bhi.n	80026d8 <_realloc_r+0x34>
 80026d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80026d6:	d8f4      	bhi.n	80026c2 <_realloc_r+0x1e>
 80026d8:	4629      	mov	r1, r5
 80026da:	4640      	mov	r0, r8
 80026dc:	f7ff fc26 	bl	8001f2c <_malloc_r>
 80026e0:	4607      	mov	r7, r0
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d0ec      	beq.n	80026c0 <_realloc_r+0x1c>
 80026e6:	42b5      	cmp	r5, r6
 80026e8:	462a      	mov	r2, r5
 80026ea:	4621      	mov	r1, r4
 80026ec:	bf28      	it	cs
 80026ee:	4632      	movcs	r2, r6
 80026f0:	f7ff ffca 	bl	8002688 <memcpy>
 80026f4:	4621      	mov	r1, r4
 80026f6:	4640      	mov	r0, r8
 80026f8:	f7ff fbae 	bl	8001e58 <_free_r>
 80026fc:	463c      	mov	r4, r7
 80026fe:	e7e0      	b.n	80026c2 <_realloc_r+0x1e>

08002700 <_malloc_usable_size_r>:
 8002700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002704:	1f18      	subs	r0, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	bfbc      	itt	lt
 800270a:	580b      	ldrlt	r3, [r1, r0]
 800270c:	18c0      	addlt	r0, r0, r3
 800270e:	4770      	bx	lr

08002710 <_init>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr

0800271c <_fini>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	bf00      	nop
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr
