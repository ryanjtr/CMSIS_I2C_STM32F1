
testI2C_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000129c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080013a8  080013a8  000023a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013d4  080013d4  00003004  2**0
                  CONTENTS
  4 .ARM          00000008  080013d4  080013d4  000023d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013dc  080013dc  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013dc  080013dc  000023dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013e0  080013e0  000023e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080013e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  080013e8  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080013e8  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f7d  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e56  00000000  00000000  00005faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e0  00000000  00000000  00006e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000038f  00000000  00000000  000072e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012548  00000000  00000000  0000766f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003fde  00000000  00000000  00019bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f814  00000000  00000000  0001db95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007d3a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012ec  00000000  00000000  0007d3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0007e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001390 	.word	0x08001390

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001390 	.word	0x08001390

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	f003 0307 	and.w	r3, r3, #7
 800016a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <__NVIC_SetPriorityGrouping+0x44>)
 800016e:	68db      	ldr	r3, [r3, #12]
 8000170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000172:	68ba      	ldr	r2, [r7, #8]
 8000174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000178:	4013      	ands	r3, r2
 800017a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800018c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800018e:	4a04      	ldr	r2, [pc, #16]	@ (80001a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	60d3      	str	r3, [r2, #12]
}
 8000194:	bf00      	nop
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	e000ed00 	.word	0xe000ed00

080001a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__NVIC_GetPriorityGrouping+0x18>)
 80001aa:	68db      	ldr	r3, [r3, #12]
 80001ac:	0a1b      	lsrs	r3, r3, #8
 80001ae:	f003 0307 	and.w	r3, r3, #7
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000ed00 	.word	0xe000ed00

080001c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	db0b      	blt.n	80001ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f003 021f 	and.w	r2, r3, #31
 80001d8:	4906      	ldr	r1, [pc, #24]	@ (80001f4 <__NVIC_EnableIRQ+0x34>)
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	095b      	lsrs	r3, r3, #5
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	e000e100 	.word	0xe000e100

080001f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	6039      	str	r1, [r7, #0]
 8000202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000208:	2b00      	cmp	r3, #0
 800020a:	db0a      	blt.n	8000222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	490c      	ldr	r1, [pc, #48]	@ (8000244 <__NVIC_SetPriority+0x4c>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	0112      	lsls	r2, r2, #4
 8000218:	b2d2      	uxtb	r2, r2
 800021a:	440b      	add	r3, r1
 800021c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000220:	e00a      	b.n	8000238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4908      	ldr	r1, [pc, #32]	@ (8000248 <__NVIC_SetPriority+0x50>)
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	f003 030f 	and.w	r3, r3, #15
 800022e:	3b04      	subs	r3, #4
 8000230:	0112      	lsls	r2, r2, #4
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	440b      	add	r3, r1
 8000236:	761a      	strb	r2, [r3, #24]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	e000e100 	.word	0xe000e100
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800024c:	b480      	push	{r7}
 800024e:	b089      	sub	sp, #36	@ 0x24
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	f003 0307 	and.w	r3, r3, #7
 800025e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000260:	69fb      	ldr	r3, [r7, #28]
 8000262:	f1c3 0307 	rsb	r3, r3, #7
 8000266:	2b04      	cmp	r3, #4
 8000268:	bf28      	it	cs
 800026a:	2304      	movcs	r3, #4
 800026c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026e:	69fb      	ldr	r3, [r7, #28]
 8000270:	3304      	adds	r3, #4
 8000272:	2b06      	cmp	r3, #6
 8000274:	d902      	bls.n	800027c <NVIC_EncodePriority+0x30>
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	3b03      	subs	r3, #3
 800027a:	e000      	b.n	800027e <NVIC_EncodePriority+0x32>
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000280:	f04f 32ff 	mov.w	r2, #4294967295
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	fa02 f303 	lsl.w	r3, r2, r3
 800028a:	43da      	mvns	r2, r3
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	401a      	ands	r2, r3
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000294:	f04f 31ff 	mov.w	r1, #4294967295
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	fa01 f303 	lsl.w	r3, r1, r3
 800029e:	43d9      	mvns	r1, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a4:	4313      	orrs	r3, r2
         );
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3724      	adds	r7, #36	@ 0x24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <LL_RCC_HSI_Enable+0x18>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a03      	ldr	r2, [pc, #12]	@ (80002c8 <LL_RCC_HSI_Enable+0x18>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <LL_RCC_HSI_IsReady+0x20>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 0302 	and.w	r3, r3, #2
 80002d8:	2b02      	cmp	r3, #2
 80002da:	bf0c      	ite	eq
 80002dc:	2301      	moveq	r3, #1
 80002de:	2300      	movne	r3, #0
 80002e0:	b2db      	uxtb	r3, r3
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000

080002f0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002f8:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	4903      	ldr	r1, [pc, #12]	@ (8000314 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000306:	4313      	orrs	r3, r2
 8000308:	600b      	str	r3, [r1, #0]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <LL_RCC_SetSysClkSource+0x24>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	f023 0203 	bic.w	r2, r3, #3
 8000328:	4904      	ldr	r1, [pc, #16]	@ (800033c <LL_RCC_SetSysClkSource+0x24>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4313      	orrs	r3, r2
 800032e:	604b      	str	r3, [r1, #4]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000344:	4b03      	ldr	r3, [pc, #12]	@ (8000354 <LL_RCC_GetSysClkSource+0x14>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 030c 	and.w	r3, r3, #12
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40021000 	.word	0x40021000

08000358 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000368:	4904      	ldr	r1, [pc, #16]	@ (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	604b      	str	r3, [r1, #4]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000390:	4904      	ldr	r1, [pc, #16]	@ (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	604b      	str	r3, [r1, #4]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80003b8:	4904      	ldr	r1, [pc, #16]	@ (80003cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4313      	orrs	r3, r2
 80003be:	604b      	str	r3, [r1, #4]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003d4:	4b04      	ldr	r3, [pc, #16]	@ (80003e8 <LL_RCC_PLL_Enable+0x18>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a03      	ldr	r2, [pc, #12]	@ (80003e8 <LL_RCC_PLL_Enable+0x18>)
 80003da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <LL_RCC_PLL_IsReady+0x20>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80003fc:	bf0c      	ite	eq
 80003fe:	2301      	moveq	r3, #1
 8000400:	2300      	movne	r3, #0
 8000402:	b2db      	uxtb	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	430b      	orrs	r3, r1
 800042c:	4903      	ldr	r1, [pc, #12]	@ (800043c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800042e:	4313      	orrs	r3, r2
 8000430:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <LL_APB1_GRP1_EnableClock+0x2c>)
 800044a:	69da      	ldr	r2, [r3, #28]
 800044c:	4907      	ldr	r1, [pc, #28]	@ (800046c <LL_APB1_GRP1_EnableClock+0x2c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000456:	69da      	ldr	r2, [r3, #28]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4013      	ands	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <LL_APB2_GRP1_EnableClock+0x2c>)
 800047a:	699a      	ldr	r2, [r3, #24]
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <LL_APB2_GRP1_EnableClock+0x2c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000486:	699a      	ldr	r2, [r3, #24]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4013      	ands	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <LL_FLASH_SetLatency+0x24>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f023 0207 	bic.w	r2, r3, #7
 80004b0:	4904      	ldr	r1, [pc, #16]	@ (80004c4 <LL_FLASH_SetLatency+0x24>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	600b      	str	r3, [r1, #0]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40022000 	.word	0x40022000

080004c8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004cc:	4b03      	ldr	r3, [pc, #12]	@ (80004dc <LL_FLASH_GetLatency+0x14>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f003 0307 	and.w	r3, r3, #7
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40022000 	.word	0x40022000

080004e0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60da      	str	r2, [r3, #12]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	615a      	str	r2, [r3, #20]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000538:	2b40      	cmp	r3, #64	@ 0x40
 800053a:	bf0c      	ite	eq
 800053c:	2301      	moveq	r3, #1
 800053e:	2300      	movne	r3, #0
 8000540:	b2db      	uxtb	r3, r3
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055c:	2b80      	cmp	r3, #128	@ 0x80
 800055e:	bf0c      	ite	eq
 8000560:	2301      	moveq	r3, #1
 8000562:	2300      	movne	r3, #0
 8000564:	b2db      	uxtb	r3, r3
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800057c:	78fa      	ldrb	r2, [r7, #3]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	605a      	str	r2, [r3, #4]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	b29a      	uxth	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	615a      	str	r2, [r3, #20]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	b29b      	uxth	r3, r3
 80005de:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4013      	ands	r3, r2
 80005e6:	041a      	lsls	r2, r3, #16
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	43d9      	mvns	r1, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	400b      	ands	r3, r1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	611a      	str	r2, [r3, #16]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800060c:	4a03      	ldr	r2, [pc, #12]	@ (800061c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000612:	6053      	str	r3, [r2, #4]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40010000 	.word	0x40010000

08000620 <uart_print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_print(const char *str)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t length = strlen(str);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff fd8f 	bl	800014c <strlen>
 800062e:	60b8      	str	r0, [r7, #8]
  for (uint32_t i = 0; i < length; i++)
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e011      	b.n	800065a <uart_print+0x3a>
  {
    // Ch�? cho đến khi bộ truy�?n sẵn sàng
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 8000636:	bf00      	nop
 8000638:	4810      	ldr	r0, [pc, #64]	@ (800067c <uart_print+0x5c>)
 800063a:	f7ff ff87 	bl	800054c <LL_USART_IsActiveFlag_TXE>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f9      	beq.n	8000638 <uart_print+0x18>
      ;
    LL_USART_TransmitData8(USART1, (uint8_t)str[i]);
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	480b      	ldr	r0, [pc, #44]	@ (800067c <uart_print+0x5c>)
 8000650:	f7ff ff8e 	bl	8000570 <LL_USART_TransmitData8>
  for (uint32_t i = 0; i < length; i++)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3e9      	bcc.n	8000636 <uart_print+0x16>
  }
  // �?ảm bảo gửi xong byte cuối cùng
  while (!LL_USART_IsActiveFlag_TC(USART1))
 8000662:	bf00      	nop
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <uart_print+0x5c>)
 8000666:	f7ff ff5f 	bl	8000528 <LL_USART_IsActiveFlag_TC>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f9      	beq.n	8000664 <uart_print+0x44>
    ;
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40013800 	.word	0x40013800

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000686:	2001      	movs	r0, #1
 8000688:	f7ff fef2 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800068c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000690:	f7ff fed6 	bl	8000440 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f7ff fd61 	bl	800015c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800069a:	f7ff fd83 	bl	80001a4 <__NVIC_GetPriorityGrouping>
 800069e:	4603      	mov	r3, r0
 80006a0:	2200      	movs	r2, #0
 80006a2:	210f      	movs	r1, #15
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdd1 	bl	800024c <NVIC_EncodePriority>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4619      	mov	r1, r3
 80006ae:	f04f 30ff 	mov.w	r0, #4294967295
 80006b2:	f7ff fda1 	bl	80001f8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80006b6:	f7ff ffa3 	bl	8000600 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f83b 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 f8cf 	bl	8000860 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c2:	f000 f875 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_I2C1_GPIO_config();
 80006c6:	f000 f90f 	bl	80008e8 <i2c_I2C1_GPIO_config>
  i2c_I2C1_config();
 80006ca:	f000 f92f 	bl	800092c <i2c_I2C1_config>

  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80006ce:	4915      	ldr	r1, [pc, #84]	@ (8000724 <main+0xa4>)
 80006d0:	4815      	ldr	r0, [pc, #84]	@ (8000728 <main+0xa8>)
 80006d2:	f7ff ff6a 	bl	80005aa <LL_GPIO_ResetOutputPin>

  NVIC_EnableIRQ(I2C1_EV_IRQn); // Kích hoạt ngắt sự kiện I2C1
 80006d6:	201f      	movs	r0, #31
 80006d8:	f7ff fd72 	bl	80001c0 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(I2C1_ER_IRQn); // Kích hoạt ngắt lỗi I2C1
 80006dc:	2020      	movs	r0, #32
 80006de:	f7ff fd6f 	bl	80001c0 <__NVIC_EnableIRQ>
  //  uint8_t data = 5;
  uint8_t data1[8] = {0x83, 0x31, 0x22, 0x43, 0x94, 0x75, 0x76, 0x97};
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <main+0xac>)
 80006e4:	463b      	mov	r3, r7
 80006e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ea:	e883 0003 	stmia.w	r3, {r0, r1}
  //  if (i2c_I2C1_masterReceive(0x68 << 1, 0x03, &rx_data[0],1000))
  //  {
  //    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
  //  }
  //  i2c_I2C1_masterReceive(117, &data, 1);
  uart_print("master\r\n");
 80006ee:	4810      	ldr	r0, [pc, #64]	@ (8000730 <main+0xb0>)
 80006f0:	f7ff ff96 	bl	8000620 <uart_print>
  LL_mDelay(10000);
 80006f4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006f8:	f000 fdf4 	bl	80012e4 <LL_mDelay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //send 8 byte, length=9 (still dont know why)
	    if (i2c_I2C1_masterTransmit(0x55 << 1, data1, 8, 1000))
 80006fc:	4639      	mov	r1, r7
 80006fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000702:	2208      	movs	r2, #8
 8000704:	20aa      	movs	r0, #170	@ 0xaa
 8000706:	f000 f999 	bl	8000a3c <i2c_I2C1_masterTransmit>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <main+0x98>
	    {
	      LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 8000710:	4904      	ldr	r1, [pc, #16]	@ (8000724 <main+0xa4>)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <main+0xa8>)
 8000714:	f7ff ff58 	bl	80005c8 <LL_GPIO_TogglePin>
	    }
	    LL_mDelay(5000);
 8000718:	f241 3088 	movw	r0, #5000	@ 0x1388
 800071c:	f000 fde2 	bl	80012e4 <LL_mDelay>
	    if (i2c_I2C1_masterTransmit(0x55 << 1, data1, 8, 1000))
 8000720:	e7ec      	b.n	80006fc <main+0x7c>
 8000722:	bf00      	nop
 8000724:	04200020 	.word	0x04200020
 8000728:	40011000 	.word	0x40011000
 800072c:	080013b4 	.word	0x080013b4
 8000730:	080013a8 	.word	0x080013a8

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff feb1 	bl	80004a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800073e:	bf00      	nop
 8000740:	f7ff fec2 	bl	80004c8 <LL_FLASH_GetLatency>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1fa      	bne.n	8000740 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800074a:	2010      	movs	r0, #16
 800074c:	f7ff fdd0 	bl	80002f0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000750:	f7ff fdae 	bl	80002b0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000754:	bf00      	nop
 8000756:	f7ff fdb9 	bl	80002cc <LL_RCC_HSI_IsReady>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d1fa      	bne.n	8000756 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_2);
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fe54 	bl	8000410 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000768:	f7ff fe32 	bl	80003d0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800076c:	bf00      	nop
 800076e:	f7ff fe3d 	bl	80003ec <LL_RCC_PLL_IsReady>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d1fa      	bne.n	800076e <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff fded 	bl	8000358 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fdfe 	bl	8000380 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fe0f 	bl	80003a8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fdc4 	bl	8000318 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000790:	bf00      	nop
 8000792:	f7ff fdd5 	bl	8000340 <LL_RCC_GetSysClkSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b08      	cmp	r3, #8
 800079a:	d1fa      	bne.n	8000792 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(8000000);
 800079c:	4803      	ldr	r0, [pc, #12]	@ (80007ac <SystemClock_Config+0x78>)
 800079e:	f000 fd93 	bl	80012c8 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007a2:	4802      	ldr	r0, [pc, #8]	@ (80007ac <SystemClock_Config+0x78>)
 80007a4:	f000 fdc2 	bl	800132c <LL_SetSystemCoreClock>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	007a1200 	.word	0x007a1200

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80007d8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80007dc:	f7ff fe48 	bl	8000470 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80007e0:	2004      	movs	r0, #4
 80007e2:	f7ff fe45 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_USART1_UART_Init+0xa0>)
 80007e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007ea:	2309      	movs	r3, #9
 80007ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4816      	ldr	r0, [pc, #88]	@ (8000854 <MX_USART1_UART_Init+0xa4>)
 80007fc:	f000 fadb 	bl	8000db6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_USART1_UART_Init+0xa8>)
 8000802:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000804:	2304      	movs	r3, #4
 8000806:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <MX_USART1_UART_Init+0xa4>)
 800080e:	f000 fad2 	bl	8000db6 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000812:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000816:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000824:	230c      	movs	r3, #12
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4809      	ldr	r0, [pc, #36]	@ (800085c <MX_USART1_UART_Init+0xac>)
 8000838:	f000 fccc 	bl	80011d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_USART1_UART_Init+0xac>)
 800083e:	f7ff fe5e 	bl	80004fe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000842:	4806      	ldr	r0, [pc, #24]	@ (800085c <MX_USART1_UART_Init+0xac>)
 8000844:	f7ff fe4c 	bl	80004e0 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3730      	adds	r7, #48	@ 0x30
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	04020002 	.word	0x04020002
 8000854:	40010800 	.word	0x40010800
 8000858:	04040004 	.word	0x04040004
 800085c:	40013800 	.word	0x40013800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000874:	2010      	movs	r0, #16
 8000876:	f7ff fdfb 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800087a:	2020      	movs	r0, #32
 800087c:	f7ff fdf8 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff fdf5 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000886:	2008      	movs	r0, #8
 8000888:	f7ff fdf2 	bl	8000470 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800088c:	4913      	ldr	r1, [pc, #76]	@ (80008dc <MX_GPIO_Init+0x7c>)
 800088e:	4814      	ldr	r0, [pc, #80]	@ (80008e0 <MX_GPIO_Init+0x80>)
 8000890:	f7ff fe8b 	bl	80005aa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000894:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000898:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <MX_GPIO_Init+0x84>)
 800089a:	f7ff fe86 	bl	80005aa <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_GPIO_Init+0x7c>)
 80008a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008a6:	2302      	movs	r3, #2
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <MX_GPIO_Init+0x80>)
 80008b4:	f000 fa7f 	bl	8000db6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80008b8:	f242 0320 	movw	r3, #8224	@ 0x2020
 80008bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008be:	2301      	movs	r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008c2:	2302      	movs	r3, #2
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_GPIO_Init+0x84>)
 80008d0:	f000 fa71 	bl	8000db6 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	04200020 	.word	0x04200020
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <i2c_I2C1_GPIO_config>:
/* USER CODE BEGIN 4 */
/**
 * The function configures GPIO pins PB6 (SCL) and PB7 (SDA) for I2C communication on I2C1 interface.
 */
void i2c_I2C1_GPIO_config(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  // PB6 (SCL), PB7(SDA)
  // Bật xung clock PORTB
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <i2c_I2C1_GPIO_config+0x3c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <i2c_I2C1_GPIO_config+0x3c>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
  // Chế độ: xuất 10Mhz
  GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_MODE7); // Xóa MODE6 và MODE7
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <i2c_I2C1_GPIO_config+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <i2c_I2C1_GPIO_config+0x40>)
 80008fe:	f023 534c 	bic.w	r3, r3, #855638016	@ 0x33000000
 8000902:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (GPIO_CRL_MODE6_0 | GPIO_CRL_MODE7_0);
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <i2c_I2C1_GPIO_config+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <i2c_I2C1_GPIO_config+0x40>)
 800090a:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 800090e:	6013      	str	r3, [r2, #0]
  // CNF: Alternate function Open-Drain
  GPIOB->CRL |= (GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <i2c_I2C1_GPIO_config+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <i2c_I2C1_GPIO_config+0x40>)
 8000916:	f043 434c 	orr.w	r3, r3, #3422552064	@ 0xcc000000
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000
 8000928:	40010c00 	.word	0x40010c00

0800092c <i2c_I2C1_config>:
/**
 * The function `i2c_I2C1_config` configures the I2C1 peripheral for communication at a speed of
 * 100KHz.
 */
void i2c_I2C1_config(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  // Bật xung clock I2C
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <i2c_I2C1_config+0x5c>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <i2c_I2C1_config+0x5c>)
 8000936:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800093a:	61d3      	str	r3, [r2, #28]

  // Cấu hình tần số I2C dùng thanh ghi I2C_CR2
  // tần số này trùng với tần số APB1 mà bạn đã cấu hình trước đó
  I2C1->CR2 &= ~(I2C_CR2_FREQ);
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <i2c_I2C1_config+0x60>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <i2c_I2C1_config+0x60>)
 8000942:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000946:	6053      	str	r3, [r2, #4]
  I2C1->CR2 |= (8UL << 0);
 8000948:	4b10      	ldr	r3, [pc, #64]	@ (800098c <i2c_I2C1_config+0x60>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <i2c_I2C1_config+0x60>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6053      	str	r3, [r2, #4]
  //  Cấu hình TRISE dùng thanh ghi I2C_TRISE
  //  như đã thấy ở phần ví dụ bit 5:0 của thanh ghi I2C_TRISE, ta dùng tần số 8Mhz nên TRISE= 0x09
  I2C1->TRISE &= ~(0xFF);
 8000954:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <i2c_I2C1_config+0x60>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	4a0c      	ldr	r2, [pc, #48]	@ (800098c <i2c_I2C1_config+0x60>)
 800095a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800095e:	6213      	str	r3, [r2, #32]
  I2C1->TRISE |= 0x09;
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <i2c_I2C1_config+0x60>)
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4a09      	ldr	r2, [pc, #36]	@ (800098c <i2c_I2C1_config+0x60>)
 8000966:	f043 0309 	orr.w	r3, r3, #9
 800096a:	6213      	str	r3, [r2, #32]
  // Cấu hình tốc độ I2C (100KHz SCL) dùng thanh ghi I2C_CCR
  // ta có f=8Mhz -> T=0.125us, ta muốn T_high=T_low=5us => CCR=5us/0.125us=40 <=> 0x28
  //ta có f=8Mhz -> T=0.125us, ta muốn T_high=T_low=50us => CCR=50us/0.125us=400 <=> 0x190 (10KHz)
  I2C1->CCR = 0x190;
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <i2c_I2C1_config+0x60>)
 800096e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000972:	61da      	str	r2, [r3, #28]
  // Bật ngoại vi I2C dùng I2C_CR1 bằng cách đặt PE=1
  I2C1->CR1 |= I2C_CR1_PE;
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <i2c_I2C1_config+0x60>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <i2c_I2C1_config+0x60>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000
 800098c:	40005400 	.word	0x40005400

08000990 <I2C1_EV_IRQHandler>:
  }
  return true;
}

void I2C1_EV_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  // Kiểm tra c�? SB (Start Bit) được set
  if (I2C1->SR1 & I2C_SR1_SB)
 8000994:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <I2C1_EV_IRQHandler+0x1a>
  {
    // Gửi địa chỉ thiết bị với bit ghi (0)
    I2C1->DR = Address_slave;
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <I2C1_EV_IRQHandler+0x94>)
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009a6:	611a      	str	r2, [r3, #16]
      LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
      // Tắt các ngắt để tránh kích hoạt ngắt không cần thiết
      I2C1->CR2 &= ~(I2C_CR2_ITBUFEN | I2C_CR2_ITEVTEN | I2C_CR2_ITERREN);
    }
  }
}
 80009a8:	e038      	b.n	8000a1c <I2C1_EV_IRQHandler+0x8c>
  else if (I2C1->SR1 & I2C_SR1_ADDR)
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <I2C1_EV_IRQHandler+0x38>
    (void)I2C1->SR1;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009b8:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009bc:	699b      	ldr	r3, [r3, #24]
    I2C1->DR = reg_slave;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <I2C1_EV_IRQHandler+0x98>)
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009c4:	611a      	str	r2, [r3, #16]
}
 80009c6:	e029      	b.n	8000a1c <I2C1_EV_IRQHandler+0x8c>
  else if (I2C1->SR1 & I2C_SR1_TXE)
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d023      	beq.n	8000a1c <I2C1_EV_IRQHandler+0x8c>
    if (tx_index < tx_len)
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <I2C1_EV_IRQHandler+0x9c>)
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <I2C1_EV_IRQHandler+0xa0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d20c      	bcs.n	80009fa <I2C1_EV_IRQHandler+0x6a>
      I2C1->DR = tx_data[tx_index++];
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <I2C1_EV_IRQHandler+0xa4>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <I2C1_EV_IRQHandler+0x9c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	1c59      	adds	r1, r3, #1
 80009ea:	b2c8      	uxtb	r0, r1
 80009ec:	490f      	ldr	r1, [pc, #60]	@ (8000a2c <I2C1_EV_IRQHandler+0x9c>)
 80009ee:	7008      	strb	r0, [r1, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009f6:	611a      	str	r2, [r3, #16]
}
 80009f8:	e010      	b.n	8000a1c <I2C1_EV_IRQHandler+0x8c>
      I2C1->CR1 |= I2C_CR1_STOP;
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 8000a00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a04:	6013      	str	r3, [r2, #0]
      LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000a06:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000a0a:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <I2C1_EV_IRQHandler+0xa8>)
 8000a0c:	f7ff fdbe 	bl	800058c <LL_GPIO_SetOutputPin>
      I2C1->CR2 &= ~(I2C_CR2_ITBUFEN | I2C_CR2_ITEVTEN | I2C_CR2_ITERREN);
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	4a02      	ldr	r2, [pc, #8]	@ (8000a20 <I2C1_EV_IRQHandler+0x90>)
 8000a16:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a1a:	6053      	str	r3, [r2, #4]
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40005400 	.word	0x40005400
 8000a24:	20000020 	.word	0x20000020
 8000a28:	20000021 	.word	0x20000021
 8000a2c:	20000029 	.word	0x20000029
 8000a30:	20000028 	.word	0x20000028
 8000a34:	20000024 	.word	0x20000024
 8000a38:	40010c00 	.word	0x40010c00

08000a3c <i2c_I2C1_masterTransmit>:

bool i2c_I2C1_masterTransmit(uint8_t Addr, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	73bb      	strb	r3, [r7, #14]
  uint32_t count = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  uint8_t index = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	74fb      	strb	r3, [r7, #19]

  // Chờ I2C vào trạng thái bận
  while ((I2C1->SR2 & I2C_SR2_BUSY))
 8000a56:	e008      	b.n	8000a6a <i2c_I2C1_masterTransmit+0x2e>
  {
    if (++count > timeout)
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d901      	bls.n	8000a6a <i2c_I2C1_masterTransmit+0x2e>
      return false;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e089      	b.n	8000b7e <i2c_I2C1_masterTransmit+0x142>
  while ((I2C1->SR2 & I2C_SR2_BUSY))
 8000a6a:	4b47      	ldr	r3, [pc, #284]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f0      	bne.n	8000a58 <i2c_I2C1_masterTransmit+0x1c>
  }

  // Xóa POS và tạo điều kiện Start
  I2C1->CR1 &= ~(I2C_CR1_POS);
 8000a76:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a43      	ldr	r2, [pc, #268]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000a7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000a80:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= I2C_CR1_START;
 8000a82:	4b41      	ldr	r3, [pc, #260]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a40      	ldr	r2, [pc, #256]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8c:	6013      	str	r3, [r2, #0]

  // Chờ bit Start được set
  while (!(I2C1->SR1 & I2C_SR1_SB))
 8000a8e:	e008      	b.n	8000aa2 <i2c_I2C1_masterTransmit+0x66>
  {
    if (++count > timeout)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d901      	bls.n	8000aa2 <i2c_I2C1_masterTransmit+0x66>
      return false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e06d      	b.n	8000b7e <i2c_I2C1_masterTransmit+0x142>
  while (!(I2C1->SR1 & I2C_SR1_SB))
 8000aa2:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f0      	beq.n	8000a90 <i2c_I2C1_masterTransmit+0x54>
  }
  count = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]

  // Gửi địa chỉ Slave
  I2C1->DR = Addr;
 8000ab2:	4a35      	ldr	r2, [pc, #212]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	6113      	str	r3, [r2, #16]
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8000ab8:	e008      	b.n	8000acc <i2c_I2C1_masterTransmit+0x90>
  {
    if (++count > timeout)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d901      	bls.n	8000acc <i2c_I2C1_masterTransmit+0x90>
      return false;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e058      	b.n	8000b7e <i2c_I2C1_masterTransmit+0x142>
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8000acc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f0      	beq.n	8000aba <i2c_I2C1_masterTransmit+0x7e>
  }
  count = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  // Xóa bit ADDR
  (void)I2C1->SR1;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000ade:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]

  // Truyền dữ liệu
  while (len > 0U)
 8000ae4:	e031      	b.n	8000b4a <i2c_I2C1_masterTransmit+0x10e>
  {
    // Chờ bộ đệm trống
    while (!(I2C1->SR1 & I2C_SR1_TXE))
    {
      if (++count > timeout)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d901      	bls.n	8000af8 <i2c_I2C1_masterTransmit+0xbc>
        return false;
 8000af4:	2300      	movs	r3, #0
 8000af6:	e042      	b.n	8000b7e <i2c_I2C1_masterTransmit+0x142>
    while (!(I2C1->SR1 & I2C_SR1_TXE))
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f0      	beq.n	8000ae6 <i2c_I2C1_masterTransmit+0xaa>
    }
    count = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

    // Gửi dữ liệu
    I2C1->DR = pData[index];
 8000b08:	7cfb      	ldrb	r3, [r7, #19]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000b12:	611a      	str	r2, [r3, #16]
    index++;
 8000b14:	7cfb      	ldrb	r3, [r7, #19]
 8000b16:	3301      	adds	r3, #1
 8000b18:	74fb      	strb	r3, [r7, #19]
    len--;
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	73bb      	strb	r3, [r7, #14]

    // Nếu còn dữ liệu và BTF=1, gửi tiếp byte tiếp theo
    if ((len > 0U) && (I2C1->SR1 & I2C_SR1_BTF))
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d011      	beq.n	8000b4a <i2c_I2C1_masterTransmit+0x10e>
 8000b26:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00b      	beq.n	8000b4a <i2c_I2C1_masterTransmit+0x10e>
    {
      I2C1->DR = pData[index];
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	4413      	add	r3, r2
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000b3c:	611a      	str	r2, [r3, #16]
      index++;
 8000b3e:	7cfb      	ldrb	r3, [r7, #19]
 8000b40:	3301      	adds	r3, #1
 8000b42:	74fb      	strb	r3, [r7, #19]
      len--;
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	73bb      	strb	r3, [r7, #14]
  while (len > 0U)
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1d3      	bne.n	8000af8 <i2c_I2C1_masterTransmit+0xbc>
    }
  }

  // Chờ byte cuối cùng hoàn tất
  while (!(I2C1->SR1 & I2C_SR1_BTF))
 8000b50:	e008      	b.n	8000b64 <i2c_I2C1_masterTransmit+0x128>
  {
    if (++count > timeout)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d901      	bls.n	8000b64 <i2c_I2C1_masterTransmit+0x128>
      return false;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e00c      	b.n	8000b7e <i2c_I2C1_masterTransmit+0x142>
  while (!(I2C1->SR1 & I2C_SR1_BTF))
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f0      	beq.n	8000b52 <i2c_I2C1_masterTransmit+0x116>
  }

  // Tạo điều kiện STOP
  I2C1->CR1 |= I2C_CR1_STOP;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <i2c_I2C1_masterTransmit+0x14c>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7a:	6013      	str	r3, [r2, #0]

  return true;
 8000b7c:	2301      	movs	r3, #1
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	371c      	adds	r7, #28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40005400 	.word	0x40005400

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bfc:	f7ff fff8 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480b      	ldr	r0, [pc, #44]	@ (8000c30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c02:	490c      	ldr	r1, [pc, #48]	@ (8000c34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c04:	4a0c      	ldr	r2, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:

  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a09      	ldr	r2, [pc, #36]	@ (8000c3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c18:	4c09      	ldr	r4, [pc, #36]	@ (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c26:	f000 fb8f 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff fd29 	bl	8000680 <main>
  bx lr
 8000c2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c38:	080013e4 	.word	0x080013e4
  ldr r2, =_sbss
 8000c3c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c40:	2000002c 	.word	0x2000002c

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>

08000c46 <LL_GPIO_SetPinMode>:
{
 8000c46:	b490      	push	{r4, r7}
 8000c48:	b088      	sub	sp, #32
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	461a      	mov	r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	0e1b      	lsrs	r3, r3, #24
 8000c5a:	4413      	add	r3, r2
 8000c5c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	210f      	movs	r1, #15
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	401a      	ands	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	61bb      	str	r3, [r7, #24]
  return result;
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	6023      	str	r3, [r4, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc90      	pop	{r4, r7}
 8000ca8:	4770      	bx	lr

08000caa <LL_GPIO_SetPinSpeed>:
{
 8000caa:	b490      	push	{r4, r7}
 8000cac:	b088      	sub	sp, #32
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	0e1b      	lsrs	r3, r3, #24
 8000cbe:	4413      	add	r3, r2
 8000cc0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000cc2:	6822      	ldr	r2, [r4, #0]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa93 f3a3 	rbit	r3, r3
 8000cce:	613b      	str	r3, [r7, #16]
  return result;
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	fab3 f383 	clz	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	2103      	movs	r1, #3
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	61bb      	str	r3, [r7, #24]
  return result;
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	6023      	str	r3, [r4, #0]
}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc90      	pop	{r4, r7}
 8000d0c:	4770      	bx	lr

08000d0e <LL_GPIO_SetPinOutputType>:
{
 8000d0e:	b490      	push	{r4, r7}
 8000d10:	b088      	sub	sp, #32
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	0e1b      	lsrs	r3, r3, #24
 8000d22:	4413      	add	r3, r2
 8000d24:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000d26:	6822      	ldr	r2, [r4, #0]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa93 f3a3 	rbit	r3, r3
 8000d32:	613b      	str	r3, [r7, #16]
  return result;
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	fab3 f383 	clz	r3, r3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	2104      	movs	r1, #4
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	401a      	ands	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	61bb      	str	r3, [r7, #24]
  return result;
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	6023      	str	r3, [r4, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc90      	pop	{r4, r7}
 8000d70:	4770      	bx	lr

08000d72 <LL_GPIO_SetPinPull>:
{
 8000d72:	b480      	push	{r7}
 8000d74:	b087      	sub	sp, #28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	43db      	mvns	r3, r3
 8000d88:	401a      	ands	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	613b      	str	r3, [r7, #16]
  return result;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4619      	mov	r1, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	408b      	lsls	r3, r1
 8000da6:	431a      	orrs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	60da      	str	r2, [r3, #12]
}
 8000dac:	bf00      	nop
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b088      	sub	sp, #32
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	0c1b      	lsrs	r3, r3, #16
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	60fb      	str	r3, [r7, #12]
  return result;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000de0:	e044      	b.n	8000e6c <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000de2:	2201      	movs	r2, #1
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	409a      	lsls	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d03a      	beq.n	8000e66 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	2b07      	cmp	r3, #7
 8000df4:	d806      	bhi.n	8000e04 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000df6:	f240 1201 	movw	r2, #257	@ 0x101
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	e008      	b.n	8000e16 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	3b08      	subs	r3, #8
 8000e08:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e14:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d106      	bne.n	8000e2c <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	461a      	mov	r2, r3
 8000e24:	69b9      	ldr	r1, [r7, #24]
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa3 	bl	8000d72 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	461a      	mov	r2, r3
 8000e32:	69b9      	ldr	r1, [r7, #24]
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff06 	bl	8000c46 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d003      	beq.n	8000e4a <LL_GPIO_Init+0x94>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b09      	cmp	r3, #9
 8000e48:	d10d      	bne.n	8000e66 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	69b9      	ldr	r1, [r7, #24]
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff29 	bl	8000caa <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff54 	bl	8000d0e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1b4      	bne.n	8000de2 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <LL_RCC_GetSysClkSource>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <LL_RCC_GetSysClkSource+0x14>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 030c 	and.w	r3, r3, #12
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000

08000e9c <LL_RCC_GetAHBPrescaler>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <LL_RCC_GetAHBPrescaler+0x14>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_RCC_GetAPB1Prescaler>:
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40021000 	.word	0x40021000

08000ecc <LL_RCC_GetAPB2Prescaler>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <LL_RCC_PLL_GetMainSource+0x14>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000

08000efc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000

08000f14 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <LL_RCC_PLL_GetPrediv+0x18>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	0c5b      	lsrs	r3, r3, #17
 8000f1e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000f38:	f000 f820 	bl	8000f7c <RCC_GetSystemClockFreq>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f83e 	bl	8000fc8 <RCC_GetHCLKClockFreq>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f84c 	bl	8000ff4 <RCC_GetPCLK1ClockFreq>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f858 	bl	800101c <RCC_GetPCLK2ClockFreq>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60da      	str	r2, [r3, #12]
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000f86:	f7ff ff7d 	bl	8000e84 <LL_RCC_GetSysClkSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d00c      	beq.n	8000faa <RCC_GetSystemClockFreq+0x2e>
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d80e      	bhi.n	8000fb2 <RCC_GetSystemClockFreq+0x36>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <RCC_GetSystemClockFreq+0x22>
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d003      	beq.n	8000fa4 <RCC_GetSystemClockFreq+0x28>
 8000f9c:	e009      	b.n	8000fb2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <RCC_GetSystemClockFreq+0x48>)
 8000fa0:	607b      	str	r3, [r7, #4]
      break;
 8000fa2:	e009      	b.n	8000fb8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <RCC_GetSystemClockFreq+0x48>)
 8000fa6:	607b      	str	r3, [r7, #4]
      break;
 8000fa8:	e006      	b.n	8000fb8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000faa:	f000 f84b 	bl	8001044 <RCC_PLL_GetFreqDomain_SYS>
 8000fae:	6078      	str	r0, [r7, #4]
      break;
 8000fb0:	e002      	b.n	8000fb8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <RCC_GetSystemClockFreq+0x48>)
 8000fb4:	607b      	str	r3, [r7, #4]
      break;
 8000fb6:	bf00      	nop
  }

  return frequency;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	007a1200 	.word	0x007a1200

08000fc8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000fd0:	f7ff ff64 	bl	8000e9c <LL_RCC_GetAHBPrescaler>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <RCC_GetHCLKClockFreq+0x28>)
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	40d3      	lsrs	r3, r2
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	080013bc 	.word	0x080013bc

08000ff4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000ffc:	f7ff ff5a 	bl	8000eb4 <LL_RCC_GetAPB1Prescaler>
 8001000:	4603      	mov	r3, r0
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <RCC_GetPCLK1ClockFreq+0x24>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	40d3      	lsrs	r3, r2
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	080013cc 	.word	0x080013cc

0800101c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001024:	f7ff ff52 	bl	8000ecc <LL_RCC_GetAPB2Prescaler>
 8001028:	4603      	mov	r3, r0
 800102a:	0adb      	lsrs	r3, r3, #11
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <RCC_GetPCLK2ClockFreq+0x24>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	40d3      	lsrs	r3, r2
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	080013cc 	.word	0x080013cc

08001044 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001052:	f7ff ff47 	bl	8000ee4 <LL_RCC_PLL_GetMainSource>
 8001056:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001064:	d003      	beq.n	800106e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001066:	e00b      	b.n	8001080 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001068:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800106a:	607b      	str	r3, [r7, #4]
      break;
 800106c:	e00b      	b.n	8001086 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800106e:	f7ff ff51 	bl	8000f14 <LL_RCC_PLL_GetPrediv>
 8001072:	4603      	mov	r3, r0
 8001074:	3301      	adds	r3, #1
 8001076:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	607b      	str	r3, [r7, #4]
      break;
 800107e:	e002      	b.n	8001086 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001082:	607b      	str	r3, [r7, #4]
      break;
 8001084:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001086:	f7ff ff39 	bl	8000efc <LL_RCC_PLL_GetMultiplicator>
 800108a:	4603      	mov	r3, r0
 800108c:	0c9b      	lsrs	r3, r3, #18
 800108e:	3302      	adds	r3, #2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	003d0900 	.word	0x003d0900
 80010a4:	007a1200 	.word	0x007a1200

080010a8 <LL_USART_IsEnabled>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <LL_USART_SetStopBitsLength>:
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	611a      	str	r2, [r3, #16]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <LL_USART_SetHWFlowCtrl>:
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	615a      	str	r2, [r3, #20]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
	...

08001118 <LL_USART_SetBaudRate>:
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009a      	lsls	r2, r3, #2
 800112e:	441a      	add	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fbb2 f3f3 	udiv	r3, r2, r3
 8001138:	4a25      	ldr	r2, [pc, #148]	@ (80011d0 <LL_USART_SetBaudRate+0xb8>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	b29b      	uxth	r3, r3
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	b299      	uxth	r1, r3
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	009a      	lsls	r2, r3, #2
 8001150:	441a      	add	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fbb2 f2f3 	udiv	r2, r2, r3
 800115a:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <LL_USART_SetBaudRate+0xb8>)
 800115c:	fba3 0302 	umull	r0, r3, r3, r2
 8001160:	095b      	lsrs	r3, r3, #5
 8001162:	2064      	movs	r0, #100	@ 0x64
 8001164:	fb00 f303 	mul.w	r3, r0, r3
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	3332      	adds	r3, #50	@ 0x32
 800116e:	4a18      	ldr	r2, [pc, #96]	@ (80011d0 <LL_USART_SetBaudRate+0xb8>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	095b      	lsrs	r3, r3, #5
 8001176:	b29b      	uxth	r3, r3
 8001178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800117c:	b29b      	uxth	r3, r3
 800117e:	440b      	add	r3, r1
 8001180:	b299      	uxth	r1, r3
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009a      	lsls	r2, r3, #2
 800118c:	441a      	add	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	fbb2 f2f3 	udiv	r2, r2, r3
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <LL_USART_SetBaudRate+0xb8>)
 8001198:	fba3 0302 	umull	r0, r3, r3, r2
 800119c:	095b      	lsrs	r3, r3, #5
 800119e:	2064      	movs	r0, #100	@ 0x64
 80011a0:	fb00 f303 	mul.w	r3, r0, r3
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	3332      	adds	r3, #50	@ 0x32
 80011aa:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <LL_USART_SetBaudRate+0xb8>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	095b      	lsrs	r3, r3, #5
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	440b      	add	r3, r1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	609a      	str	r2, [r3, #8]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	51eb851f 	.word	0x51eb851f

080011d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff5e 	bl	80010a8 <LL_USART_IsEnabled>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d145      	bne.n	800127e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80011fa:	f023 030c 	bic.w	r3, r3, #12
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	6851      	ldr	r1, [r2, #4]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	68d2      	ldr	r2, [r2, #12]
 8001206:	4311      	orrs	r1, r2
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	6912      	ldr	r2, [r2, #16]
 800120c:	430a      	orrs	r2, r1
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff57 	bl	80010ce <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff63 	bl	80010f2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe7d 	bl	8000f30 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <LL_USART_Init+0xb4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d102      	bne.n	8001244 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	e00c      	b.n	800125e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a11      	ldr	r2, [pc, #68]	@ (800128c <LL_USART_Init+0xb8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d102      	bne.n	8001252 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	e005      	b.n	800125e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a0e      	ldr	r2, [pc, #56]	@ (8001290 <LL_USART_Init+0xbc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00c      	beq.n	800127e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 800126c:	2300      	movs	r3, #0
 800126e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001274:	461a      	mov	r2, r3
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff4d 	bl	8001118 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800127e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40013800 	.word	0x40013800
 800128c:	40004400 	.word	0x40004400
 8001290:	40004800 	.word	0x40004800

08001294 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <LL_InitTick+0x30>)
 80012a8:	3b01      	subs	r3, #1
 80012aa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <LL_InitTick+0x30>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <LL_InitTick+0x30>)
 80012b4:	2205      	movs	r2, #5
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80012d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffdd 	bl	8001294 <LL_InitTick>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <LL_mDelay+0x44>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80012f2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fa:	d00c      	beq.n	8001316 <LL_mDelay+0x32>
  {
    Delay++;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3301      	adds	r3, #1
 8001300:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001302:	e008      	b.n	8001316 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <LL_mDelay+0x44>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <LL_mDelay+0x32>
    {
      Delay--;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f3      	bne.n	8001304 <LL_mDelay+0x20>
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	e000e010 	.word	0xe000e010

0800132c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001334:	4a03      	ldr	r2, [pc, #12]	@ (8001344 <LL_SetSystemCoreClock+0x18>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000000 	.word	0x20000000

08001348 <__libc_init_array>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	2600      	movs	r6, #0
 800134c:	4d0c      	ldr	r5, [pc, #48]	@ (8001380 <__libc_init_array+0x38>)
 800134e:	4c0d      	ldr	r4, [pc, #52]	@ (8001384 <__libc_init_array+0x3c>)
 8001350:	1b64      	subs	r4, r4, r5
 8001352:	10a4      	asrs	r4, r4, #2
 8001354:	42a6      	cmp	r6, r4
 8001356:	d109      	bne.n	800136c <__libc_init_array+0x24>
 8001358:	f000 f81a 	bl	8001390 <_init>
 800135c:	2600      	movs	r6, #0
 800135e:	4d0a      	ldr	r5, [pc, #40]	@ (8001388 <__libc_init_array+0x40>)
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <__libc_init_array+0x44>)
 8001362:	1b64      	subs	r4, r4, r5
 8001364:	10a4      	asrs	r4, r4, #2
 8001366:	42a6      	cmp	r6, r4
 8001368:	d105      	bne.n	8001376 <__libc_init_array+0x2e>
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001370:	4798      	blx	r3
 8001372:	3601      	adds	r6, #1
 8001374:	e7ee      	b.n	8001354 <__libc_init_array+0xc>
 8001376:	f855 3b04 	ldr.w	r3, [r5], #4
 800137a:	4798      	blx	r3
 800137c:	3601      	adds	r6, #1
 800137e:	e7f2      	b.n	8001366 <__libc_init_array+0x1e>
 8001380:	080013dc 	.word	0x080013dc
 8001384:	080013dc 	.word	0x080013dc
 8001388:	080013dc 	.word	0x080013dc
 800138c:	080013e0 	.word	0x080013e0

08001390 <_init>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr

0800139c <_fini>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	bf00      	nop
 80013a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a2:	bc08      	pop	{r3}
 80013a4:	469e      	mov	lr, r3
 80013a6:	4770      	bx	lr
