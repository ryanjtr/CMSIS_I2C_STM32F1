
testI2C_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001d88  08001d88  00002d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001df4  08001df4  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001df4  08001df4  00002df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dfc  08001dfc  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dfc  08001dfc  00002dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e00  08001e00  00002e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001e04  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000054  08001e58  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001e58  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003103  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f12  00000000  00000000  00006180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  00007098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a2  00000000  00000000  00007598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012883  00000000  00000000  0000793a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004646  00000000  00000000  0001a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fcf0  00000000  00000000  0001e803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007e4f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001860  00000000  00000000  0007e538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0007fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d70 	.word	0x08001d70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08001d70 	.word	0x08001d70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	f003 0307 	and.w	r3, r3, #7
 800016a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <__NVIC_SetPriorityGrouping+0x44>)
 800016e:	68db      	ldr	r3, [r3, #12]
 8000170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000172:	68ba      	ldr	r2, [r7, #8]
 8000174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000178:	4013      	ands	r3, r2
 800017a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800018c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800018e:	4a04      	ldr	r2, [pc, #16]	@ (80001a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	60d3      	str	r3, [r2, #12]
}
 8000194:	bf00      	nop
 8000196:	3714      	adds	r7, #20
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	e000ed00 	.word	0xe000ed00

080001a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__NVIC_GetPriorityGrouping+0x18>)
 80001aa:	68db      	ldr	r3, [r3, #12]
 80001ac:	0a1b      	lsrs	r3, r3, #8
 80001ae:	f003 0307 	and.w	r3, r3, #7
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000ed00 	.word	0xe000ed00

080001c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	db0b      	blt.n	80001ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f003 021f 	and.w	r2, r3, #31
 80001d8:	4906      	ldr	r1, [pc, #24]	@ (80001f4 <__NVIC_EnableIRQ+0x34>)
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	095b      	lsrs	r3, r3, #5
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	e000e100 	.word	0xe000e100

080001f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	6039      	str	r1, [r7, #0]
 8000202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000208:	2b00      	cmp	r3, #0
 800020a:	db0a      	blt.n	8000222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	b2da      	uxtb	r2, r3
 8000210:	490c      	ldr	r1, [pc, #48]	@ (8000244 <__NVIC_SetPriority+0x4c>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	0112      	lsls	r2, r2, #4
 8000218:	b2d2      	uxtb	r2, r2
 800021a:	440b      	add	r3, r1
 800021c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000220:	e00a      	b.n	8000238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4908      	ldr	r1, [pc, #32]	@ (8000248 <__NVIC_SetPriority+0x50>)
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	f003 030f 	and.w	r3, r3, #15
 800022e:	3b04      	subs	r3, #4
 8000230:	0112      	lsls	r2, r2, #4
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	440b      	add	r3, r1
 8000236:	761a      	strb	r2, [r3, #24]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	e000e100 	.word	0xe000e100
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800024c:	b480      	push	{r7}
 800024e:	b089      	sub	sp, #36	@ 0x24
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	f003 0307 	and.w	r3, r3, #7
 800025e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000260:	69fb      	ldr	r3, [r7, #28]
 8000262:	f1c3 0307 	rsb	r3, r3, #7
 8000266:	2b04      	cmp	r3, #4
 8000268:	bf28      	it	cs
 800026a:	2304      	movcs	r3, #4
 800026c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026e:	69fb      	ldr	r3, [r7, #28]
 8000270:	3304      	adds	r3, #4
 8000272:	2b06      	cmp	r3, #6
 8000274:	d902      	bls.n	800027c <NVIC_EncodePriority+0x30>
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	3b03      	subs	r3, #3
 800027a:	e000      	b.n	800027e <NVIC_EncodePriority+0x32>
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000280:	f04f 32ff 	mov.w	r2, #4294967295
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	fa02 f303 	lsl.w	r3, r2, r3
 800028a:	43da      	mvns	r2, r3
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	401a      	ands	r2, r3
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000294:	f04f 31ff 	mov.w	r1, #4294967295
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	fa01 f303 	lsl.w	r3, r1, r3
 800029e:	43d9      	mvns	r1, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a4:	4313      	orrs	r3, r2
         );
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3724      	adds	r7, #36	@ 0x24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <LL_RCC_HSI_Enable+0x18>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a03      	ldr	r2, [pc, #12]	@ (80002c8 <LL_RCC_HSI_Enable+0x18>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <LL_RCC_HSI_IsReady+0x20>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 0302 	and.w	r3, r3, #2
 80002d8:	2b02      	cmp	r3, #2
 80002da:	bf0c      	ite	eq
 80002dc:	2301      	moveq	r3, #1
 80002de:	2300      	movne	r3, #0
 80002e0:	b2db      	uxtb	r3, r3
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000

080002f0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002f8:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	4903      	ldr	r1, [pc, #12]	@ (8000314 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000306:	4313      	orrs	r3, r2
 8000308:	600b      	str	r3, [r1, #0]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <LL_RCC_SetSysClkSource+0x24>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	f023 0203 	bic.w	r2, r3, #3
 8000328:	4904      	ldr	r1, [pc, #16]	@ (800033c <LL_RCC_SetSysClkSource+0x24>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4313      	orrs	r3, r2
 800032e:	604b      	str	r3, [r1, #4]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000344:	4b03      	ldr	r3, [pc, #12]	@ (8000354 <LL_RCC_GetSysClkSource+0x14>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 030c 	and.w	r3, r3, #12
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40021000 	.word	0x40021000

08000358 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000368:	4904      	ldr	r1, [pc, #16]	@ (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	604b      	str	r3, [r1, #4]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000390:	4904      	ldr	r1, [pc, #16]	@ (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	604b      	str	r3, [r1, #4]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80003b8:	4904      	ldr	r1, [pc, #16]	@ (80003cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4313      	orrs	r3, r2
 80003be:	604b      	str	r3, [r1, #4]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003d4:	4b04      	ldr	r3, [pc, #16]	@ (80003e8 <LL_RCC_PLL_Enable+0x18>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a03      	ldr	r2, [pc, #12]	@ (80003e8 <LL_RCC_PLL_Enable+0x18>)
 80003da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <LL_RCC_PLL_IsReady+0x20>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80003fc:	bf0c      	ite	eq
 80003fe:	2301      	moveq	r3, #1
 8000400:	2300      	movne	r3, #0
 8000402:	b2db      	uxtb	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	430b      	orrs	r3, r1
 800042c:	4903      	ldr	r1, [pc, #12]	@ (800043c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800042e:	4313      	orrs	r3, r2
 8000430:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <LL_APB1_GRP1_EnableClock+0x2c>)
 800044a:	69da      	ldr	r2, [r3, #28]
 800044c:	4907      	ldr	r1, [pc, #28]	@ (800046c <LL_APB1_GRP1_EnableClock+0x2c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000456:	69da      	ldr	r2, [r3, #28]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4013      	ands	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <LL_APB2_GRP1_EnableClock+0x2c>)
 800047a:	699a      	ldr	r2, [r3, #24]
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <LL_APB2_GRP1_EnableClock+0x2c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000486:	699a      	ldr	r2, [r3, #24]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4013      	ands	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <LL_FLASH_SetLatency+0x24>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f023 0207 	bic.w	r2, r3, #7
 80004b0:	4904      	ldr	r1, [pc, #16]	@ (80004c4 <LL_FLASH_SetLatency+0x24>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	600b      	str	r3, [r1, #0]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40022000 	.word	0x40022000

080004c8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004cc:	4b03      	ldr	r3, [pc, #12]	@ (80004dc <LL_FLASH_GetLatency+0x14>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f003 0307 	and.w	r3, r3, #7
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40022000 	.word	0x40022000

080004e0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60da      	str	r2, [r3, #12]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	615a      	str	r2, [r3, #20]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000538:	2b40      	cmp	r3, #64	@ 0x40
 800053a:	bf0c      	ite	eq
 800053c:	2301      	moveq	r3, #1
 800053e:	2300      	movne	r3, #0
 8000540:	b2db      	uxtb	r3, r3
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055c:	2b80      	cmp	r3, #128	@ 0x80
 800055e:	bf0c      	ite	eq
 8000560:	2301      	moveq	r3, #1
 8000562:	2300      	movne	r3, #0
 8000564:	b2db      	uxtb	r3, r3
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800057c:	78fa      	ldrb	r2, [r7, #3]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	605a      	str	r2, [r3, #4]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	b29a      	uxth	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	615a      	str	r2, [r3, #20]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	b29b      	uxth	r3, r3
 80005de:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4013      	ands	r3, r2
 80005e6:	041a      	lsls	r2, r3, #16
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	43d9      	mvns	r1, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	400b      	ands	r3, r1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	611a      	str	r2, [r3, #16]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800060c:	4a03      	ldr	r2, [pc, #12]	@ (800061c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000612:	6053      	str	r3, [r2, #4]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40010000 	.word	0x40010000

08000620 <uart_print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_print(const char *str)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t length = strlen(str);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff fd8f 	bl	800014c <strlen>
 800062e:	60b8      	str	r0, [r7, #8]
  for (uint32_t i = 0; i < length; i++)
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e011      	b.n	800065a <uart_print+0x3a>
  {
    // Ch�? cho đến khi bộ truy�?n sẵn sàng
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 8000636:	bf00      	nop
 8000638:	4810      	ldr	r0, [pc, #64]	@ (800067c <uart_print+0x5c>)
 800063a:	f7ff ff87 	bl	800054c <LL_USART_IsActiveFlag_TXE>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f9      	beq.n	8000638 <uart_print+0x18>
      ;
    LL_USART_TransmitData8(USART1, (uint8_t)str[i]);
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	480b      	ldr	r0, [pc, #44]	@ (800067c <uart_print+0x5c>)
 8000650:	f7ff ff8e 	bl	8000570 <LL_USART_TransmitData8>
  for (uint32_t i = 0; i < length; i++)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3e9      	bcc.n	8000636 <uart_print+0x16>
  }
  // �?ảm bảo gửi xong byte cuối cùng
  while (!LL_USART_IsActiveFlag_TC(USART1))
 8000662:	bf00      	nop
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <uart_print+0x5c>)
 8000666:	f7ff ff5f 	bl	8000528 <LL_USART_IsActiveFlag_TC>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f9      	beq.n	8000664 <uart_print+0x44>
    ;
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40013800 	.word	0x40013800

08000680 <uart_printf>:

void uart_printf(const char *format, ...)
{
 8000680:	b40f      	push	{r0, r1, r2, r3}
 8000682:	b580      	push	{r7, lr}
 8000684:	b0a2      	sub	sp, #136	@ 0x88
 8000686:	af00      	add	r7, sp, #0
  char buffer[128]; // Tạo buffer đủ lớn để chứa chuỗi kết quả
  va_list args;
  va_start(args, format);
 8000688:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800068c:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args); // Dùng vsnprintf để format chuỗi
 800068e:	f107 0008 	add.w	r0, r7, #8
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	f000 fed3 	bl	8001444 <vsniprintf>
  va_end(args);
  uart_print(buffer); // In chuỗi format qua UART
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffbc 	bl	8000620 <uart_print>
}
 80006a8:	bf00      	nop
 80006aa:	3788      	adds	r7, #136	@ 0x88
 80006ac:	46bd      	mov	sp, r7
 80006ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b2:	b004      	add	sp, #16
 80006b4:	4770      	bx	lr
	...

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff fed6 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006c4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80006c8:	f7ff feba 	bl	8000440 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f7ff fd45 	bl	800015c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80006d2:	f7ff fd67 	bl	80001a4 <__NVIC_GetPriorityGrouping>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2200      	movs	r2, #0
 80006da:	210f      	movs	r1, #15
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fdb5 	bl	800024c <NVIC_EncodePriority>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ea:	f7ff fd85 	bl	80001f8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80006ee:	f7ff ff87 	bl	8000600 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f845 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f8d9 	bl	80008ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006fa:	f000 f87f 	bl	80007fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_I2C1_GPIO_config();
 80006fe:	f000 f919 	bl	8000934 <i2c_I2C1_GPIO_config>
  i2c_I2C1_config();
 8000702:	f000 f939 	bl	8000978 <i2c_I2C1_config>

  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000706:	4919      	ldr	r1, [pc, #100]	@ (800076c <main+0xb4>)
 8000708:	4819      	ldr	r0, [pc, #100]	@ (8000770 <main+0xb8>)
 800070a:	f7ff ff4e 	bl	80005aa <LL_GPIO_ResetOutputPin>

  NVIC_EnableIRQ(I2C1_EV_IRQn); // Kích hoạt ngắt sự kiện I2C1
 800070e:	201f      	movs	r0, #31
 8000710:	f7ff fd56 	bl	80001c0 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(I2C1_ER_IRQn); // Kích hoạt ngắt lỗi I2C1
 8000714:	2020      	movs	r0, #32
 8000716:	f7ff fd53 	bl	80001c0 <__NVIC_EnableIRQ>
  //  uint8_t data = 5;
  uint8_t data1[8] = {8, 1, 2, 3, 4, 5, 6, 7};
 800071a:	4a16      	ldr	r2, [pc, #88]	@ (8000774 <main+0xbc>)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000722:	e883 0003 	stmia.w	r3, {r0, r1}
  //  if (i2c_I2C1_masterReceive(0x68 << 1, 0x03, &rx_data[0],1000))
  //  {
  //    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
  //  }
  //  i2c_I2C1_masterReceive(117, &data, 1);
  uart_print("master\r\n");
 8000726:	4814      	ldr	r0, [pc, #80]	@ (8000778 <main+0xc0>)
 8000728:	f7ff ff7a 	bl	8000620 <uart_print>
//  LL_mDelay(10000);
  uint8_t count=0;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    if (i2c_I2C1_masterTransmit(0x55 << 1, 0x03, data1, 1, 1000))
 8000730:	1d3a      	adds	r2, r7, #4
 8000732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	2103      	movs	r1, #3
 800073c:	20aa      	movs	r0, #170	@ 0xaa
 800073e:	f000 f9a3 	bl	8000a88 <i2c_I2C1_masterTransmit>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00b      	beq.n	8000760 <main+0xa8>
	    {
	      LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 8000748:	4908      	ldr	r1, [pc, #32]	@ (800076c <main+0xb4>)
 800074a:	4809      	ldr	r0, [pc, #36]	@ (8000770 <main+0xb8>)
 800074c:	f7ff ff3c 	bl	80005c8 <LL_GPIO_TogglePin>
	      uart_printf("count=%d\r\n",count);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	4619      	mov	r1, r3
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <main+0xc4>)
 8000756:	f7ff ff93 	bl	8000680 <uart_printf>
	      count++;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	3301      	adds	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
	    }
	    LL_mDelay(5000);
 8000760:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000764:	f000 fe10 	bl	8001388 <LL_mDelay>
	    if (i2c_I2C1_masterTransmit(0x55 << 1, 0x03, data1, 1, 1000))
 8000768:	e7e2      	b.n	8000730 <main+0x78>
 800076a:	bf00      	nop
 800076c:	04200020 	.word	0x04200020
 8000770:	40011000 	.word	0x40011000
 8000774:	08001da0 	.word	0x08001da0
 8000778:	08001d88 	.word	0x08001d88
 800077c:	08001d94 	.word	0x08001d94

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fe8b 	bl	80004a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800078a:	bf00      	nop
 800078c:	f7ff fe9c 	bl	80004c8 <LL_FLASH_GetLatency>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1fa      	bne.n	800078c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000796:	2010      	movs	r0, #16
 8000798:	f7ff fdaa 	bl	80002f0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800079c:	f7ff fd88 	bl	80002b0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007a0:	bf00      	nop
 80007a2:	f7ff fd93 	bl	80002cc <LL_RCC_HSI_IsReady>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d1fa      	bne.n	80007a2 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_2);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fe2e 	bl	8000410 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80007b4:	f7ff fe0c 	bl	80003d0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80007b8:	bf00      	nop
 80007ba:	f7ff fe17 	bl	80003ec <LL_RCC_PLL_IsReady>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d1fa      	bne.n	80007ba <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fdc7 	bl	8000358 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fdd8 	bl	8000380 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fde9 	bl	80003a8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f7ff fd9e 	bl	8000318 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007dc:	bf00      	nop
 80007de:	f7ff fdaf 	bl	8000340 <LL_RCC_GetSysClkSource>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	d1fa      	bne.n	80007de <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(8000000);
 80007e8:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <SystemClock_Config+0x78>)
 80007ea:	f000 fdbf 	bl	800136c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007ee:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <SystemClock_Config+0x78>)
 80007f0:	f000 fdee 	bl	80013d0 <LL_SetSystemCoreClock>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	007a1200 	.word	0x007a1200

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000824:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000828:	f7ff fe22 	bl	8000470 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800082c:	2004      	movs	r0, #4
 800082e:	f7ff fe1f 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_USART1_UART_Init+0xa0>)
 8000834:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000836:	2309      	movs	r3, #9
 8000838:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <MX_USART1_UART_Init+0xa4>)
 8000848:	f000 fb07 	bl	8000e5a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_USART1_UART_Init+0xa8>)
 800084e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000850:	2304      	movs	r3, #4
 8000852:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_USART1_UART_Init+0xa4>)
 800085a:	f000 fafe 	bl	8000e5a <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800085e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000862:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000870:	230c      	movs	r3, #12
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <MX_USART1_UART_Init+0xac>)
 8000884:	f000 fcf8 	bl	8001278 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <MX_USART1_UART_Init+0xac>)
 800088a:	f7ff fe38 	bl	80004fe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <MX_USART1_UART_Init+0xac>)
 8000890:	f7ff fe26 	bl	80004e0 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	@ 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	04020002 	.word	0x04020002
 80008a0:	40010800 	.word	0x40010800
 80008a4:	04040004 	.word	0x04040004
 80008a8:	40013800 	.word	0x40013800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80008c0:	2010      	movs	r0, #16
 80008c2:	f7ff fdd5 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80008c6:	2020      	movs	r0, #32
 80008c8:	f7ff fdd2 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80008cc:	2004      	movs	r0, #4
 80008ce:	f7ff fdcf 	bl	8000470 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80008d2:	2008      	movs	r0, #8
 80008d4:	f7ff fdcc 	bl	8000470 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80008d8:	4913      	ldr	r1, [pc, #76]	@ (8000928 <MX_GPIO_Init+0x7c>)
 80008da:	4814      	ldr	r0, [pc, #80]	@ (800092c <MX_GPIO_Init+0x80>)
 80008dc:	f7ff fe65 	bl	80005aa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80008e0:	f242 0120 	movw	r1, #8224	@ 0x2020
 80008e4:	4812      	ldr	r0, [pc, #72]	@ (8000930 <MX_GPIO_Init+0x84>)
 80008e6:	f7ff fe60 	bl	80005aa <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_GPIO_Init+0x7c>)
 80008ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008f2:	2302      	movs	r3, #2
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <MX_GPIO_Init+0x80>)
 8000900:	f000 faab 	bl	8000e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000904:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000908:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800090a:	2301      	movs	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800090e:	2302      	movs	r3, #2
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_GPIO_Init+0x84>)
 800091c:	f000 fa9d 	bl	8000e5a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	04200020 	.word	0x04200020
 800092c:	40011000 	.word	0x40011000
 8000930:	40010c00 	.word	0x40010c00

08000934 <i2c_I2C1_GPIO_config>:
/* USER CODE BEGIN 4 */
/**
 * The function configures GPIO pins PB6 (SCL) and PB7 (SDA) for I2C communication on I2C1 interface.
 */
void i2c_I2C1_GPIO_config(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  // PB6 (SCL), PB7(SDA)
  // Bật xung clock PORTB
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000938:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <i2c_I2C1_GPIO_config+0x3c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a0c      	ldr	r2, [pc, #48]	@ (8000970 <i2c_I2C1_GPIO_config+0x3c>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6193      	str	r3, [r2, #24]
  // Chế độ: xuất 10Mhz
  GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_MODE7); // Xóa MODE6 và MODE7
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <i2c_I2C1_GPIO_config+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <i2c_I2C1_GPIO_config+0x40>)
 800094a:	f023 534c 	bic.w	r3, r3, #855638016	@ 0x33000000
 800094e:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (GPIO_CRL_MODE6_0 | GPIO_CRL_MODE7_0);
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <i2c_I2C1_GPIO_config+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <i2c_I2C1_GPIO_config+0x40>)
 8000956:	f043 5388 	orr.w	r3, r3, #285212672	@ 0x11000000
 800095a:	6013      	str	r3, [r2, #0]
  // CNF: Alternate function Open-Drain
  GPIOB->CRL |= (GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <i2c_I2C1_GPIO_config+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <i2c_I2C1_GPIO_config+0x40>)
 8000962:	f043 434c 	orr.w	r3, r3, #3422552064	@ 0xcc000000
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000
 8000974:	40010c00 	.word	0x40010c00

08000978 <i2c_I2C1_config>:
/**
 * The function `i2c_I2C1_config` configures the I2C1 peripheral for communication at a speed of
 * 100KHz.
 */
void i2c_I2C1_config(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  // Bật xung clock I2C
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <i2c_I2C1_config+0x5c>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4a14      	ldr	r2, [pc, #80]	@ (80009d4 <i2c_I2C1_config+0x5c>)
 8000982:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000986:	61d3      	str	r3, [r2, #28]

  // Cấu hình tần số I2C dùng thanh ghi I2C_CR2
  // tần số này trùng với tần số APB1 mà bạn đã cấu hình trước đó
  I2C1->CR2 &= ~(I2C_CR2_FREQ);
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <i2c_I2C1_config+0x60>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <i2c_I2C1_config+0x60>)
 800098e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000992:	6053      	str	r3, [r2, #4]
  I2C1->CR2 |= (8UL << 0);
 8000994:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <i2c_I2C1_config+0x60>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <i2c_I2C1_config+0x60>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6053      	str	r3, [r2, #4]
  //  Cấu hình TRISE dùng thanh ghi I2C_TRISE
  //  như đã thấy ở phần ví dụ bit 5:0 của thanh ghi I2C_TRISE, ta dùng tần số 8Mhz nên TRISE= 0x09
  I2C1->TRISE &= ~(0xFF);
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <i2c_I2C1_config+0x60>)
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <i2c_I2C1_config+0x60>)
 80009a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80009aa:	6213      	str	r3, [r2, #32]
  I2C1->TRISE |= 0x09;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <i2c_I2C1_config+0x60>)
 80009ae:	6a1b      	ldr	r3, [r3, #32]
 80009b0:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <i2c_I2C1_config+0x60>)
 80009b2:	f043 0309 	orr.w	r3, r3, #9
 80009b6:	6213      	str	r3, [r2, #32]
  // Cấu hình tốc độ I2C (100KHz SCL) dùng thanh ghi I2C_CCR
  // ta có f=8Mhz -> T=0.125us, ta muốn T_high=T_low=5us => CCR=5us/0.125us=40 <=> 0x28
  //ta có f=8Mhz -> T=0.125us, ta muốn T_high=T_low=50us => CCR=50us/0.125us=400 <=> 0x190 (10KHz)
  I2C1->CCR = 0x190;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <i2c_I2C1_config+0x60>)
 80009ba:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80009be:	61da      	str	r2, [r3, #28]
  // Bật ngoại vi I2C dùng I2C_CR1 bằng cách đặt PE=1
  I2C1->CR1 |= I2C_CR1_PE;
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <i2c_I2C1_config+0x60>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <i2c_I2C1_config+0x60>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40005400 	.word	0x40005400

080009dc <I2C1_EV_IRQHandler>:
  }
  return true;
}

void I2C1_EV_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  // Kiểm tra c�? SB (Start Bit) được set
  if (I2C1->SR1 & I2C_SR1_SB)
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <I2C1_EV_IRQHandler+0x1a>
  {
    // Gửi địa chỉ thiết bị với bit ghi (0)
    I2C1->DR = Address_slave;
 80009ec:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <I2C1_EV_IRQHandler+0x94>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 80009f2:	611a      	str	r2, [r3, #16]
      LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
      // Tắt các ngắt để tránh kích hoạt ngắt không cần thiết
      I2C1->CR2 &= ~(I2C_CR2_ITBUFEN | I2C_CR2_ITEVTEN | I2C_CR2_ITERREN);
    }
  }
}
 80009f4:	e038      	b.n	8000a68 <I2C1_EV_IRQHandler+0x8c>
  else if (I2C1->SR1 & I2C_SR1_ADDR)
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d008      	beq.n	8000a14 <I2C1_EV_IRQHandler+0x38>
    (void)I2C1->SR1;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a04:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a08:	699b      	ldr	r3, [r3, #24]
    I2C1->DR = reg_slave;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <I2C1_EV_IRQHandler+0x98>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a10:	611a      	str	r2, [r3, #16]
}
 8000a12:	e029      	b.n	8000a68 <I2C1_EV_IRQHandler+0x8c>
  else if (I2C1->SR1 & I2C_SR1_TXE)
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d023      	beq.n	8000a68 <I2C1_EV_IRQHandler+0x8c>
    if (tx_index < tx_len)
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <I2C1_EV_IRQHandler+0x9c>)
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <I2C1_EV_IRQHandler+0xa0>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d20c      	bcs.n	8000a46 <I2C1_EV_IRQHandler+0x6a>
      I2C1->DR = tx_data[tx_index++];
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <I2C1_EV_IRQHandler+0xa4>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <I2C1_EV_IRQHandler+0x9c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	1c59      	adds	r1, r3, #1
 8000a36:	b2c8      	uxtb	r0, r1
 8000a38:	490f      	ldr	r1, [pc, #60]	@ (8000a78 <I2C1_EV_IRQHandler+0x9c>)
 8000a3a:	7008      	strb	r0, [r1, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a42:	611a      	str	r2, [r3, #16]
}
 8000a44:	e010      	b.n	8000a68 <I2C1_EV_IRQHandler+0x8c>
      I2C1->CR1 |= I2C_CR1_STOP;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a50:	6013      	str	r3, [r2, #0]
      LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000a52:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000a56:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <I2C1_EV_IRQHandler+0xa8>)
 8000a58:	f7ff fd98 	bl	800058c <LL_GPIO_SetOutputPin>
      I2C1->CR2 &= ~(I2C_CR2_ITBUFEN | I2C_CR2_ITEVTEN | I2C_CR2_ITERREN);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a02      	ldr	r2, [pc, #8]	@ (8000a6c <I2C1_EV_IRQHandler+0x90>)
 8000a62:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a66:	6053      	str	r3, [r2, #4]
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	20000070 	.word	0x20000070
 8000a74:	20000071 	.word	0x20000071
 8000a78:	20000079 	.word	0x20000079
 8000a7c:	20000078 	.word	0x20000078
 8000a80:	20000074 	.word	0x20000074
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <i2c_I2C1_masterTransmit>:
bool i2c_I2C1_masterTransmit(uint8_t Addr, uint8_t reg, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	603a      	str	r2, [r7, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	460b      	mov	r3, r1
 8000a98:	71bb      	strb	r3, [r7, #6]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	717b      	strb	r3, [r7, #5]
  uint32_t count = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	72fb      	strb	r3, [r7, #11]
  // Ch�? I2C vào trạng thái bận
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 8000aa6:	e008      	b.n	8000aba <i2c_I2C1_masterTransmit+0x32>
  {
    if (++count > timeout)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d901      	bls.n	8000aba <i2c_I2C1_masterTransmit+0x32>
      return false;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e07c      	b.n	8000bb4 <i2c_I2C1_masterTransmit+0x12c>
  while ((I2C1->SR1 & I2C_SR2_BUSY))
 8000aba:	4b41      	ldr	r3, [pc, #260]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f0      	bne.n	8000aa8 <i2c_I2C1_masterTransmit+0x20>
  }

  // Bit POS được xóa để đảm bảo I2C hoạt động trong chế độ chuẩn (standard mode).
  I2C1->CR1 &= ~(I2C_CR1_POS);
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000acc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000ad0:	6013      	str	r3, [r2, #0]
  // Tạo đi�?u kiện Start
  I2C1->CR1 |= I2C_CR1_START;
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a3a      	ldr	r2, [pc, #232]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000adc:	6013      	str	r3, [r2, #0]
  // Ch�? bit start được tạo
  while (!(I2C1->SR1 & I2C_SR1_SB))
 8000ade:	e008      	b.n	8000af2 <i2c_I2C1_masterTransmit+0x6a>
  {
    if (++count > timeout)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d901      	bls.n	8000af2 <i2c_I2C1_masterTransmit+0x6a>
      return false;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e060      	b.n	8000bb4 <i2c_I2C1_masterTransmit+0x12c>
  while (!(I2C1->SR1 & I2C_SR1_SB))
 8000af2:	4b33      	ldr	r3, [pc, #204]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f0      	beq.n	8000ae0 <i2c_I2C1_masterTransmit+0x58>
  }
  count = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  // Gửi địa chỉ slave
  I2C1->DR = Addr;
 8000b02:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	6113      	str	r3, [r2, #16]
  // Ch�? ACK
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8000b08:	e008      	b.n	8000b1c <i2c_I2C1_masterTransmit+0x94>
  {
    if (++count > timeout)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d901      	bls.n	8000b1c <i2c_I2C1_masterTransmit+0x94>
      return false;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e04b      	b.n	8000bb4 <i2c_I2C1_masterTransmit+0x12c>
  while (!(I2C1->SR1 & I2C_SR1_ADDR))
 8000b1c:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f0      	beq.n	8000b0a <i2c_I2C1_masterTransmit+0x82>
  }
  count = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  // Xóa c�? Addr
  (void)I2C1->SR1;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 8000b30:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b32:	699b      	ldr	r3, [r3, #24]
  // Gửi thanh ghi thiết bị cần ghi ra
  I2C1->DR = reg;
 8000b34:	4a22      	ldr	r2, [pc, #136]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	6113      	str	r3, [r2, #16]
  // Truy�?n dữ liệu
  while (len > 0U)
 8000b3a:	e031      	b.n	8000ba0 <i2c_I2C1_masterTransmit+0x118>
  {
    // Kiểm tra bộ đệm Tx có trống không
    while (!(I2C1->SR1 & I2C_SR1_TXE))
    {
      if (++count > timeout)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d901      	bls.n	8000b4e <i2c_I2C1_masterTransmit+0xc6>
        return false;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e032      	b.n	8000bb4 <i2c_I2C1_masterTransmit+0x12c>
    while (!(I2C1->SR1 & I2C_SR1_TXE))
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f0      	beq.n	8000b3c <i2c_I2C1_masterTransmit+0xb4>
    }
    count = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
    // Gửi dữ liệu ra
    I2C1->DR = pData[index];
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b68:	611a      	str	r2, [r3, #16]
    len--;
 8000b6a:	797b      	ldrb	r3, [r7, #5]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	717b      	strb	r3, [r7, #5]
    index++;
 8000b70:	7afb      	ldrb	r3, [r7, #11]
 8000b72:	3301      	adds	r3, #1
 8000b74:	72fb      	strb	r3, [r7, #11]
    // Nếu truy�?n xong BTF=1 và len != 0 thì truy�?n tiếp
    if ((I2C1->SR1 & I2C_SR1_BTF) && (len != 0))
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00e      	beq.n	8000ba0 <i2c_I2C1_masterTransmit+0x118>
 8000b82:	797b      	ldrb	r3, [r7, #5]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <i2c_I2C1_masterTransmit+0x118>
    {
      // Gửi dữ liệu ra
      I2C1->DR = pData[index];
 8000b88:	7afb      	ldrb	r3, [r7, #11]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000b92:	611a      	str	r2, [r3, #16]
      len--;
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	717b      	strb	r3, [r7, #5]
      index++;
 8000b9a:	7afb      	ldrb	r3, [r7, #11]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	72fb      	strb	r3, [r7, #11]
  while (len > 0U)
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1d3      	bne.n	8000b4e <i2c_I2C1_masterTransmit+0xc6>
    }
  }
  // Tạo đi�?u kiện dừng
  I2C1->CR1 |= I2C_CR1_STOP;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <i2c_I2C1_masterTransmit+0x138>)
 8000bac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb0:	6013      	str	r3, [r2, #0]
  return true;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40005400 	.word	0x40005400

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f000 fc02 	bl	8001460 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20005000 	.word	0x20005000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000007c 	.word	0x2000007c
 8000c90:	200001c8 	.word	0x200001c8

08000c94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca0:	f7ff fff8 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ca6:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:

  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cbc:	4c09      	ldr	r4, [pc, #36]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f000 fbcf 	bl	800146c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cce:	f7ff fcf3 	bl	80006b8 <main>
  bx lr
 8000cd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000cdc:	08001e04 	.word	0x08001e04
  ldr r2, =_sbss
 8000ce0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000ce4:	200001c8 	.word	0x200001c8

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>

08000cea <LL_GPIO_SetPinMode>:
{
 8000cea:	b490      	push	{r4, r7}
 8000cec:	b088      	sub	sp, #32
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	0e1b      	lsrs	r3, r3, #24
 8000cfe:	4413      	add	r3, r2
 8000d00:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000d02:	6822      	ldr	r2, [r4, #0]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	401a      	ands	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	61bb      	str	r3, [r7, #24]
  return result;
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fab3 f383 	clz	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	6023      	str	r3, [r4, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc90      	pop	{r4, r7}
 8000d4c:	4770      	bx	lr

08000d4e <LL_GPIO_SetPinSpeed>:
{
 8000d4e:	b490      	push	{r4, r7}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	0e1b      	lsrs	r3, r3, #24
 8000d62:	4413      	add	r3, r2
 8000d64:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000d66:	6822      	ldr	r2, [r4, #0]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	613b      	str	r3, [r7, #16]
  return result;
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	fab3 f383 	clz	r3, r3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	2103      	movs	r1, #3
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	401a      	ands	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	61bb      	str	r3, [r7, #24]
  return result;
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fab3 f383 	clz	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6023      	str	r3, [r4, #0]
}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc90      	pop	{r4, r7}
 8000db0:	4770      	bx	lr

08000db2 <LL_GPIO_SetPinOutputType>:
{
 8000db2:	b490      	push	{r4, r7}
 8000db4:	b088      	sub	sp, #32
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	0e1b      	lsrs	r3, r3, #24
 8000dc6:	4413      	add	r3, r2
 8000dc8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000dca:	6822      	ldr	r2, [r4, #0]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	613b      	str	r3, [r7, #16]
  return result;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	fab3 f383 	clz	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	2104      	movs	r1, #4
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	fa93 f3a3 	rbit	r3, r3
 8000df6:	61bb      	str	r3, [r7, #24]
  return result;
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fab3 f383 	clz	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	6023      	str	r3, [r4, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc90      	pop	{r4, r7}
 8000e14:	4770      	bx	lr

08000e16 <LL_GPIO_SetPinPull>:
{
 8000e16:	b480      	push	{r7}
 8000e18:	b087      	sub	sp, #28
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	613b      	str	r3, [r7, #16]
  return result;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	fab3 f383 	clz	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	60da      	str	r2, [r3, #12]
}
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b088      	sub	sp, #32
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	0c1b      	lsrs	r3, r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	60fb      	str	r3, [r7, #12]
  return result;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000e7c:	fab3 f383 	clz	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000e84:	e044      	b.n	8000f10 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000e86:	2201      	movs	r2, #1
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d03a      	beq.n	8000f0a <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	2b07      	cmp	r3, #7
 8000e98:	d806      	bhi.n	8000ea8 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000e9a:	f240 1201 	movw	r2, #257	@ 0x101
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	e008      	b.n	8000eba <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	3b08      	subs	r3, #8
 8000eac:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eb8:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d106      	bne.n	8000ed0 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	69b9      	ldr	r1, [r7, #24]
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa3 	bl	8000e16 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	69b9      	ldr	r1, [r7, #24]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff06 	bl	8000cea <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d003      	beq.n	8000eee <LL_GPIO_Init+0x94>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b09      	cmp	r3, #9
 8000eec:	d10d      	bne.n	8000f0a <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	69b9      	ldr	r1, [r7, #24]
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff29 	bl	8000d4e <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	461a      	mov	r2, r3
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff54 	bl	8000db2 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1b4      	bne.n	8000e86 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <LL_RCC_GetSysClkSource>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <LL_RCC_GetSysClkSource+0x14>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000

08000f40 <LL_RCC_GetAHBPrescaler>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <LL_RCC_GetAHBPrescaler+0x14>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000

08000f58 <LL_RCC_GetAPB1Prescaler>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_RCC_GetAPB2Prescaler>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	40021000 	.word	0x40021000

08000f88 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <LL_RCC_PLL_GetMainSource+0x14>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <LL_RCC_PLL_GetPrediv+0x18>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	0c5b      	lsrs	r3, r3, #17
 8000fc2:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000fdc:	f000 f820 	bl	8001020 <RCC_GetSystemClockFreq>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f83e 	bl	800106c <RCC_GetHCLKClockFreq>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f84c 	bl	8001098 <RCC_GetPCLK1ClockFreq>
 8001000:	4602      	mov	r2, r0
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f858 	bl	80010c0 <RCC_GetPCLK2ClockFreq>
 8001010:	4602      	mov	r2, r0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60da      	str	r2, [r3, #12]
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800102a:	f7ff ff7d 	bl	8000f28 <LL_RCC_GetSysClkSource>
 800102e:	4603      	mov	r3, r0
 8001030:	2b08      	cmp	r3, #8
 8001032:	d00c      	beq.n	800104e <RCC_GetSystemClockFreq+0x2e>
 8001034:	2b08      	cmp	r3, #8
 8001036:	d80e      	bhi.n	8001056 <RCC_GetSystemClockFreq+0x36>
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <RCC_GetSystemClockFreq+0x22>
 800103c:	2b04      	cmp	r3, #4
 800103e:	d003      	beq.n	8001048 <RCC_GetSystemClockFreq+0x28>
 8001040:	e009      	b.n	8001056 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <RCC_GetSystemClockFreq+0x48>)
 8001044:	607b      	str	r3, [r7, #4]
      break;
 8001046:	e009      	b.n	800105c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <RCC_GetSystemClockFreq+0x48>)
 800104a:	607b      	str	r3, [r7, #4]
      break;
 800104c:	e006      	b.n	800105c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800104e:	f000 f84b 	bl	80010e8 <RCC_PLL_GetFreqDomain_SYS>
 8001052:	6078      	str	r0, [r7, #4]
      break;
 8001054:	e002      	b.n	800105c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <RCC_GetSystemClockFreq+0x48>)
 8001058:	607b      	str	r3, [r7, #4]
      break;
 800105a:	bf00      	nop
  }

  return frequency;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	007a1200 	.word	0x007a1200

0800106c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001074:	f7ff ff64 	bl	8000f40 <LL_RCC_GetAHBPrescaler>
 8001078:	4603      	mov	r3, r0
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <RCC_GetHCLKClockFreq+0x28>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	40d3      	lsrs	r3, r2
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	08001da8 	.word	0x08001da8

08001098 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80010a0:	f7ff ff5a 	bl	8000f58 <LL_RCC_GetAPB1Prescaler>
 80010a4:	4603      	mov	r3, r0
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <RCC_GetPCLK1ClockFreq+0x24>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	40d3      	lsrs	r3, r2
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08001db8 	.word	0x08001db8

080010c0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80010c8:	f7ff ff52 	bl	8000f70 <LL_RCC_GetAPB2Prescaler>
 80010cc:	4603      	mov	r3, r0
 80010ce:	0adb      	lsrs	r3, r3, #11
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <RCC_GetPCLK2ClockFreq+0x24>)
 80010d2:	5cd3      	ldrb	r3, [r2, r3]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	40d3      	lsrs	r3, r2
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	08001db8 	.word	0x08001db8

080010e8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80010f6:	f7ff ff47 	bl	8000f88 <LL_RCC_PLL_GetMainSource>
 80010fa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d004      	beq.n	800110c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001108:	d003      	beq.n	8001112 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800110a:	e00b      	b.n	8001124 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800110c:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800110e:	607b      	str	r3, [r7, #4]
      break;
 8001110:	e00b      	b.n	800112a <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001112:	f7ff ff51 	bl	8000fb8 <LL_RCC_PLL_GetPrediv>
 8001116:	4603      	mov	r3, r0
 8001118:	3301      	adds	r3, #1
 800111a:	4a0b      	ldr	r2, [pc, #44]	@ (8001148 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800111c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001120:	607b      	str	r3, [r7, #4]
      break;
 8001122:	e002      	b.n	800112a <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001126:	607b      	str	r3, [r7, #4]
      break;
 8001128:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800112a:	f7ff ff39 	bl	8000fa0 <LL_RCC_PLL_GetMultiplicator>
 800112e:	4603      	mov	r3, r0
 8001130:	0c9b      	lsrs	r3, r3, #18
 8001132:	3302      	adds	r3, #2
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	fb02 f303 	mul.w	r3, r2, r3
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	003d0900 	.word	0x003d0900
 8001148:	007a1200 	.word	0x007a1200

0800114c <LL_USART_IsEnabled>:
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800115c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <LL_USART_SetStopBitsLength>:
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	611a      	str	r2, [r3, #16]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <LL_USART_SetHWFlowCtrl>:
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	615a      	str	r2, [r3, #20]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
	...

080011bc <LL_USART_SetBaudRate>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009a      	lsls	r2, r3, #2
 80011d2:	441a      	add	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	4a25      	ldr	r2, [pc, #148]	@ (8001274 <LL_USART_SetBaudRate+0xb8>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	b299      	uxth	r1, r3
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009a      	lsls	r2, r3, #2
 80011f4:	441a      	add	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <LL_USART_SetBaudRate+0xb8>)
 8001200:	fba3 0302 	umull	r0, r3, r3, r2
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	2064      	movs	r0, #100	@ 0x64
 8001208:	fb00 f303 	mul.w	r3, r0, r3
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	3332      	adds	r3, #50	@ 0x32
 8001212:	4a18      	ldr	r2, [pc, #96]	@ (8001274 <LL_USART_SetBaudRate+0xb8>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	095b      	lsrs	r3, r3, #5
 800121a:	b29b      	uxth	r3, r3
 800121c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001220:	b29b      	uxth	r3, r3
 8001222:	440b      	add	r3, r1
 8001224:	b299      	uxth	r1, r3
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	009a      	lsls	r2, r3, #2
 8001230:	441a      	add	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	fbb2 f2f3 	udiv	r2, r2, r3
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <LL_USART_SetBaudRate+0xb8>)
 800123c:	fba3 0302 	umull	r0, r3, r3, r2
 8001240:	095b      	lsrs	r3, r3, #5
 8001242:	2064      	movs	r0, #100	@ 0x64
 8001244:	fb00 f303 	mul.w	r3, r0, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	3332      	adds	r3, #50	@ 0x32
 800124e:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <LL_USART_SetBaudRate+0xb8>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	b29b      	uxth	r3, r3
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	b29b      	uxth	r3, r3
 800125e:	440b      	add	r3, r1
 8001260:	b29b      	uxth	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	609a      	str	r2, [r3, #8]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	51eb851f 	.word	0x51eb851f

08001278 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff5e 	bl	800114c <LL_USART_IsEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d145      	bne.n	8001322 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800129e:	f023 030c 	bic.w	r3, r3, #12
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	6851      	ldr	r1, [r2, #4]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	68d2      	ldr	r2, [r2, #12]
 80012aa:	4311      	orrs	r1, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	6912      	ldr	r2, [r2, #16]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff57 	bl	8001172 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff63 	bl	8001196 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe7d 	bl	8000fd4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <LL_USART_Init+0xb4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d102      	bne.n	80012e8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	e00c      	b.n	8001302 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <LL_USART_Init+0xb8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	e005      	b.n	8001302 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <LL_USART_Init+0xbc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00c      	beq.n	8001322 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001318:	461a      	mov	r2, r3
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff4d 	bl	80011bc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001322:	7ffb      	ldrb	r3, [r7, #31]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013800 	.word	0x40013800
 8001330:	40004400 	.word	0x40004400
 8001334:	40004800 	.word	0x40004800

08001338 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <LL_InitTick+0x30>)
 800134c:	3b01      	subs	r3, #1
 800134e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <LL_InitTick+0x30>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <LL_InitTick+0x30>)
 8001358:	2205      	movs	r2, #5
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001374:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffdd 	bl	8001338 <LL_InitTick>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <LL_mDelay+0x44>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001396:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139e:	d00c      	beq.n	80013ba <LL_mDelay+0x32>
  {
    Delay++;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80013a6:	e008      	b.n	80013ba <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <LL_mDelay+0x44>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <LL_mDelay+0x32>
    {
      Delay--;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f3      	bne.n	80013a8 <LL_mDelay+0x20>
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80013d8:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <LL_SetSystemCoreClock+0x18>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000000 	.word	0x20000000

080013ec <_vsniprintf_r>:
 80013ec:	b530      	push	{r4, r5, lr}
 80013ee:	4614      	mov	r4, r2
 80013f0:	2c00      	cmp	r4, #0
 80013f2:	4605      	mov	r5, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	b09b      	sub	sp, #108	@ 0x6c
 80013f8:	da05      	bge.n	8001406 <_vsniprintf_r+0x1a>
 80013fa:	238b      	movs	r3, #139	@ 0x8b
 80013fc:	6003      	str	r3, [r0, #0]
 80013fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001402:	b01b      	add	sp, #108	@ 0x6c
 8001404:	bd30      	pop	{r4, r5, pc}
 8001406:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800140a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800140e:	bf0c      	ite	eq
 8001410:	4623      	moveq	r3, r4
 8001412:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	9305      	str	r3, [sp, #20]
 800141a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800141e:	9100      	str	r1, [sp, #0]
 8001420:	9104      	str	r1, [sp, #16]
 8001422:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001426:	4669      	mov	r1, sp
 8001428:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800142a:	f000 f997 	bl	800175c <_svfiprintf_r>
 800142e:	1c43      	adds	r3, r0, #1
 8001430:	bfbc      	itt	lt
 8001432:	238b      	movlt	r3, #139	@ 0x8b
 8001434:	602b      	strlt	r3, [r5, #0]
 8001436:	2c00      	cmp	r4, #0
 8001438:	d0e3      	beq.n	8001402 <_vsniprintf_r+0x16>
 800143a:	2200      	movs	r2, #0
 800143c:	9b00      	ldr	r3, [sp, #0]
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	e7df      	b.n	8001402 <_vsniprintf_r+0x16>
	...

08001444 <vsniprintf>:
 8001444:	b507      	push	{r0, r1, r2, lr}
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4613      	mov	r3, r2
 800144a:	460a      	mov	r2, r1
 800144c:	4601      	mov	r1, r0
 800144e:	4803      	ldr	r0, [pc, #12]	@ (800145c <vsniprintf+0x18>)
 8001450:	6800      	ldr	r0, [r0, #0]
 8001452:	f7ff ffcb 	bl	80013ec <_vsniprintf_r>
 8001456:	b003      	add	sp, #12
 8001458:	f85d fb04 	ldr.w	pc, [sp], #4
 800145c:	20000004 	.word	0x20000004

08001460 <__errno>:
 8001460:	4b01      	ldr	r3, [pc, #4]	@ (8001468 <__errno+0x8>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000004 	.word	0x20000004

0800146c <__libc_init_array>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	2600      	movs	r6, #0
 8001470:	4d0c      	ldr	r5, [pc, #48]	@ (80014a4 <__libc_init_array+0x38>)
 8001472:	4c0d      	ldr	r4, [pc, #52]	@ (80014a8 <__libc_init_array+0x3c>)
 8001474:	1b64      	subs	r4, r4, r5
 8001476:	10a4      	asrs	r4, r4, #2
 8001478:	42a6      	cmp	r6, r4
 800147a:	d109      	bne.n	8001490 <__libc_init_array+0x24>
 800147c:	f000 fc78 	bl	8001d70 <_init>
 8001480:	2600      	movs	r6, #0
 8001482:	4d0a      	ldr	r5, [pc, #40]	@ (80014ac <__libc_init_array+0x40>)
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <__libc_init_array+0x44>)
 8001486:	1b64      	subs	r4, r4, r5
 8001488:	10a4      	asrs	r4, r4, #2
 800148a:	42a6      	cmp	r6, r4
 800148c:	d105      	bne.n	800149a <__libc_init_array+0x2e>
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	f855 3b04 	ldr.w	r3, [r5], #4
 8001494:	4798      	blx	r3
 8001496:	3601      	adds	r6, #1
 8001498:	e7ee      	b.n	8001478 <__libc_init_array+0xc>
 800149a:	f855 3b04 	ldr.w	r3, [r5], #4
 800149e:	4798      	blx	r3
 80014a0:	3601      	adds	r6, #1
 80014a2:	e7f2      	b.n	800148a <__libc_init_array+0x1e>
 80014a4:	08001dfc 	.word	0x08001dfc
 80014a8:	08001dfc 	.word	0x08001dfc
 80014ac:	08001dfc 	.word	0x08001dfc
 80014b0:	08001e00 	.word	0x08001e00

080014b4 <__retarget_lock_acquire_recursive>:
 80014b4:	4770      	bx	lr

080014b6 <__retarget_lock_release_recursive>:
 80014b6:	4770      	bx	lr

080014b8 <_free_r>:
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	4605      	mov	r5, r0
 80014bc:	2900      	cmp	r1, #0
 80014be:	d040      	beq.n	8001542 <_free_r+0x8a>
 80014c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014c4:	1f0c      	subs	r4, r1, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bfb8      	it	lt
 80014ca:	18e4      	addlt	r4, r4, r3
 80014cc:	f000 f8de 	bl	800168c <__malloc_lock>
 80014d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <_free_r+0x8c>)
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	b933      	cbnz	r3, 80014e4 <_free_r+0x2c>
 80014d6:	6063      	str	r3, [r4, #4]
 80014d8:	6014      	str	r4, [r2, #0]
 80014da:	4628      	mov	r0, r5
 80014dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014e0:	f000 b8da 	b.w	8001698 <__malloc_unlock>
 80014e4:	42a3      	cmp	r3, r4
 80014e6:	d908      	bls.n	80014fa <_free_r+0x42>
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	1821      	adds	r1, r4, r0
 80014ec:	428b      	cmp	r3, r1
 80014ee:	bf01      	itttt	eq
 80014f0:	6819      	ldreq	r1, [r3, #0]
 80014f2:	685b      	ldreq	r3, [r3, #4]
 80014f4:	1809      	addeq	r1, r1, r0
 80014f6:	6021      	streq	r1, [r4, #0]
 80014f8:	e7ed      	b.n	80014d6 <_free_r+0x1e>
 80014fa:	461a      	mov	r2, r3
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	b10b      	cbz	r3, 8001504 <_free_r+0x4c>
 8001500:	42a3      	cmp	r3, r4
 8001502:	d9fa      	bls.n	80014fa <_free_r+0x42>
 8001504:	6811      	ldr	r1, [r2, #0]
 8001506:	1850      	adds	r0, r2, r1
 8001508:	42a0      	cmp	r0, r4
 800150a:	d10b      	bne.n	8001524 <_free_r+0x6c>
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	4401      	add	r1, r0
 8001510:	1850      	adds	r0, r2, r1
 8001512:	4283      	cmp	r3, r0
 8001514:	6011      	str	r1, [r2, #0]
 8001516:	d1e0      	bne.n	80014da <_free_r+0x22>
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4408      	add	r0, r1
 800151e:	6010      	str	r0, [r2, #0]
 8001520:	6053      	str	r3, [r2, #4]
 8001522:	e7da      	b.n	80014da <_free_r+0x22>
 8001524:	d902      	bls.n	800152c <_free_r+0x74>
 8001526:	230c      	movs	r3, #12
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	e7d6      	b.n	80014da <_free_r+0x22>
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	1821      	adds	r1, r4, r0
 8001530:	428b      	cmp	r3, r1
 8001532:	bf01      	itttt	eq
 8001534:	6819      	ldreq	r1, [r3, #0]
 8001536:	685b      	ldreq	r3, [r3, #4]
 8001538:	1809      	addeq	r1, r1, r0
 800153a:	6021      	streq	r1, [r4, #0]
 800153c:	6063      	str	r3, [r4, #4]
 800153e:	6054      	str	r4, [r2, #4]
 8001540:	e7cb      	b.n	80014da <_free_r+0x22>
 8001542:	bd38      	pop	{r3, r4, r5, pc}
 8001544:	200001c4 	.word	0x200001c4

08001548 <sbrk_aligned>:
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	4e0f      	ldr	r6, [pc, #60]	@ (8001588 <sbrk_aligned+0x40>)
 800154c:	460c      	mov	r4, r1
 800154e:	6831      	ldr	r1, [r6, #0]
 8001550:	4605      	mov	r5, r0
 8001552:	b911      	cbnz	r1, 800155a <sbrk_aligned+0x12>
 8001554:	f000 fbaa 	bl	8001cac <_sbrk_r>
 8001558:	6030      	str	r0, [r6, #0]
 800155a:	4621      	mov	r1, r4
 800155c:	4628      	mov	r0, r5
 800155e:	f000 fba5 	bl	8001cac <_sbrk_r>
 8001562:	1c43      	adds	r3, r0, #1
 8001564:	d103      	bne.n	800156e <sbrk_aligned+0x26>
 8001566:	f04f 34ff 	mov.w	r4, #4294967295
 800156a:	4620      	mov	r0, r4
 800156c:	bd70      	pop	{r4, r5, r6, pc}
 800156e:	1cc4      	adds	r4, r0, #3
 8001570:	f024 0403 	bic.w	r4, r4, #3
 8001574:	42a0      	cmp	r0, r4
 8001576:	d0f8      	beq.n	800156a <sbrk_aligned+0x22>
 8001578:	1a21      	subs	r1, r4, r0
 800157a:	4628      	mov	r0, r5
 800157c:	f000 fb96 	bl	8001cac <_sbrk_r>
 8001580:	3001      	adds	r0, #1
 8001582:	d1f2      	bne.n	800156a <sbrk_aligned+0x22>
 8001584:	e7ef      	b.n	8001566 <sbrk_aligned+0x1e>
 8001586:	bf00      	nop
 8001588:	200001c0 	.word	0x200001c0

0800158c <_malloc_r>:
 800158c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001590:	1ccd      	adds	r5, r1, #3
 8001592:	f025 0503 	bic.w	r5, r5, #3
 8001596:	3508      	adds	r5, #8
 8001598:	2d0c      	cmp	r5, #12
 800159a:	bf38      	it	cc
 800159c:	250c      	movcc	r5, #12
 800159e:	2d00      	cmp	r5, #0
 80015a0:	4606      	mov	r6, r0
 80015a2:	db01      	blt.n	80015a8 <_malloc_r+0x1c>
 80015a4:	42a9      	cmp	r1, r5
 80015a6:	d904      	bls.n	80015b2 <_malloc_r+0x26>
 80015a8:	230c      	movs	r3, #12
 80015aa:	6033      	str	r3, [r6, #0]
 80015ac:	2000      	movs	r0, #0
 80015ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001688 <_malloc_r+0xfc>
 80015b6:	f000 f869 	bl	800168c <__malloc_lock>
 80015ba:	f8d8 3000 	ldr.w	r3, [r8]
 80015be:	461c      	mov	r4, r3
 80015c0:	bb44      	cbnz	r4, 8001614 <_malloc_r+0x88>
 80015c2:	4629      	mov	r1, r5
 80015c4:	4630      	mov	r0, r6
 80015c6:	f7ff ffbf 	bl	8001548 <sbrk_aligned>
 80015ca:	1c43      	adds	r3, r0, #1
 80015cc:	4604      	mov	r4, r0
 80015ce:	d158      	bne.n	8001682 <_malloc_r+0xf6>
 80015d0:	f8d8 4000 	ldr.w	r4, [r8]
 80015d4:	4627      	mov	r7, r4
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	d143      	bne.n	8001662 <_malloc_r+0xd6>
 80015da:	2c00      	cmp	r4, #0
 80015dc:	d04b      	beq.n	8001676 <_malloc_r+0xea>
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	4639      	mov	r1, r7
 80015e2:	4630      	mov	r0, r6
 80015e4:	eb04 0903 	add.w	r9, r4, r3
 80015e8:	f000 fb60 	bl	8001cac <_sbrk_r>
 80015ec:	4581      	cmp	r9, r0
 80015ee:	d142      	bne.n	8001676 <_malloc_r+0xea>
 80015f0:	6821      	ldr	r1, [r4, #0]
 80015f2:	4630      	mov	r0, r6
 80015f4:	1a6d      	subs	r5, r5, r1
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7ff ffa6 	bl	8001548 <sbrk_aligned>
 80015fc:	3001      	adds	r0, #1
 80015fe:	d03a      	beq.n	8001676 <_malloc_r+0xea>
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	442b      	add	r3, r5
 8001604:	6023      	str	r3, [r4, #0]
 8001606:	f8d8 3000 	ldr.w	r3, [r8]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	bb62      	cbnz	r2, 8001668 <_malloc_r+0xdc>
 800160e:	f8c8 7000 	str.w	r7, [r8]
 8001612:	e00f      	b.n	8001634 <_malloc_r+0xa8>
 8001614:	6822      	ldr	r2, [r4, #0]
 8001616:	1b52      	subs	r2, r2, r5
 8001618:	d420      	bmi.n	800165c <_malloc_r+0xd0>
 800161a:	2a0b      	cmp	r2, #11
 800161c:	d917      	bls.n	800164e <_malloc_r+0xc2>
 800161e:	1961      	adds	r1, r4, r5
 8001620:	42a3      	cmp	r3, r4
 8001622:	6025      	str	r5, [r4, #0]
 8001624:	bf18      	it	ne
 8001626:	6059      	strne	r1, [r3, #4]
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	bf08      	it	eq
 800162c:	f8c8 1000 	streq.w	r1, [r8]
 8001630:	5162      	str	r2, [r4, r5]
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	4630      	mov	r0, r6
 8001636:	f000 f82f 	bl	8001698 <__malloc_unlock>
 800163a:	f104 000b 	add.w	r0, r4, #11
 800163e:	1d23      	adds	r3, r4, #4
 8001640:	f020 0007 	bic.w	r0, r0, #7
 8001644:	1ac2      	subs	r2, r0, r3
 8001646:	bf1c      	itt	ne
 8001648:	1a1b      	subne	r3, r3, r0
 800164a:	50a3      	strne	r3, [r4, r2]
 800164c:	e7af      	b.n	80015ae <_malloc_r+0x22>
 800164e:	6862      	ldr	r2, [r4, #4]
 8001650:	42a3      	cmp	r3, r4
 8001652:	bf0c      	ite	eq
 8001654:	f8c8 2000 	streq.w	r2, [r8]
 8001658:	605a      	strne	r2, [r3, #4]
 800165a:	e7eb      	b.n	8001634 <_malloc_r+0xa8>
 800165c:	4623      	mov	r3, r4
 800165e:	6864      	ldr	r4, [r4, #4]
 8001660:	e7ae      	b.n	80015c0 <_malloc_r+0x34>
 8001662:	463c      	mov	r4, r7
 8001664:	687f      	ldr	r7, [r7, #4]
 8001666:	e7b6      	b.n	80015d6 <_malloc_r+0x4a>
 8001668:	461a      	mov	r2, r3
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	42a3      	cmp	r3, r4
 800166e:	d1fb      	bne.n	8001668 <_malloc_r+0xdc>
 8001670:	2300      	movs	r3, #0
 8001672:	6053      	str	r3, [r2, #4]
 8001674:	e7de      	b.n	8001634 <_malloc_r+0xa8>
 8001676:	230c      	movs	r3, #12
 8001678:	4630      	mov	r0, r6
 800167a:	6033      	str	r3, [r6, #0]
 800167c:	f000 f80c 	bl	8001698 <__malloc_unlock>
 8001680:	e794      	b.n	80015ac <_malloc_r+0x20>
 8001682:	6005      	str	r5, [r0, #0]
 8001684:	e7d6      	b.n	8001634 <_malloc_r+0xa8>
 8001686:	bf00      	nop
 8001688:	200001c4 	.word	0x200001c4

0800168c <__malloc_lock>:
 800168c:	4801      	ldr	r0, [pc, #4]	@ (8001694 <__malloc_lock+0x8>)
 800168e:	f7ff bf11 	b.w	80014b4 <__retarget_lock_acquire_recursive>
 8001692:	bf00      	nop
 8001694:	200001bc 	.word	0x200001bc

08001698 <__malloc_unlock>:
 8001698:	4801      	ldr	r0, [pc, #4]	@ (80016a0 <__malloc_unlock+0x8>)
 800169a:	f7ff bf0c 	b.w	80014b6 <__retarget_lock_release_recursive>
 800169e:	bf00      	nop
 80016a0:	200001bc 	.word	0x200001bc

080016a4 <__ssputs_r>:
 80016a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016a8:	461f      	mov	r7, r3
 80016aa:	688e      	ldr	r6, [r1, #8]
 80016ac:	4682      	mov	sl, r0
 80016ae:	42be      	cmp	r6, r7
 80016b0:	460c      	mov	r4, r1
 80016b2:	4690      	mov	r8, r2
 80016b4:	680b      	ldr	r3, [r1, #0]
 80016b6:	d82d      	bhi.n	8001714 <__ssputs_r+0x70>
 80016b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80016c0:	d026      	beq.n	8001710 <__ssputs_r+0x6c>
 80016c2:	6965      	ldr	r5, [r4, #20]
 80016c4:	6909      	ldr	r1, [r1, #16]
 80016c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016ca:	eba3 0901 	sub.w	r9, r3, r1
 80016ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80016d2:	1c7b      	adds	r3, r7, #1
 80016d4:	444b      	add	r3, r9
 80016d6:	106d      	asrs	r5, r5, #1
 80016d8:	429d      	cmp	r5, r3
 80016da:	bf38      	it	cc
 80016dc:	461d      	movcc	r5, r3
 80016de:	0553      	lsls	r3, r2, #21
 80016e0:	d527      	bpl.n	8001732 <__ssputs_r+0x8e>
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7ff ff52 	bl	800158c <_malloc_r>
 80016e8:	4606      	mov	r6, r0
 80016ea:	b360      	cbz	r0, 8001746 <__ssputs_r+0xa2>
 80016ec:	464a      	mov	r2, r9
 80016ee:	6921      	ldr	r1, [r4, #16]
 80016f0:	f000 fafa 	bl	8001ce8 <memcpy>
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80016fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fe:	81a3      	strh	r3, [r4, #12]
 8001700:	6126      	str	r6, [r4, #16]
 8001702:	444e      	add	r6, r9
 8001704:	6026      	str	r6, [r4, #0]
 8001706:	463e      	mov	r6, r7
 8001708:	6165      	str	r5, [r4, #20]
 800170a:	eba5 0509 	sub.w	r5, r5, r9
 800170e:	60a5      	str	r5, [r4, #8]
 8001710:	42be      	cmp	r6, r7
 8001712:	d900      	bls.n	8001716 <__ssputs_r+0x72>
 8001714:	463e      	mov	r6, r7
 8001716:	4632      	mov	r2, r6
 8001718:	4641      	mov	r1, r8
 800171a:	6820      	ldr	r0, [r4, #0]
 800171c:	f000 faac 	bl	8001c78 <memmove>
 8001720:	2000      	movs	r0, #0
 8001722:	68a3      	ldr	r3, [r4, #8]
 8001724:	1b9b      	subs	r3, r3, r6
 8001726:	60a3      	str	r3, [r4, #8]
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	4433      	add	r3, r6
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001732:	462a      	mov	r2, r5
 8001734:	f000 fae6 	bl	8001d04 <_realloc_r>
 8001738:	4606      	mov	r6, r0
 800173a:	2800      	cmp	r0, #0
 800173c:	d1e0      	bne.n	8001700 <__ssputs_r+0x5c>
 800173e:	4650      	mov	r0, sl
 8001740:	6921      	ldr	r1, [r4, #16]
 8001742:	f7ff feb9 	bl	80014b8 <_free_r>
 8001746:	230c      	movs	r3, #12
 8001748:	f8ca 3000 	str.w	r3, [sl]
 800174c:	89a3      	ldrh	r3, [r4, #12]
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001756:	81a3      	strh	r3, [r4, #12]
 8001758:	e7e9      	b.n	800172e <__ssputs_r+0x8a>
	...

0800175c <_svfiprintf_r>:
 800175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001760:	4698      	mov	r8, r3
 8001762:	898b      	ldrh	r3, [r1, #12]
 8001764:	4607      	mov	r7, r0
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	460d      	mov	r5, r1
 800176a:	4614      	mov	r4, r2
 800176c:	b09d      	sub	sp, #116	@ 0x74
 800176e:	d510      	bpl.n	8001792 <_svfiprintf_r+0x36>
 8001770:	690b      	ldr	r3, [r1, #16]
 8001772:	b973      	cbnz	r3, 8001792 <_svfiprintf_r+0x36>
 8001774:	2140      	movs	r1, #64	@ 0x40
 8001776:	f7ff ff09 	bl	800158c <_malloc_r>
 800177a:	6028      	str	r0, [r5, #0]
 800177c:	6128      	str	r0, [r5, #16]
 800177e:	b930      	cbnz	r0, 800178e <_svfiprintf_r+0x32>
 8001780:	230c      	movs	r3, #12
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	b01d      	add	sp, #116	@ 0x74
 800178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800178e:	2340      	movs	r3, #64	@ 0x40
 8001790:	616b      	str	r3, [r5, #20]
 8001792:	2300      	movs	r3, #0
 8001794:	9309      	str	r3, [sp, #36]	@ 0x24
 8001796:	2320      	movs	r3, #32
 8001798:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800179c:	2330      	movs	r3, #48	@ 0x30
 800179e:	f04f 0901 	mov.w	r9, #1
 80017a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80017a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001940 <_svfiprintf_r+0x1e4>
 80017aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80017ae:	4623      	mov	r3, r4
 80017b0:	469a      	mov	sl, r3
 80017b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017b6:	b10a      	cbz	r2, 80017bc <_svfiprintf_r+0x60>
 80017b8:	2a25      	cmp	r2, #37	@ 0x25
 80017ba:	d1f9      	bne.n	80017b0 <_svfiprintf_r+0x54>
 80017bc:	ebba 0b04 	subs.w	fp, sl, r4
 80017c0:	d00b      	beq.n	80017da <_svfiprintf_r+0x7e>
 80017c2:	465b      	mov	r3, fp
 80017c4:	4622      	mov	r2, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	4638      	mov	r0, r7
 80017ca:	f7ff ff6b 	bl	80016a4 <__ssputs_r>
 80017ce:	3001      	adds	r0, #1
 80017d0:	f000 80a7 	beq.w	8001922 <_svfiprintf_r+0x1c6>
 80017d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017d6:	445a      	add	r2, fp
 80017d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80017da:	f89a 3000 	ldrb.w	r3, [sl]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 809f 	beq.w	8001922 <_svfiprintf_r+0x1c6>
 80017e4:	2300      	movs	r3, #0
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017ee:	f10a 0a01 	add.w	sl, sl, #1
 80017f2:	9304      	str	r3, [sp, #16]
 80017f4:	9307      	str	r3, [sp, #28]
 80017f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80017fc:	4654      	mov	r4, sl
 80017fe:	2205      	movs	r2, #5
 8001800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001804:	484e      	ldr	r0, [pc, #312]	@ (8001940 <_svfiprintf_r+0x1e4>)
 8001806:	f000 fa61 	bl	8001ccc <memchr>
 800180a:	9a04      	ldr	r2, [sp, #16]
 800180c:	b9d8      	cbnz	r0, 8001846 <_svfiprintf_r+0xea>
 800180e:	06d0      	lsls	r0, r2, #27
 8001810:	bf44      	itt	mi
 8001812:	2320      	movmi	r3, #32
 8001814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001818:	0711      	lsls	r1, r2, #28
 800181a:	bf44      	itt	mi
 800181c:	232b      	movmi	r3, #43	@ 0x2b
 800181e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001822:	f89a 3000 	ldrb.w	r3, [sl]
 8001826:	2b2a      	cmp	r3, #42	@ 0x2a
 8001828:	d015      	beq.n	8001856 <_svfiprintf_r+0xfa>
 800182a:	4654      	mov	r4, sl
 800182c:	2000      	movs	r0, #0
 800182e:	f04f 0c0a 	mov.w	ip, #10
 8001832:	9a07      	ldr	r2, [sp, #28]
 8001834:	4621      	mov	r1, r4
 8001836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800183a:	3b30      	subs	r3, #48	@ 0x30
 800183c:	2b09      	cmp	r3, #9
 800183e:	d94b      	bls.n	80018d8 <_svfiprintf_r+0x17c>
 8001840:	b1b0      	cbz	r0, 8001870 <_svfiprintf_r+0x114>
 8001842:	9207      	str	r2, [sp, #28]
 8001844:	e014      	b.n	8001870 <_svfiprintf_r+0x114>
 8001846:	eba0 0308 	sub.w	r3, r0, r8
 800184a:	fa09 f303 	lsl.w	r3, r9, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	46a2      	mov	sl, r4
 8001852:	9304      	str	r3, [sp, #16]
 8001854:	e7d2      	b.n	80017fc <_svfiprintf_r+0xa0>
 8001856:	9b03      	ldr	r3, [sp, #12]
 8001858:	1d19      	adds	r1, r3, #4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	9103      	str	r1, [sp, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	bfbb      	ittet	lt
 8001862:	425b      	neglt	r3, r3
 8001864:	f042 0202 	orrlt.w	r2, r2, #2
 8001868:	9307      	strge	r3, [sp, #28]
 800186a:	9307      	strlt	r3, [sp, #28]
 800186c:	bfb8      	it	lt
 800186e:	9204      	strlt	r2, [sp, #16]
 8001870:	7823      	ldrb	r3, [r4, #0]
 8001872:	2b2e      	cmp	r3, #46	@ 0x2e
 8001874:	d10a      	bne.n	800188c <_svfiprintf_r+0x130>
 8001876:	7863      	ldrb	r3, [r4, #1]
 8001878:	2b2a      	cmp	r3, #42	@ 0x2a
 800187a:	d132      	bne.n	80018e2 <_svfiprintf_r+0x186>
 800187c:	9b03      	ldr	r3, [sp, #12]
 800187e:	3402      	adds	r4, #2
 8001880:	1d1a      	adds	r2, r3, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	9203      	str	r2, [sp, #12]
 8001886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800188a:	9305      	str	r3, [sp, #20]
 800188c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001944 <_svfiprintf_r+0x1e8>
 8001890:	2203      	movs	r2, #3
 8001892:	4650      	mov	r0, sl
 8001894:	7821      	ldrb	r1, [r4, #0]
 8001896:	f000 fa19 	bl	8001ccc <memchr>
 800189a:	b138      	cbz	r0, 80018ac <_svfiprintf_r+0x150>
 800189c:	2240      	movs	r2, #64	@ 0x40
 800189e:	9b04      	ldr	r3, [sp, #16]
 80018a0:	eba0 000a 	sub.w	r0, r0, sl
 80018a4:	4082      	lsls	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	3401      	adds	r4, #1
 80018aa:	9304      	str	r3, [sp, #16]
 80018ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018b0:	2206      	movs	r2, #6
 80018b2:	4825      	ldr	r0, [pc, #148]	@ (8001948 <_svfiprintf_r+0x1ec>)
 80018b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80018b8:	f000 fa08 	bl	8001ccc <memchr>
 80018bc:	2800      	cmp	r0, #0
 80018be:	d036      	beq.n	800192e <_svfiprintf_r+0x1d2>
 80018c0:	4b22      	ldr	r3, [pc, #136]	@ (800194c <_svfiprintf_r+0x1f0>)
 80018c2:	bb1b      	cbnz	r3, 800190c <_svfiprintf_r+0x1b0>
 80018c4:	9b03      	ldr	r3, [sp, #12]
 80018c6:	3307      	adds	r3, #7
 80018c8:	f023 0307 	bic.w	r3, r3, #7
 80018cc:	3308      	adds	r3, #8
 80018ce:	9303      	str	r3, [sp, #12]
 80018d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018d2:	4433      	add	r3, r6
 80018d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80018d6:	e76a      	b.n	80017ae <_svfiprintf_r+0x52>
 80018d8:	460c      	mov	r4, r1
 80018da:	2001      	movs	r0, #1
 80018dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80018e0:	e7a8      	b.n	8001834 <_svfiprintf_r+0xd8>
 80018e2:	2300      	movs	r3, #0
 80018e4:	f04f 0c0a 	mov.w	ip, #10
 80018e8:	4619      	mov	r1, r3
 80018ea:	3401      	adds	r4, #1
 80018ec:	9305      	str	r3, [sp, #20]
 80018ee:	4620      	mov	r0, r4
 80018f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018f4:	3a30      	subs	r2, #48	@ 0x30
 80018f6:	2a09      	cmp	r2, #9
 80018f8:	d903      	bls.n	8001902 <_svfiprintf_r+0x1a6>
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0c6      	beq.n	800188c <_svfiprintf_r+0x130>
 80018fe:	9105      	str	r1, [sp, #20]
 8001900:	e7c4      	b.n	800188c <_svfiprintf_r+0x130>
 8001902:	4604      	mov	r4, r0
 8001904:	2301      	movs	r3, #1
 8001906:	fb0c 2101 	mla	r1, ip, r1, r2
 800190a:	e7f0      	b.n	80018ee <_svfiprintf_r+0x192>
 800190c:	ab03      	add	r3, sp, #12
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	462a      	mov	r2, r5
 8001912:	4638      	mov	r0, r7
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <_svfiprintf_r+0x1f4>)
 8001916:	a904      	add	r1, sp, #16
 8001918:	f3af 8000 	nop.w
 800191c:	1c42      	adds	r2, r0, #1
 800191e:	4606      	mov	r6, r0
 8001920:	d1d6      	bne.n	80018d0 <_svfiprintf_r+0x174>
 8001922:	89ab      	ldrh	r3, [r5, #12]
 8001924:	065b      	lsls	r3, r3, #25
 8001926:	f53f af2d 	bmi.w	8001784 <_svfiprintf_r+0x28>
 800192a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800192c:	e72c      	b.n	8001788 <_svfiprintf_r+0x2c>
 800192e:	ab03      	add	r3, sp, #12
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	462a      	mov	r2, r5
 8001934:	4638      	mov	r0, r7
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <_svfiprintf_r+0x1f4>)
 8001938:	a904      	add	r1, sp, #16
 800193a:	f000 f87d 	bl	8001a38 <_printf_i>
 800193e:	e7ed      	b.n	800191c <_svfiprintf_r+0x1c0>
 8001940:	08001dc0 	.word	0x08001dc0
 8001944:	08001dc6 	.word	0x08001dc6
 8001948:	08001dca 	.word	0x08001dca
 800194c:	00000000 	.word	0x00000000
 8001950:	080016a5 	.word	0x080016a5

08001954 <_printf_common>:
 8001954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001958:	4616      	mov	r6, r2
 800195a:	4698      	mov	r8, r3
 800195c:	688a      	ldr	r2, [r1, #8]
 800195e:	690b      	ldr	r3, [r1, #16]
 8001960:	4607      	mov	r7, r0
 8001962:	4293      	cmp	r3, r2
 8001964:	bfb8      	it	lt
 8001966:	4613      	movlt	r3, r2
 8001968:	6033      	str	r3, [r6, #0]
 800196a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800196e:	460c      	mov	r4, r1
 8001970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001974:	b10a      	cbz	r2, 800197a <_printf_common+0x26>
 8001976:	3301      	adds	r3, #1
 8001978:	6033      	str	r3, [r6, #0]
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	0699      	lsls	r1, r3, #26
 800197e:	bf42      	ittt	mi
 8001980:	6833      	ldrmi	r3, [r6, #0]
 8001982:	3302      	addmi	r3, #2
 8001984:	6033      	strmi	r3, [r6, #0]
 8001986:	6825      	ldr	r5, [r4, #0]
 8001988:	f015 0506 	ands.w	r5, r5, #6
 800198c:	d106      	bne.n	800199c <_printf_common+0x48>
 800198e:	f104 0a19 	add.w	sl, r4, #25
 8001992:	68e3      	ldr	r3, [r4, #12]
 8001994:	6832      	ldr	r2, [r6, #0]
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	42ab      	cmp	r3, r5
 800199a:	dc2b      	bgt.n	80019f4 <_printf_common+0xa0>
 800199c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80019a0:	6822      	ldr	r2, [r4, #0]
 80019a2:	3b00      	subs	r3, #0
 80019a4:	bf18      	it	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	0692      	lsls	r2, r2, #26
 80019aa:	d430      	bmi.n	8001a0e <_printf_common+0xba>
 80019ac:	4641      	mov	r1, r8
 80019ae:	4638      	mov	r0, r7
 80019b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019b4:	47c8      	blx	r9
 80019b6:	3001      	adds	r0, #1
 80019b8:	d023      	beq.n	8001a02 <_printf_common+0xae>
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	6922      	ldr	r2, [r4, #16]
 80019be:	f003 0306 	and.w	r3, r3, #6
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf14      	ite	ne
 80019c6:	2500      	movne	r5, #0
 80019c8:	6833      	ldreq	r3, [r6, #0]
 80019ca:	f04f 0600 	mov.w	r6, #0
 80019ce:	bf08      	it	eq
 80019d0:	68e5      	ldreq	r5, [r4, #12]
 80019d2:	f104 041a 	add.w	r4, r4, #26
 80019d6:	bf08      	it	eq
 80019d8:	1aed      	subeq	r5, r5, r3
 80019da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80019de:	bf08      	it	eq
 80019e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019e4:	4293      	cmp	r3, r2
 80019e6:	bfc4      	itt	gt
 80019e8:	1a9b      	subgt	r3, r3, r2
 80019ea:	18ed      	addgt	r5, r5, r3
 80019ec:	42b5      	cmp	r5, r6
 80019ee:	d11a      	bne.n	8001a26 <_printf_common+0xd2>
 80019f0:	2000      	movs	r0, #0
 80019f2:	e008      	b.n	8001a06 <_printf_common+0xb2>
 80019f4:	2301      	movs	r3, #1
 80019f6:	4652      	mov	r2, sl
 80019f8:	4641      	mov	r1, r8
 80019fa:	4638      	mov	r0, r7
 80019fc:	47c8      	blx	r9
 80019fe:	3001      	adds	r0, #1
 8001a00:	d103      	bne.n	8001a0a <_printf_common+0xb6>
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a0a:	3501      	adds	r5, #1
 8001a0c:	e7c1      	b.n	8001992 <_printf_common+0x3e>
 8001a0e:	2030      	movs	r0, #48	@ 0x30
 8001a10:	18e1      	adds	r1, r4, r3
 8001a12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a1c:	4422      	add	r2, r4
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a24:	e7c2      	b.n	80019ac <_printf_common+0x58>
 8001a26:	2301      	movs	r3, #1
 8001a28:	4622      	mov	r2, r4
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	47c8      	blx	r9
 8001a30:	3001      	adds	r0, #1
 8001a32:	d0e6      	beq.n	8001a02 <_printf_common+0xae>
 8001a34:	3601      	adds	r6, #1
 8001a36:	e7d9      	b.n	80019ec <_printf_common+0x98>

08001a38 <_printf_i>:
 8001a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a3c:	7e0f      	ldrb	r7, [r1, #24]
 8001a3e:	4691      	mov	r9, r2
 8001a40:	2f78      	cmp	r7, #120	@ 0x78
 8001a42:	4680      	mov	r8, r0
 8001a44:	460c      	mov	r4, r1
 8001a46:	469a      	mov	sl, r3
 8001a48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a4e:	d807      	bhi.n	8001a60 <_printf_i+0x28>
 8001a50:	2f62      	cmp	r7, #98	@ 0x62
 8001a52:	d80a      	bhi.n	8001a6a <_printf_i+0x32>
 8001a54:	2f00      	cmp	r7, #0
 8001a56:	f000 80d3 	beq.w	8001c00 <_printf_i+0x1c8>
 8001a5a:	2f58      	cmp	r7, #88	@ 0x58
 8001a5c:	f000 80ba 	beq.w	8001bd4 <_printf_i+0x19c>
 8001a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a68:	e03a      	b.n	8001ae0 <_printf_i+0xa8>
 8001a6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a6e:	2b15      	cmp	r3, #21
 8001a70:	d8f6      	bhi.n	8001a60 <_printf_i+0x28>
 8001a72:	a101      	add	r1, pc, #4	@ (adr r1, 8001a78 <_printf_i+0x40>)
 8001a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a78:	08001ad1 	.word	0x08001ad1
 8001a7c:	08001ae5 	.word	0x08001ae5
 8001a80:	08001a61 	.word	0x08001a61
 8001a84:	08001a61 	.word	0x08001a61
 8001a88:	08001a61 	.word	0x08001a61
 8001a8c:	08001a61 	.word	0x08001a61
 8001a90:	08001ae5 	.word	0x08001ae5
 8001a94:	08001a61 	.word	0x08001a61
 8001a98:	08001a61 	.word	0x08001a61
 8001a9c:	08001a61 	.word	0x08001a61
 8001aa0:	08001a61 	.word	0x08001a61
 8001aa4:	08001be7 	.word	0x08001be7
 8001aa8:	08001b0f 	.word	0x08001b0f
 8001aac:	08001ba1 	.word	0x08001ba1
 8001ab0:	08001a61 	.word	0x08001a61
 8001ab4:	08001a61 	.word	0x08001a61
 8001ab8:	08001c09 	.word	0x08001c09
 8001abc:	08001a61 	.word	0x08001a61
 8001ac0:	08001b0f 	.word	0x08001b0f
 8001ac4:	08001a61 	.word	0x08001a61
 8001ac8:	08001a61 	.word	0x08001a61
 8001acc:	08001ba9 	.word	0x08001ba9
 8001ad0:	6833      	ldr	r3, [r6, #0]
 8001ad2:	1d1a      	adds	r2, r3, #4
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6032      	str	r2, [r6, #0]
 8001ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e09e      	b.n	8001c22 <_printf_i+0x1ea>
 8001ae4:	6833      	ldr	r3, [r6, #0]
 8001ae6:	6820      	ldr	r0, [r4, #0]
 8001ae8:	1d19      	adds	r1, r3, #4
 8001aea:	6031      	str	r1, [r6, #0]
 8001aec:	0606      	lsls	r6, r0, #24
 8001aee:	d501      	bpl.n	8001af4 <_printf_i+0xbc>
 8001af0:	681d      	ldr	r5, [r3, #0]
 8001af2:	e003      	b.n	8001afc <_printf_i+0xc4>
 8001af4:	0645      	lsls	r5, r0, #25
 8001af6:	d5fb      	bpl.n	8001af0 <_printf_i+0xb8>
 8001af8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001afc:	2d00      	cmp	r5, #0
 8001afe:	da03      	bge.n	8001b08 <_printf_i+0xd0>
 8001b00:	232d      	movs	r3, #45	@ 0x2d
 8001b02:	426d      	negs	r5, r5
 8001b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b08:	230a      	movs	r3, #10
 8001b0a:	4859      	ldr	r0, [pc, #356]	@ (8001c70 <_printf_i+0x238>)
 8001b0c:	e011      	b.n	8001b32 <_printf_i+0xfa>
 8001b0e:	6821      	ldr	r1, [r4, #0]
 8001b10:	6833      	ldr	r3, [r6, #0]
 8001b12:	0608      	lsls	r0, r1, #24
 8001b14:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b18:	d402      	bmi.n	8001b20 <_printf_i+0xe8>
 8001b1a:	0649      	lsls	r1, r1, #25
 8001b1c:	bf48      	it	mi
 8001b1e:	b2ad      	uxthmi	r5, r5
 8001b20:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b22:	6033      	str	r3, [r6, #0]
 8001b24:	bf14      	ite	ne
 8001b26:	230a      	movne	r3, #10
 8001b28:	2308      	moveq	r3, #8
 8001b2a:	4851      	ldr	r0, [pc, #324]	@ (8001c70 <_printf_i+0x238>)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b32:	6866      	ldr	r6, [r4, #4]
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	bfa8      	it	ge
 8001b38:	6821      	ldrge	r1, [r4, #0]
 8001b3a:	60a6      	str	r6, [r4, #8]
 8001b3c:	bfa4      	itt	ge
 8001b3e:	f021 0104 	bicge.w	r1, r1, #4
 8001b42:	6021      	strge	r1, [r4, #0]
 8001b44:	b90d      	cbnz	r5, 8001b4a <_printf_i+0x112>
 8001b46:	2e00      	cmp	r6, #0
 8001b48:	d04b      	beq.n	8001be2 <_printf_i+0x1aa>
 8001b4a:	4616      	mov	r6, r2
 8001b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b50:	fb03 5711 	mls	r7, r3, r1, r5
 8001b54:	5dc7      	ldrb	r7, [r0, r7]
 8001b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b5a:	462f      	mov	r7, r5
 8001b5c:	42bb      	cmp	r3, r7
 8001b5e:	460d      	mov	r5, r1
 8001b60:	d9f4      	bls.n	8001b4c <_printf_i+0x114>
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d10b      	bne.n	8001b7e <_printf_i+0x146>
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	07df      	lsls	r7, r3, #31
 8001b6a:	d508      	bpl.n	8001b7e <_printf_i+0x146>
 8001b6c:	6923      	ldr	r3, [r4, #16]
 8001b6e:	6861      	ldr	r1, [r4, #4]
 8001b70:	4299      	cmp	r1, r3
 8001b72:	bfde      	ittt	le
 8001b74:	2330      	movle	r3, #48	@ 0x30
 8001b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b7e:	1b92      	subs	r2, r2, r6
 8001b80:	6122      	str	r2, [r4, #16]
 8001b82:	464b      	mov	r3, r9
 8001b84:	4621      	mov	r1, r4
 8001b86:	4640      	mov	r0, r8
 8001b88:	f8cd a000 	str.w	sl, [sp]
 8001b8c:	aa03      	add	r2, sp, #12
 8001b8e:	f7ff fee1 	bl	8001954 <_printf_common>
 8001b92:	3001      	adds	r0, #1
 8001b94:	d14a      	bne.n	8001c2c <_printf_i+0x1f4>
 8001b96:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9a:	b004      	add	sp, #16
 8001b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	f043 0320 	orr.w	r3, r3, #32
 8001ba6:	6023      	str	r3, [r4, #0]
 8001ba8:	2778      	movs	r7, #120	@ 0x78
 8001baa:	4832      	ldr	r0, [pc, #200]	@ (8001c74 <_printf_i+0x23c>)
 8001bac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	6831      	ldr	r1, [r6, #0]
 8001bb4:	061f      	lsls	r7, r3, #24
 8001bb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8001bba:	d402      	bmi.n	8001bc2 <_printf_i+0x18a>
 8001bbc:	065f      	lsls	r7, r3, #25
 8001bbe:	bf48      	it	mi
 8001bc0:	b2ad      	uxthmi	r5, r5
 8001bc2:	6031      	str	r1, [r6, #0]
 8001bc4:	07d9      	lsls	r1, r3, #31
 8001bc6:	bf44      	itt	mi
 8001bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8001bcc:	6023      	strmi	r3, [r4, #0]
 8001bce:	b11d      	cbz	r5, 8001bd8 <_printf_i+0x1a0>
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	e7ab      	b.n	8001b2c <_printf_i+0xf4>
 8001bd4:	4826      	ldr	r0, [pc, #152]	@ (8001c70 <_printf_i+0x238>)
 8001bd6:	e7e9      	b.n	8001bac <_printf_i+0x174>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	f023 0320 	bic.w	r3, r3, #32
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	e7f6      	b.n	8001bd0 <_printf_i+0x198>
 8001be2:	4616      	mov	r6, r2
 8001be4:	e7bd      	b.n	8001b62 <_printf_i+0x12a>
 8001be6:	6833      	ldr	r3, [r6, #0]
 8001be8:	6825      	ldr	r5, [r4, #0]
 8001bea:	1d18      	adds	r0, r3, #4
 8001bec:	6961      	ldr	r1, [r4, #20]
 8001bee:	6030      	str	r0, [r6, #0]
 8001bf0:	062e      	lsls	r6, r5, #24
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	d501      	bpl.n	8001bfa <_printf_i+0x1c2>
 8001bf6:	6019      	str	r1, [r3, #0]
 8001bf8:	e002      	b.n	8001c00 <_printf_i+0x1c8>
 8001bfa:	0668      	lsls	r0, r5, #25
 8001bfc:	d5fb      	bpl.n	8001bf6 <_printf_i+0x1be>
 8001bfe:	8019      	strh	r1, [r3, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	4616      	mov	r6, r2
 8001c04:	6123      	str	r3, [r4, #16]
 8001c06:	e7bc      	b.n	8001b82 <_printf_i+0x14a>
 8001c08:	6833      	ldr	r3, [r6, #0]
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	1d1a      	adds	r2, r3, #4
 8001c0e:	6032      	str	r2, [r6, #0]
 8001c10:	681e      	ldr	r6, [r3, #0]
 8001c12:	6862      	ldr	r2, [r4, #4]
 8001c14:	4630      	mov	r0, r6
 8001c16:	f000 f859 	bl	8001ccc <memchr>
 8001c1a:	b108      	cbz	r0, 8001c20 <_printf_i+0x1e8>
 8001c1c:	1b80      	subs	r0, r0, r6
 8001c1e:	6060      	str	r0, [r4, #4]
 8001c20:	6863      	ldr	r3, [r4, #4]
 8001c22:	6123      	str	r3, [r4, #16]
 8001c24:	2300      	movs	r3, #0
 8001c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c2a:	e7aa      	b.n	8001b82 <_printf_i+0x14a>
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	4649      	mov	r1, r9
 8001c30:	4640      	mov	r0, r8
 8001c32:	6923      	ldr	r3, [r4, #16]
 8001c34:	47d0      	blx	sl
 8001c36:	3001      	adds	r0, #1
 8001c38:	d0ad      	beq.n	8001b96 <_printf_i+0x15e>
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	079b      	lsls	r3, r3, #30
 8001c3e:	d413      	bmi.n	8001c68 <_printf_i+0x230>
 8001c40:	68e0      	ldr	r0, [r4, #12]
 8001c42:	9b03      	ldr	r3, [sp, #12]
 8001c44:	4298      	cmp	r0, r3
 8001c46:	bfb8      	it	lt
 8001c48:	4618      	movlt	r0, r3
 8001c4a:	e7a6      	b.n	8001b9a <_printf_i+0x162>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	4632      	mov	r2, r6
 8001c50:	4649      	mov	r1, r9
 8001c52:	4640      	mov	r0, r8
 8001c54:	47d0      	blx	sl
 8001c56:	3001      	adds	r0, #1
 8001c58:	d09d      	beq.n	8001b96 <_printf_i+0x15e>
 8001c5a:	3501      	adds	r5, #1
 8001c5c:	68e3      	ldr	r3, [r4, #12]
 8001c5e:	9903      	ldr	r1, [sp, #12]
 8001c60:	1a5b      	subs	r3, r3, r1
 8001c62:	42ab      	cmp	r3, r5
 8001c64:	dcf2      	bgt.n	8001c4c <_printf_i+0x214>
 8001c66:	e7eb      	b.n	8001c40 <_printf_i+0x208>
 8001c68:	2500      	movs	r5, #0
 8001c6a:	f104 0619 	add.w	r6, r4, #25
 8001c6e:	e7f5      	b.n	8001c5c <_printf_i+0x224>
 8001c70:	08001dd1 	.word	0x08001dd1
 8001c74:	08001de2 	.word	0x08001de2

08001c78 <memmove>:
 8001c78:	4288      	cmp	r0, r1
 8001c7a:	b510      	push	{r4, lr}
 8001c7c:	eb01 0402 	add.w	r4, r1, r2
 8001c80:	d902      	bls.n	8001c88 <memmove+0x10>
 8001c82:	4284      	cmp	r4, r0
 8001c84:	4623      	mov	r3, r4
 8001c86:	d807      	bhi.n	8001c98 <memmove+0x20>
 8001c88:	1e43      	subs	r3, r0, #1
 8001c8a:	42a1      	cmp	r1, r4
 8001c8c:	d008      	beq.n	8001ca0 <memmove+0x28>
 8001c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c96:	e7f8      	b.n	8001c8a <memmove+0x12>
 8001c98:	4601      	mov	r1, r0
 8001c9a:	4402      	add	r2, r0
 8001c9c:	428a      	cmp	r2, r1
 8001c9e:	d100      	bne.n	8001ca2 <memmove+0x2a>
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001caa:	e7f7      	b.n	8001c9c <memmove+0x24>

08001cac <_sbrk_r>:
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4d05      	ldr	r5, [pc, #20]	@ (8001cc8 <_sbrk_r+0x1c>)
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	602b      	str	r3, [r5, #0]
 8001cb8:	f7fe ffb6 	bl	8000c28 <_sbrk>
 8001cbc:	1c43      	adds	r3, r0, #1
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk_r+0x1a>
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	b103      	cbz	r3, 8001cc6 <_sbrk_r+0x1a>
 8001cc4:	6023      	str	r3, [r4, #0]
 8001cc6:	bd38      	pop	{r3, r4, r5, pc}
 8001cc8:	200001b8 	.word	0x200001b8

08001ccc <memchr>:
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b510      	push	{r4, lr}
 8001cd0:	b2c9      	uxtb	r1, r1
 8001cd2:	4402      	add	r2, r0
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	d101      	bne.n	8001cde <memchr+0x12>
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e003      	b.n	8001ce6 <memchr+0x1a>
 8001cde:	7804      	ldrb	r4, [r0, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	428c      	cmp	r4, r1
 8001ce4:	d1f6      	bne.n	8001cd4 <memchr+0x8>
 8001ce6:	bd10      	pop	{r4, pc}

08001ce8 <memcpy>:
 8001ce8:	440a      	add	r2, r1
 8001cea:	4291      	cmp	r1, r2
 8001cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8001cf0:	d100      	bne.n	8001cf4 <memcpy+0xc>
 8001cf2:	4770      	bx	lr
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cfa:	4291      	cmp	r1, r2
 8001cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d00:	d1f9      	bne.n	8001cf6 <memcpy+0xe>
 8001d02:	bd10      	pop	{r4, pc}

08001d04 <_realloc_r>:
 8001d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d08:	4680      	mov	r8, r0
 8001d0a:	4615      	mov	r5, r2
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	b921      	cbnz	r1, 8001d1a <_realloc_r+0x16>
 8001d10:	4611      	mov	r1, r2
 8001d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d16:	f7ff bc39 	b.w	800158c <_malloc_r>
 8001d1a:	b92a      	cbnz	r2, 8001d28 <_realloc_r+0x24>
 8001d1c:	f7ff fbcc 	bl	80014b8 <_free_r>
 8001d20:	2400      	movs	r4, #0
 8001d22:	4620      	mov	r0, r4
 8001d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d28:	f000 f81a 	bl	8001d60 <_malloc_usable_size_r>
 8001d2c:	4285      	cmp	r5, r0
 8001d2e:	4606      	mov	r6, r0
 8001d30:	d802      	bhi.n	8001d38 <_realloc_r+0x34>
 8001d32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001d36:	d8f4      	bhi.n	8001d22 <_realloc_r+0x1e>
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4640      	mov	r0, r8
 8001d3c:	f7ff fc26 	bl	800158c <_malloc_r>
 8001d40:	4607      	mov	r7, r0
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d0ec      	beq.n	8001d20 <_realloc_r+0x1c>
 8001d46:	42b5      	cmp	r5, r6
 8001d48:	462a      	mov	r2, r5
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	bf28      	it	cs
 8001d4e:	4632      	movcs	r2, r6
 8001d50:	f7ff ffca 	bl	8001ce8 <memcpy>
 8001d54:	4621      	mov	r1, r4
 8001d56:	4640      	mov	r0, r8
 8001d58:	f7ff fbae 	bl	80014b8 <_free_r>
 8001d5c:	463c      	mov	r4, r7
 8001d5e:	e7e0      	b.n	8001d22 <_realloc_r+0x1e>

08001d60 <_malloc_usable_size_r>:
 8001d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d64:	1f18      	subs	r0, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bfbc      	itt	lt
 8001d6a:	580b      	ldrlt	r3, [r1, r0]
 8001d6c:	18c0      	addlt	r0, r0, r3
 8001d6e:	4770      	bx	lr

08001d70 <_init>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	bf00      	nop
 8001d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d76:	bc08      	pop	{r3}
 8001d78:	469e      	mov	lr, r3
 8001d7a:	4770      	bx	lr

08001d7c <_fini>:
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7e:	bf00      	nop
 8001d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d82:	bc08      	pop	{r3}
 8001d84:	469e      	mov	lr, r3
 8001d86:	4770      	bx	lr
